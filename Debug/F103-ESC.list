
F103-ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dec  08003dec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003dec  08003dec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dec  08003dec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000074  08003e68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003e68  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a60f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001944  00000000  00000000  0002a6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  0002bff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  0002cb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000145b1  00000000  00000000  0002d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d8f  00000000  00000000  00041b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072128  00000000  00000000  00049908  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bba30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003234  00000000  00000000  000bbaac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cf4 	.word	0x08003cf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003cf4 	.word	0x08003cf4

0800014c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000150:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <DWT_Init+0x38>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000158:	2b00      	cmp	r3, #0
 800015a:	d10e      	bne.n	800017a <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800015c:	4b09      	ldr	r3, [pc, #36]	; (8000184 <DWT_Init+0x38>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a08      	ldr	r2, [pc, #32]	; (8000184 <DWT_Init+0x38>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000168:	4b07      	ldr	r3, [pc, #28]	; (8000188 <DWT_Init+0x3c>)
 800016a:	2200      	movs	r2, #0
 800016c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800016e:	4b06      	ldr	r3, [pc, #24]	; (8000188 <DWT_Init+0x3c>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	4a05      	ldr	r2, [pc, #20]	; (8000188 <DWT_Init+0x3c>)
 8000174:	f043 0301 	orr.w	r3, r3, #1
 8000178:	6013      	str	r3, [r2, #0]
    }
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	e000edf0 	.word	0xe000edf0
 8000188:	e0001000 	.word	0xe0001000

0800018c <outPWM>:
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void sound(uint32_t Frequency, uint32_t milliseconds);
void phase(int step, uint16_t speed);
void outPWM(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t dutyCycle){
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	4613      	mov	r3, r2
 8000198:	80fb      	strh	r3, [r7, #6]
	dutyCycle = map(dutyCycle, 0, 0xFFFF, 0, 2000);
 800019a:	88fb      	ldrh	r3, [r7, #6]
 800019c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80001a0:	fb02 f303 	mul.w	r3, r2, r3
 80001a4:	4a14      	ldr	r2, [pc, #80]	; (80001f8 <outPWM+0x6c>)
 80001a6:	fb82 1203 	smull	r1, r2, r2, r3
 80001aa:	441a      	add	r2, r3
 80001ac:	13d2      	asrs	r2, r2, #15
 80001ae:	17db      	asrs	r3, r3, #31
 80001b0:	1ad3      	subs	r3, r2, r3
 80001b2:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d104      	bne.n	80001c4 <outPWM+0x38>
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	88fa      	ldrh	r2, [r7, #6]
 80001c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80001c2:	e013      	b.n	80001ec <outPWM+0x60>
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	2b04      	cmp	r3, #4
 80001c8:	d104      	bne.n	80001d4 <outPWM+0x48>
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	88fa      	ldrh	r2, [r7, #6]
 80001d0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80001d2:	e00b      	b.n	80001ec <outPWM+0x60>
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	2b08      	cmp	r3, #8
 80001d8:	d104      	bne.n	80001e4 <outPWM+0x58>
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	88fa      	ldrh	r2, [r7, #6]
 80001e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80001e2:	e003      	b.n	80001ec <outPWM+0x60>
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	88fa      	ldrh	r2, [r7, #6]
 80001ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	80008001 	.word	0x80008001

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fe76 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f846 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f9ec 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800020c:	f000 f888 	bl	8000320 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000210:	f000 f9be 	bl	8000590 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000214:	f000 f93c 	bl	8000490 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1);
  //HAL_ADC_Start(&hadc1);
  //HAL_ADC_Start_DMA(&hadc1, adcValue, 3);
  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
  DWT_Init();
 8000218:	f7ff ff98 	bl	800014c <DWT_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3);
 800021c:	210c      	movs	r1, #12
 800021e:	4817      	ldr	r0, [pc, #92]	; (800027c <main+0x80>)
 8000220:	f001 fdc4 	bl	8001dac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3);
 8000224:	210c      	movs	r1, #12
 8000226:	4815      	ldr	r0, [pc, #84]	; (800027c <main+0x80>)
 8000228:	f002 fe21 	bl	8002e6e <HAL_TIMEx_PWMN_Start>
  //HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, 0, 0);
  //HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, 0, 0);
  //HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, 0, 0);


  if(Input_DutyCycle > ESC_PWM_MIN + 100){
 800022c:	4b14      	ldr	r3, [pc, #80]	; (8000280 <main+0x84>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f240 424c 	movw	r2, #1100	; 0x44c
 8000234:	4293      	cmp	r3, r2
 8000236:	d903      	bls.n	8000240 <main+0x44>
	  esc_mode = ESC_CALIBRATE;
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <main+0x88>)
 800023a:	2202      	movs	r2, #2
 800023c:	701a      	strb	r2, [r3, #0]
 800023e:	e002      	b.n	8000246 <main+0x4a>
  } else esc_mode = ESC_DISARMED;
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <main+0x88>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, "MULAI\r\n", 7, 10);
 8000246:	230a      	movs	r3, #10
 8000248:	2207      	movs	r2, #7
 800024a:	490f      	ldr	r1, [pc, #60]	; (8000288 <main+0x8c>)
 800024c:	480f      	ldr	r0, [pc, #60]	; (800028c <main+0x90>)
 800024e:	f002 ff50 	bl	80030f2 <HAL_UART_Transmit>
				  lastDelta = delta;
				  step = step + 1;
				  if(step > 6) step = 1;
			  }
		  }*/
	  	  phase(step, 0xFFFF / 0xF);
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <main+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f241 1111 	movw	r1, #4369	; 0x1111
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fa0c 	bl	8000678 <phase>
		  step++;
 8000260:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <main+0x94>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <main+0x94>)
 8000268:	6013      	str	r3, [r2, #0]
		  if(step > 6) step = 1;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <main+0x94>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b06      	cmp	r3, #6
 8000270:	ddef      	ble.n	8000252 <main+0x56>
 8000272:	4b07      	ldr	r3, [pc, #28]	; (8000290 <main+0x94>)
 8000274:	2201      	movs	r2, #1
 8000276:	601a      	str	r2, [r3, #0]
	  	  phase(step, 0xFFFF / 0xF);
 8000278:	e7eb      	b.n	8000252 <main+0x56>
 800027a:	bf00      	nop
 800027c:	200001e0 	.word	0x200001e0
 8000280:	20000090 	.word	0x20000090
 8000284:	2000019c 	.word	0x2000019c
 8000288:	08003d0c 	.word	0x08003d0c
 800028c:	200001a0 	.word	0x200001a0
 8000290:	20000000 	.word	0x20000000

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b090      	sub	sp, #64	; 0x40
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2228      	movs	r2, #40	; 0x28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 f90c 	bl	80034c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b6:	2301      	movs	r3, #1
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c8:	2302      	movs	r3, #2
 80002ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 0318 	add.w	r3, r7, #24
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 f8e9 	bl	80014b4 <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002e8:	f000 fbd2 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	2302      	movs	r3, #2
 80002f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2102      	movs	r1, #2
 8000306:	4618      	mov	r0, r3
 8000308:	f001 fb54 	bl	80019b4 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000312:	f000 fbbd 	bl	8000a90 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3740      	adds	r7, #64	; 0x40
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	; 0x58
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800033e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]
 800034e:	615a      	str	r2, [r3, #20]
 8000350:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2220      	movs	r2, #32
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f003 f8b1 	bl	80034c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800035e:	4b4a      	ldr	r3, [pc, #296]	; (8000488 <MX_TIM1_Init+0x168>)
 8000360:	4a4a      	ldr	r2, [pc, #296]	; (800048c <MX_TIM1_Init+0x16c>)
 8000362:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000364:	4b48      	ldr	r3, [pc, #288]	; (8000488 <MX_TIM1_Init+0x168>)
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036a:	4b47      	ldr	r3, [pc, #284]	; (8000488 <MX_TIM1_Init+0x168>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000 - 1;
 8000370:	4b45      	ldr	r3, [pc, #276]	; (8000488 <MX_TIM1_Init+0x168>)
 8000372:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000376:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000378:	4b43      	ldr	r3, [pc, #268]	; (8000488 <MX_TIM1_Init+0x168>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800037e:	4b42      	ldr	r3, [pc, #264]	; (8000488 <MX_TIM1_Init+0x168>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000384:	4b40      	ldr	r3, [pc, #256]	; (8000488 <MX_TIM1_Init+0x168>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038a:	483f      	ldr	r0, [pc, #252]	; (8000488 <MX_TIM1_Init+0x168>)
 800038c:	f001 fcae 	bl	8001cec <HAL_TIM_Base_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000396:	f000 fb7b 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003a4:	4619      	mov	r1, r3
 80003a6:	4838      	ldr	r0, [pc, #224]	; (8000488 <MX_TIM1_Init+0x168>)
 80003a8:	f001 ffc8 	bl	800233c <HAL_TIM_ConfigClockSource>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003b2:	f000 fb6d 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003b6:	4834      	ldr	r0, [pc, #208]	; (8000488 <MX_TIM1_Init+0x168>)
 80003b8:	f001 fcc3 	bl	8001d42 <HAL_TIM_PWM_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003c2:	f000 fb65 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c6:	2300      	movs	r3, #0
 80003c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003d2:	4619      	mov	r1, r3
 80003d4:	482c      	ldr	r0, [pc, #176]	; (8000488 <MX_TIM1_Init+0x168>)
 80003d6:	f002 fd74 	bl	8002ec2 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003e0:	f000 fb56 	bl	8000a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e4:	2360      	movs	r3, #96	; 0x60
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ec:	2300      	movs	r3, #0
 80003ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003f0:	2300      	movs	r3, #0
 80003f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80003f4:	2304      	movs	r3, #4
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003f8:	2300      	movs	r3, #0
 80003fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000404:	2200      	movs	r2, #0
 8000406:	4619      	mov	r1, r3
 8000408:	481f      	ldr	r0, [pc, #124]	; (8000488 <MX_TIM1_Init+0x168>)
 800040a:	f001 fed1 	bl	80021b0 <HAL_TIM_PWM_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000414:	f000 fb3c 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041c:	2204      	movs	r2, #4
 800041e:	4619      	mov	r1, r3
 8000420:	4819      	ldr	r0, [pc, #100]	; (8000488 <MX_TIM1_Init+0x168>)
 8000422:	f001 fec5 	bl	80021b0 <HAL_TIM_PWM_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800042c:	f000 fb30 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000434:	2208      	movs	r2, #8
 8000436:	4619      	mov	r1, r3
 8000438:	4813      	ldr	r0, [pc, #76]	; (8000488 <MX_TIM1_Init+0x168>)
 800043a:	f001 feb9 	bl	80021b0 <HAL_TIM_PWM_ConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000444:	f000 fb24 	bl	8000a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800045c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000460:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000462:	2300      	movs	r3, #0
 8000464:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4619      	mov	r1, r3
 800046a:	4807      	ldr	r0, [pc, #28]	; (8000488 <MX_TIM1_Init+0x168>)
 800046c:	f002 fd6d 	bl	8002f4a <HAL_TIMEx_ConfigBreakDeadTime>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000476:	f000 fb0b 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800047a:	4803      	ldr	r0, [pc, #12]	; (8000488 <MX_TIM1_Init+0x168>)
 800047c:	f000 fbb8 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 8000480:	bf00      	nop
 8000482:	3758      	adds	r7, #88	; 0x58
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200001e0 	.word	0x200001e0
 800048c:	40012c00 	.word	0x40012c00

08000490 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08c      	sub	sp, #48	; 0x30
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000496:	f107 031c 	add.w	r3, r7, #28
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004a6:	f107 030c 	add.w	r3, r7, #12
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004bc:	4b33      	ldr	r3, [pc, #204]	; (800058c <MX_TIM2_Init+0xfc>)
 80004be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 80004c4:	4b31      	ldr	r3, [pc, #196]	; (800058c <MX_TIM2_Init+0xfc>)
 80004c6:	2247      	movs	r2, #71	; 0x47
 80004c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ca:	4b30      	ldr	r3, [pc, #192]	; (800058c <MX_TIM2_Init+0xfc>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004d0:	4b2e      	ldr	r3, [pc, #184]	; (800058c <MX_TIM2_Init+0xfc>)
 80004d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b2c      	ldr	r3, [pc, #176]	; (800058c <MX_TIM2_Init+0xfc>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <MX_TIM2_Init+0xfc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80004e4:	4829      	ldr	r0, [pc, #164]	; (800058c <MX_TIM2_Init+0xfc>)
 80004e6:	f001 fc93 	bl	8001e10 <HAL_TIM_IC_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80004f0:	f000 face 	bl	8000a90 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80004f4:	2304      	movs	r3, #4
 80004f6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80004f8:	2350      	movs	r3, #80	; 0x50
 80004fa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004fc:	2300      	movs	r3, #0
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000508:	f107 031c 	add.w	r3, r7, #28
 800050c:	4619      	mov	r1, r3
 800050e:	481f      	ldr	r0, [pc, #124]	; (800058c <MX_TIM2_Init+0xfc>)
 8000510:	f001 ffcb 	bl	80024aa <HAL_TIM_SlaveConfigSynchro>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800051a:	f000 fab9 	bl	8000a90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000522:	2301      	movs	r3, #1
 8000524:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	4815      	ldr	r0, [pc, #84]	; (800058c <MX_TIM2_Init+0xfc>)
 8000538:	f001 fd9d 	bl	8002076 <HAL_TIM_IC_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000542:	f000 faa5 	bl	8000a90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000546:	2302      	movs	r3, #2
 8000548:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800054a:	2302      	movs	r3, #2
 800054c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	2204      	movs	r2, #4
 8000554:	4619      	mov	r1, r3
 8000556:	480d      	ldr	r0, [pc, #52]	; (800058c <MX_TIM2_Init+0xfc>)
 8000558:	f001 fd8d 	bl	8002076 <HAL_TIM_IC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000562:	f000 fa95 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4619      	mov	r1, r3
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <MX_TIM2_Init+0xfc>)
 8000574:	f002 fca5 	bl	8002ec2 <HAL_TIMEx_MasterConfigSynchronization>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800057e:	f000 fa87 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	3730      	adds	r7, #48	; 0x30
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000224 	.word	0x20000224

08000590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <MX_USART1_UART_Init+0x50>)
 8000598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 800059c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005c8:	f002 fd46 	bl	8003058 <HAL_UART_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005d2:	f000 fa5d 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200001a0 	.word	0x200001a0
 80005e0:	40013800 	.word	0x40013800

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_GPIO_Init+0x8c>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <MX_GPIO_Init+0x8c>)
 80005fe:	f043 0320 	orr.w	r3, r3, #32
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0320 	and.w	r3, r3, #32
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a16      	ldr	r2, [pc, #88]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_GPIO_Init+0x8c>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_GPIO_Init+0x8c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a10      	ldr	r2, [pc, #64]	; (8000670 <MX_GPIO_Init+0x8c>)
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_GPIO_Init+0x8c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2108      	movs	r1, #8
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MX_GPIO_Init+0x90>)
 8000646:	f000 ff1d 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800064a:	2308      	movs	r3, #8
 800064c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_GPIO_Init+0x90>)
 8000662:	f000 fdb5 	bl	80011d0 <HAL_GPIO_Init>

}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	40010800 	.word	0x40010800

08000678 <phase>:

/* USER CODE BEGIN 4 */

void phase(int step, uint16_t speed){
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	807b      	strh	r3, [r7, #2]
	uint32_t bemfSum = (bemfA + bemfB + bemfC) / 3;
 8000684:	4b92      	ldr	r3, [pc, #584]	; (80008d0 <phase+0x258>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b92      	ldr	r3, [pc, #584]	; (80008d4 <phase+0x25c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	441a      	add	r2, r3
 800068e:	4b92      	ldr	r3, [pc, #584]	; (80008d8 <phase+0x260>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a91      	ldr	r2, [pc, #580]	; (80008dc <phase+0x264>)
 8000696:	fba2 2303 	umull	r2, r3, r2, r3
 800069a:	085b      	lsrs	r3, r3, #1
 800069c:	60fb      	str	r3, [r7, #12]

	//strSize = sprintf((char*)buffer, "bemfA: %lu, bemfB: %lu, bemfC: %lu, bemfSum: %lu\t",bemfA, bemfB, bemfC, bemfSum);
	//HAL_UART_Transmit(&huart1, buffer, strSize, 100);

	switch(step){
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	2b05      	cmp	r3, #5
 80006a4:	f200 8166 	bhi.w	8000974 <phase+0x2fc>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <phase+0x38>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c9 	.word	0x080006c9
 80006b4:	08000731 	.word	0x08000731
 80006b8:	08000799 	.word	0x08000799
 80006bc:	08000801 	.word	0x08000801
 80006c0:	08000869 	.word	0x08000869
 80006c4:	0800090d 	.word	0x0800090d
	case 1: //AH-BL
		ENABLE_A;
 80006c8:	4b85      	ldr	r3, [pc, #532]	; (80008e0 <phase+0x268>)
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	4a84      	ldr	r2, [pc, #528]	; (80008e0 <phase+0x268>)
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	6213      	str	r3, [r2, #32]
		ENABLE_B;
 80006d4:	4b82      	ldr	r3, [pc, #520]	; (80008e0 <phase+0x268>)
 80006d6:	6a1b      	ldr	r3, [r3, #32]
 80006d8:	4a81      	ldr	r2, [pc, #516]	; (80008e0 <phase+0x268>)
 80006da:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80006de:	6213      	str	r3, [r2, #32]
		DISABLE_C;
 80006e0:	4b7f      	ldr	r3, [pc, #508]	; (80008e0 <phase+0x268>)
 80006e2:	6a1b      	ldr	r3, [r3, #32]
 80006e4:	4a7e      	ldr	r2, [pc, #504]	; (80008e0 <phase+0x268>)
 80006e6:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 80006ea:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_B, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2104      	movs	r1, #4
 80006f0:	487c      	ldr	r0, [pc, #496]	; (80008e4 <phase+0x26c>)
 80006f2:	f7ff fd4b 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_A, speed);
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	461a      	mov	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	4879      	ldr	r0, [pc, #484]	; (80008e4 <phase+0x26c>)
 80006fe:	f7ff fd45 	bl	800018c <outPWM>

		delta = bemfA - bemfSum;
 8000702:	4b73      	ldr	r3, [pc, #460]	; (80008d0 <phase+0x258>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	4a77      	ldr	r2, [pc, #476]	; (80008e8 <phase+0x270>)
 800070c:	6013      	str	r3, [r2, #0]
		strSize = sprintf((char*)buffer, "STEP: %d AH-BL\r\n", step);
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4976      	ldr	r1, [pc, #472]	; (80008ec <phase+0x274>)
 8000712:	4877      	ldr	r0, [pc, #476]	; (80008f0 <phase+0x278>)
 8000714:	f002 fedc 	bl	80034d0 <siprintf>
 8000718:	4602      	mov	r2, r0
 800071a:	4b76      	ldr	r3, [pc, #472]	; (80008f4 <phase+0x27c>)
 800071c:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 800071e:	4b75      	ldr	r3, [pc, #468]	; (80008f4 <phase+0x27c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	b29a      	uxth	r2, r3
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	4972      	ldr	r1, [pc, #456]	; (80008f0 <phase+0x278>)
 8000728:	4873      	ldr	r0, [pc, #460]	; (80008f8 <phase+0x280>)
 800072a:	f002 fce2 	bl	80030f2 <HAL_UART_Transmit>
		break;
 800072e:	e121      	b.n	8000974 <phase+0x2fc>

	case 2: //AH-CL
		ENABLE_A;
 8000730:	4b6b      	ldr	r3, [pc, #428]	; (80008e0 <phase+0x268>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	4a6a      	ldr	r2, [pc, #424]	; (80008e0 <phase+0x268>)
 8000736:	f043 0305 	orr.w	r3, r3, #5
 800073a:	6213      	str	r3, [r2, #32]
		ENABLE_C;
 800073c:	4b68      	ldr	r3, [pc, #416]	; (80008e0 <phase+0x268>)
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	4a67      	ldr	r2, [pc, #412]	; (80008e0 <phase+0x268>)
 8000742:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000746:	6213      	str	r3, [r2, #32]
		DISABLE_B;
 8000748:	4b65      	ldr	r3, [pc, #404]	; (80008e0 <phase+0x268>)
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	4a64      	ldr	r2, [pc, #400]	; (80008e0 <phase+0x268>)
 800074e:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000752:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_C, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2108      	movs	r1, #8
 8000758:	4862      	ldr	r0, [pc, #392]	; (80008e4 <phase+0x26c>)
 800075a:	f7ff fd17 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_A, speed);
 800075e:	887b      	ldrh	r3, [r7, #2]
 8000760:	461a      	mov	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	485f      	ldr	r0, [pc, #380]	; (80008e4 <phase+0x26c>)
 8000766:	f7ff fd11 	bl	800018c <outPWM>

		delta = bemfC - bemfSum;
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <phase+0x260>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	4a5d      	ldr	r2, [pc, #372]	; (80008e8 <phase+0x270>)
 8000774:	6013      	str	r3, [r2, #0]
		strSize = sprintf((char*)buffer, "STEP: %d AH-CL\r\n", step);
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4960      	ldr	r1, [pc, #384]	; (80008fc <phase+0x284>)
 800077a:	485d      	ldr	r0, [pc, #372]	; (80008f0 <phase+0x278>)
 800077c:	f002 fea8 	bl	80034d0 <siprintf>
 8000780:	4602      	mov	r2, r0
 8000782:	4b5c      	ldr	r3, [pc, #368]	; (80008f4 <phase+0x27c>)
 8000784:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8000786:	4b5b      	ldr	r3, [pc, #364]	; (80008f4 <phase+0x27c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	b29a      	uxth	r2, r3
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	4958      	ldr	r1, [pc, #352]	; (80008f0 <phase+0x278>)
 8000790:	4859      	ldr	r0, [pc, #356]	; (80008f8 <phase+0x280>)
 8000792:	f002 fcae 	bl	80030f2 <HAL_UART_Transmit>
		break;
 8000796:	e0ed      	b.n	8000974 <phase+0x2fc>

	case 3: //BH-CL
		ENABLE_B;
 8000798:	4b51      	ldr	r3, [pc, #324]	; (80008e0 <phase+0x268>)
 800079a:	6a1b      	ldr	r3, [r3, #32]
 800079c:	4a50      	ldr	r2, [pc, #320]	; (80008e0 <phase+0x268>)
 800079e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80007a2:	6213      	str	r3, [r2, #32]
		ENABLE_C;
 80007a4:	4b4e      	ldr	r3, [pc, #312]	; (80008e0 <phase+0x268>)
 80007a6:	6a1b      	ldr	r3, [r3, #32]
 80007a8:	4a4d      	ldr	r2, [pc, #308]	; (80008e0 <phase+0x268>)
 80007aa:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80007ae:	6213      	str	r3, [r2, #32]
		DISABLE_A;
 80007b0:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <phase+0x268>)
 80007b2:	6a1b      	ldr	r3, [r3, #32]
 80007b4:	4a4a      	ldr	r2, [pc, #296]	; (80008e0 <phase+0x268>)
 80007b6:	f023 0305 	bic.w	r3, r3, #5
 80007ba:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_C, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2108      	movs	r1, #8
 80007c0:	4848      	ldr	r0, [pc, #288]	; (80008e4 <phase+0x26c>)
 80007c2:	f7ff fce3 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_B, speed);
 80007c6:	887b      	ldrh	r3, [r7, #2]
 80007c8:	461a      	mov	r2, r3
 80007ca:	2104      	movs	r1, #4
 80007cc:	4845      	ldr	r0, [pc, #276]	; (80008e4 <phase+0x26c>)
 80007ce:	f7ff fcdd 	bl	800018c <outPWM>

		strSize = sprintf((char*)buffer, "STEP: %d BH-CL\r\n", step);
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	494a      	ldr	r1, [pc, #296]	; (8000900 <phase+0x288>)
 80007d6:	4846      	ldr	r0, [pc, #280]	; (80008f0 <phase+0x278>)
 80007d8:	f002 fe7a 	bl	80034d0 <siprintf>
 80007dc:	4602      	mov	r2, r0
 80007de:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <phase+0x27c>)
 80007e0:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 80007e2:	4b44      	ldr	r3, [pc, #272]	; (80008f4 <phase+0x27c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	4941      	ldr	r1, [pc, #260]	; (80008f0 <phase+0x278>)
 80007ec:	4842      	ldr	r0, [pc, #264]	; (80008f8 <phase+0x280>)
 80007ee:	f002 fc80 	bl	80030f2 <HAL_UART_Transmit>
		delta = bemfB - bemfSum;
 80007f2:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <phase+0x25c>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	4a3b      	ldr	r2, [pc, #236]	; (80008e8 <phase+0x270>)
 80007fc:	6013      	str	r3, [r2, #0]
		break;
 80007fe:	e0b9      	b.n	8000974 <phase+0x2fc>

	case 4: //BH-AL
		ENABLE_B;
 8000800:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <phase+0x268>)
 8000802:	6a1b      	ldr	r3, [r3, #32]
 8000804:	4a36      	ldr	r2, [pc, #216]	; (80008e0 <phase+0x268>)
 8000806:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800080a:	6213      	str	r3, [r2, #32]
		ENABLE_A;
 800080c:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <phase+0x268>)
 800080e:	6a1b      	ldr	r3, [r3, #32]
 8000810:	4a33      	ldr	r2, [pc, #204]	; (80008e0 <phase+0x268>)
 8000812:	f043 0305 	orr.w	r3, r3, #5
 8000816:	6213      	str	r3, [r2, #32]
		DISABLE_C;
 8000818:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <phase+0x268>)
 800081a:	6a1b      	ldr	r3, [r3, #32]
 800081c:	4a30      	ldr	r2, [pc, #192]	; (80008e0 <phase+0x268>)
 800081e:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 8000822:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_A, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	482e      	ldr	r0, [pc, #184]	; (80008e4 <phase+0x26c>)
 800082a:	f7ff fcaf 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_B, speed);
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	461a      	mov	r2, r3
 8000832:	2104      	movs	r1, #4
 8000834:	482b      	ldr	r0, [pc, #172]	; (80008e4 <phase+0x26c>)
 8000836:	f7ff fca9 	bl	800018c <outPWM>

		strSize = sprintf((char*)buffer, "STEP: %d BH-AL\r\n", step);
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	4931      	ldr	r1, [pc, #196]	; (8000904 <phase+0x28c>)
 800083e:	482c      	ldr	r0, [pc, #176]	; (80008f0 <phase+0x278>)
 8000840:	f002 fe46 	bl	80034d0 <siprintf>
 8000844:	4602      	mov	r2, r0
 8000846:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <phase+0x27c>)
 8000848:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <phase+0x27c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	4927      	ldr	r1, [pc, #156]	; (80008f0 <phase+0x278>)
 8000854:	4828      	ldr	r0, [pc, #160]	; (80008f8 <phase+0x280>)
 8000856:	f002 fc4c 	bl	80030f2 <HAL_UART_Transmit>
		delta = bemfA - bemfSum;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <phase+0x258>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <phase+0x270>)
 8000864:	6013      	str	r3, [r2, #0]
		break;
 8000866:	e085      	b.n	8000974 <phase+0x2fc>

	case 5: //CH-AL
		ENABLE_C;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <phase+0x268>)
 800086a:	6a1b      	ldr	r3, [r3, #32]
 800086c:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <phase+0x268>)
 800086e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000872:	6213      	str	r3, [r2, #32]
		ENABLE_A;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <phase+0x268>)
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <phase+0x268>)
 800087a:	f043 0305 	orr.w	r3, r3, #5
 800087e:	6213      	str	r3, [r2, #32]
		DISABLE_B;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <phase+0x268>)
 8000882:	6a1b      	ldr	r3, [r3, #32]
 8000884:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <phase+0x268>)
 8000886:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800088a:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_A, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	4814      	ldr	r0, [pc, #80]	; (80008e4 <phase+0x26c>)
 8000892:	f7ff fc7b 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_C, speed);
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	461a      	mov	r2, r3
 800089a:	2108      	movs	r1, #8
 800089c:	4811      	ldr	r0, [pc, #68]	; (80008e4 <phase+0x26c>)
 800089e:	f7ff fc75 	bl	800018c <outPWM>

		strSize = sprintf((char*)buffer, "STEP: %d CH-AL\r\n", step);
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4918      	ldr	r1, [pc, #96]	; (8000908 <phase+0x290>)
 80008a6:	4812      	ldr	r0, [pc, #72]	; (80008f0 <phase+0x278>)
 80008a8:	f002 fe12 	bl	80034d0 <siprintf>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <phase+0x27c>)
 80008b0:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <phase+0x27c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	2364      	movs	r3, #100	; 0x64
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <phase+0x278>)
 80008bc:	480e      	ldr	r0, [pc, #56]	; (80008f8 <phase+0x280>)
 80008be:	f002 fc18 	bl	80030f2 <HAL_UART_Transmit>
		delta = bemfC - bemfSum;
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <phase+0x260>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <phase+0x270>)
 80008cc:	6013      	str	r3, [r2, #0]
		break;
 80008ce:	e051      	b.n	8000974 <phase+0x2fc>
 80008d0:	20000164 	.word	0x20000164
 80008d4:	20000168 	.word	0x20000168
 80008d8:	2000016c 	.word	0x2000016c
 80008dc:	aaaaaaab 	.word	0xaaaaaaab
 80008e0:	40012c00 	.word	0x40012c00
 80008e4:	200001e0 	.word	0x200001e0
 80008e8:	20000170 	.word	0x20000170
 80008ec:	08003d14 	.word	0x08003d14
 80008f0:	20000098 	.word	0x20000098
 80008f4:	20000160 	.word	0x20000160
 80008f8:	200001a0 	.word	0x200001a0
 80008fc:	08003d28 	.word	0x08003d28
 8000900:	08003d3c 	.word	0x08003d3c
 8000904:	08003d50 	.word	0x08003d50
 8000908:	08003d64 	.word	0x08003d64

	case 6: //CH-BL
		ENABLE_C;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <phase+0x304>)
 800090e:	6a1b      	ldr	r3, [r3, #32]
 8000910:	4a1a      	ldr	r2, [pc, #104]	; (800097c <phase+0x304>)
 8000912:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000916:	6213      	str	r3, [r2, #32]
		ENABLE_B;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <phase+0x304>)
 800091a:	6a1b      	ldr	r3, [r3, #32]
 800091c:	4a17      	ldr	r2, [pc, #92]	; (800097c <phase+0x304>)
 800091e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000922:	6213      	str	r3, [r2, #32]
		DISABLE_A;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <phase+0x304>)
 8000926:	6a1b      	ldr	r3, [r3, #32]
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <phase+0x304>)
 800092a:	f023 0305 	bic.w	r3, r3, #5
 800092e:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_B, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2104      	movs	r1, #4
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <phase+0x308>)
 8000936:	f7ff fc29 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_C, speed);
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	461a      	mov	r2, r3
 800093e:	2108      	movs	r1, #8
 8000940:	480f      	ldr	r0, [pc, #60]	; (8000980 <phase+0x308>)
 8000942:	f7ff fc23 	bl	800018c <outPWM>

		strSize = sprintf((char*)buffer, "STEP: %d CH-BL\r\n", step);
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	490e      	ldr	r1, [pc, #56]	; (8000984 <phase+0x30c>)
 800094a:	480f      	ldr	r0, [pc, #60]	; (8000988 <phase+0x310>)
 800094c:	f002 fdc0 	bl	80034d0 <siprintf>
 8000950:	4602      	mov	r2, r0
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <phase+0x314>)
 8000954:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <phase+0x314>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	b29a      	uxth	r2, r3
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	490a      	ldr	r1, [pc, #40]	; (8000988 <phase+0x310>)
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <phase+0x318>)
 8000962:	f002 fbc6 	bl	80030f2 <HAL_UART_Transmit>
		delta = bemfB - bemfSum;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <phase+0x31c>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <phase+0x320>)
 8000970:	6013      	str	r3, [r2, #0]
		break;
 8000972:	bf00      	nop
	}
	//HAL_Delay(100);
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40012c00 	.word	0x40012c00
 8000980:	200001e0 	.word	0x200001e0
 8000984:	08003d78 	.word	0x08003d78
 8000988:	20000098 	.word	0x20000098
 800098c:	20000160 	.word	0x20000160
 8000990:	200001a0 	.word	0x200001a0
 8000994:	20000168 	.word	0x20000168
 8000998:	20000170 	.word	0x20000170

0800099c <HAL_TIM_IC_CaptureCallback>:
		}
		++x;
	}*/
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	static uint32_t Count_Freq1;
	static uint32_t Count_Freq2;

	static bool Freq_State;

	if(htim->Instance == TIM2){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ac:	d159      	bne.n	8000a62 <HAL_TIM_IC_CaptureCallback+0xc6>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7f1b      	ldrb	r3, [r3, #28]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d137      	bne.n	8000a26 <HAL_TIM_IC_CaptureCallback+0x8a>
			Count_RisingEdge = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80009b6:	2100      	movs	r1, #0
 80009b8:	482c      	ldr	r0, [pc, #176]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80009ba:	f001 fdb9 	bl	8002530 <HAL_TIM_ReadCapturedValue>
 80009be:	4602      	mov	r2, r0
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80009c2:	601a      	str	r2, [r3, #0]

			if(Freq_State == 0){
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	f083 0301 	eor.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d007      	beq.n	80009e2 <HAL_TIM_IC_CaptureCallback+0x46>
				Freq_State = 1;
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
				Count_Freq1 = Count_RisingEdge;
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a26      	ldr	r2, [pc, #152]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	e02c      	b.n	8000a3c <HAL_TIM_IC_CaptureCallback+0xa0>
			}
			else if(Freq_State == 1){
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d028      	beq.n	8000a3c <HAL_TIM_IC_CaptureCallback+0xa0>
				Freq_State = 0;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
				Count_Freq2 = Count_RisingEdge;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a21      	ldr	r2, [pc, #132]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80009f6:	6013      	str	r3, [r2, #0]
				Frequency = 1 / ((Count_Freq2 - Count_Freq1) / 1000); //in kHz
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0xe0>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
 8000a08:	099b      	lsrs	r3, r3, #6
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a10:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000a12:	6013      	str	r3, [r2, #0]
				Frequency = Frequency * 1000; //Convert to Hz
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a1c:	fb02 f303 	mul.w	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	e00a      	b.n	8000a3c <HAL_TIM_IC_CaptureCallback+0xa0>
			}
		}

		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7f1b      	ldrb	r3, [r3, #28]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d106      	bne.n	8000a3c <HAL_TIM_IC_CaptureCallback+0xa0>
			Count_FallingEdge = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 8000a2e:	2104      	movs	r1, #4
 8000a30:	480e      	ldr	r0, [pc, #56]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000a32:	f001 fd7d 	bl	8002530 <HAL_TIM_ReadCapturedValue>
 8000a36:	4602      	mov	r2, r0
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000a3a:	601a      	str	r2, [r3, #0]
		}

		if(Count_FallingEdge > Count_RisingEdge){
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d90c      	bls.n	8000a62 <HAL_TIM_IC_CaptureCallback+0xc6>
			Input_DutyCycle = Count_FallingEdge - Count_RisingEdge;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000a54:	6013      	str	r3, [r2, #0]
			Count_RisingEdge = 0;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
			Count_FallingEdge = 0;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001e0 	.word	0x200001e0
 8000a70:	20000174 	.word	0x20000174
 8000a74:	20000178 	.word	0x20000178
 8000a78:	2000017c 	.word	0x2000017c
 8000a7c:	20000180 	.word	0x20000180
 8000a80:	10624dd3 	.word	0x10624dd3
 8000a84:	20000094 	.word	0x20000094
 8000a88:	20000184 	.word	0x20000184
 8000a8c:	20000090 	.word	0x20000090

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_MspInit+0x5c>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <HAL_MspInit+0x5c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6193      	str	r3, [r2, #24]
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_MspInit+0x5c>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x5c>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x5c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x5c>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_MspInit+0x60>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_MspInit+0x60>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010000 	.word	0x40010000

08000b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <HAL_TIM_Base_MspInit+0x34>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d10b      	bne.n	8000b2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_TIM_Base_MspInit+0x38>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_TIM_Base_MspInit+0x38>)
 8000b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_TIM_Base_MspInit+0x38>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40012c00 	.word	0x40012c00
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b5a:	d13e      	bne.n	8000bda <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5c:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_TIM_IC_MspInit+0xa8>)
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <HAL_TIM_IC_MspInit+0xa8>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	61d3      	str	r3, [r2, #28]
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_TIM_IC_MspInit+0xa8>)
 8000b6a:	69db      	ldr	r3, [r3, #28]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <HAL_TIM_IC_MspInit+0xa8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <HAL_TIM_IC_MspInit+0xa8>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_TIM_IC_MspInit+0xa8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4811      	ldr	r0, [pc, #68]	; (8000be8 <HAL_TIM_IC_MspInit+0xac>)
 8000ba2:	f000 fb15 	bl	80011d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_TIM_IC_MspInit+0xb0>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <HAL_TIM_IC_MspInit+0xb0>)
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	201c      	movs	r0, #28
 8000bd0:	f000 fac7 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bd4:	201c      	movs	r0, #28
 8000bd6:	f000 fae0 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010800 	.word	0x40010800
 8000bec:	40010000 	.word	0x40010000

08000bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a25      	ldr	r2, [pc, #148]	; (8000ca0 <HAL_TIM_MspPostInit+0xb0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d142      	bne.n	8000c96 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_TIM_MspPostInit+0xb4>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <HAL_TIM_MspPostInit+0xb4>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <HAL_TIM_MspPostInit+0xb4>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_TIM_MspPostInit+0xb4>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_TIM_MspPostInit+0xb4>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_TIM_MspPostInit+0xb4>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c40:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <HAL_TIM_MspPostInit+0xb8>)
 8000c56:	f000 fabb 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2302      	movs	r3, #2
 8000c64:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <HAL_TIM_MspPostInit+0xbc>)
 8000c6e:	f000 faaf 	bl	80011d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_TIM_MspPostInit+0xc0>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_TIM_MspPostInit+0xc0>)
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012c00 	.word	0x40012c00
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40010000 	.word	0x40010000

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a22      	ldr	r2, [pc, #136]	; (8000d58 <HAL_UART_MspInit+0xa4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d13d      	bne.n	8000d50 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_UART_MspInit+0xa8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <HAL_UART_MspInit+0xa8>)
 8000cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_UART_MspInit+0xa8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0xa8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a1a      	ldr	r2, [pc, #104]	; (8000d5c <HAL_UART_MspInit+0xa8>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_UART_MspInit+0xa8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4812      	ldr	r0, [pc, #72]	; (8000d60 <HAL_UART_MspInit+0xac>)
 8000d18:	f000 fa5a 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <HAL_UART_MspInit+0xac>)
 8000d30:	f000 fa4e 	bl	80011d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_UART_MspInit+0xb0>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4a:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_UART_MspInit+0xb0>)
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	; 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40013800 	.word	0x40013800
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	40010000 	.word	0x40010000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <BusFault_Handler+0x4>

08000d86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f8e2 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM2_IRQHandler+0x10>)
 8000dc2:	f001 f850 	bl	8001e66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000224 	.word	0x20000224

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f002 fb34 	bl	800346c <__errno>
 8000e04:	4602      	mov	r2, r0
 8000e06:	230c      	movs	r3, #12
 8000e08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20005000 	.word	0x20005000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20000188 	.word	0x20000188
 8000e38:	20000278 	.word	0x20000278

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <SystemInit+0x5c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <SystemInit+0x5c>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <SystemInit+0x5c>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	4911      	ldr	r1, [pc, #68]	; (8000e98 <SystemInit+0x5c>)
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <SystemInit+0x60>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <SystemInit+0x5c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <SystemInit+0x5c>)
 8000e5e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <SystemInit+0x5c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SystemInit+0x5c>)
 8000e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e72:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <SystemInit+0x5c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <SystemInit+0x5c>)
 8000e7a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e7e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SystemInit+0x5c>)
 8000e82:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e86:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SystemInit+0x64>)
 8000e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e8e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	f8ff0000 	.word	0xf8ff0000
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ea4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ea6:	e003      	b.n	8000eb0 <LoopCopyDataInit>

08000ea8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000eaa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000eac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eae:	3104      	adds	r1, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000eb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000eb8:	d3f6      	bcc.n	8000ea8 <CopyDataInit>
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ebc:	e002      	b.n	8000ec4 <LoopFillZerobss>

08000ebe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ec0:	f842 3b04 	str.w	r3, [r2], #4

08000ec4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ec6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ec8:	d3f9      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eca:	f7ff ffb7 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f002 fad3 	bl	8003478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed2:	f7ff f993 	bl	80001fc <main>
  bx lr
 8000ed6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ed8:	08003df4 	.word	0x08003df4
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ee0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000ee4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000ee8:	20000278 	.word	0x20000278

08000eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC1_2_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x28>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x28>)
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f923 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fdc6 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f93b 	bl	80011b6 <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f903 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000004 	.word	0x20000004
 8000f74:	2000000c 	.word	0x2000000c
 8000f78:	20000008 	.word	0x20000008

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x20>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <HAL_IncTick+0x20>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000270 	.word	0x20000270

08000fa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <HAL_GetTick+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000270 	.word	0x20000270

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4906      	ldr	r1, [pc, #24]	; (800104c <__NVIC_EnableIRQ+0x34>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff90 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff2d 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff42 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff90 	bl	80010a4 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5f 	bl	8001050 <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff35 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b08b      	sub	sp, #44	; 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	e127      	b.n	8001434 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e4:	2201      	movs	r2, #1
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 8116 	bne.w	800142e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b12      	cmp	r3, #18
 8001208:	d034      	beq.n	8001274 <HAL_GPIO_Init+0xa4>
 800120a:	2b12      	cmp	r3, #18
 800120c:	d80d      	bhi.n	800122a <HAL_GPIO_Init+0x5a>
 800120e:	2b02      	cmp	r3, #2
 8001210:	d02b      	beq.n	800126a <HAL_GPIO_Init+0x9a>
 8001212:	2b02      	cmp	r3, #2
 8001214:	d804      	bhi.n	8001220 <HAL_GPIO_Init+0x50>
 8001216:	2b00      	cmp	r3, #0
 8001218:	d031      	beq.n	800127e <HAL_GPIO_Init+0xae>
 800121a:	2b01      	cmp	r3, #1
 800121c:	d01c      	beq.n	8001258 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121e:	e048      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001220:	2b03      	cmp	r3, #3
 8001222:	d043      	beq.n	80012ac <HAL_GPIO_Init+0xdc>
 8001224:	2b11      	cmp	r3, #17
 8001226:	d01b      	beq.n	8001260 <HAL_GPIO_Init+0x90>
          break;
 8001228:	e043      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800122a:	4a89      	ldr	r2, [pc, #548]	; (8001450 <HAL_GPIO_Init+0x280>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d026      	beq.n	800127e <HAL_GPIO_Init+0xae>
 8001230:	4a87      	ldr	r2, [pc, #540]	; (8001450 <HAL_GPIO_Init+0x280>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d806      	bhi.n	8001244 <HAL_GPIO_Init+0x74>
 8001236:	4a87      	ldr	r2, [pc, #540]	; (8001454 <HAL_GPIO_Init+0x284>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d020      	beq.n	800127e <HAL_GPIO_Init+0xae>
 800123c:	4a86      	ldr	r2, [pc, #536]	; (8001458 <HAL_GPIO_Init+0x288>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01d      	beq.n	800127e <HAL_GPIO_Init+0xae>
          break;
 8001242:	e036      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001244:	4a85      	ldr	r2, [pc, #532]	; (800145c <HAL_GPIO_Init+0x28c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0xae>
 800124a:	4a85      	ldr	r2, [pc, #532]	; (8001460 <HAL_GPIO_Init+0x290>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d016      	beq.n	800127e <HAL_GPIO_Init+0xae>
 8001250:	4a84      	ldr	r2, [pc, #528]	; (8001464 <HAL_GPIO_Init+0x294>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0xae>
          break;
 8001256:	e02c      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e028      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	3304      	adds	r3, #4
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e023      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	3308      	adds	r3, #8
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e01e      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	330c      	adds	r3, #12
 800127a:	623b      	str	r3, [r7, #32]
          break;
 800127c:	e019      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001286:	2304      	movs	r3, #4
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e012      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d105      	bne.n	80012a0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001294:	2308      	movs	r3, #8
 8001296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	611a      	str	r2, [r3, #16]
          break;
 800129e:	e008      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a0:	2308      	movs	r3, #8
 80012a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	615a      	str	r2, [r3, #20]
          break;
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
          break;
 80012b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2bff      	cmp	r3, #255	; 0xff
 80012b6:	d801      	bhi.n	80012bc <HAL_GPIO_Init+0xec>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	e001      	b.n	80012c0 <HAL_GPIO_Init+0xf0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3304      	adds	r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2bff      	cmp	r3, #255	; 0xff
 80012c6:	d802      	bhi.n	80012ce <HAL_GPIO_Init+0xfe>
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x104>
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	3b08      	subs	r3, #8
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	210f      	movs	r1, #15
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	401a      	ands	r2, r3
 80012e6:	6a39      	ldr	r1, [r7, #32]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	431a      	orrs	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8096 	beq.w	800142e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <HAL_GPIO_Init+0x298>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a58      	ldr	r2, [pc, #352]	; (8001468 <HAL_GPIO_Init+0x298>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	4b56      	ldr	r3, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x298>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800131a:	4a54      	ldr	r2, [pc, #336]	; (800146c <HAL_GPIO_Init+0x29c>)
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4b      	ldr	r2, [pc, #300]	; (8001470 <HAL_GPIO_Init+0x2a0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x19e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_GPIO_Init+0x2a4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x19a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a49      	ldr	r2, [pc, #292]	; (8001478 <HAL_GPIO_Init+0x2a8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x196>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a48      	ldr	r2, [pc, #288]	; (800147c <HAL_GPIO_Init+0x2ac>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x192>
 800135e:	2303      	movs	r3, #3
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x1a0>
 8001362:	2304      	movs	r3, #4
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x1a0>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x1a0>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x1a0>
 800136e:	2300      	movs	r3, #0
 8001370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001380:	493a      	ldr	r1, [pc, #232]	; (800146c <HAL_GPIO_Init+0x29c>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4938      	ldr	r1, [pc, #224]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
 80013a6:	e006      	b.n	80013b6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	4933      	ldr	r1, [pc, #204]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	492e      	ldr	r1, [pc, #184]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
 80013ce:	e006      	b.n	80013de <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4929      	ldr	r1, [pc, #164]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013da:	4013      	ands	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	4924      	ldr	r1, [pc, #144]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	491f      	ldr	r1, [pc, #124]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 8001402:	4013      	ands	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	491a      	ldr	r1, [pc, #104]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	60cb      	str	r3, [r1, #12]
 800141e:	e006      	b.n	800142e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	43db      	mvns	r3, r3
 8001428:	4915      	ldr	r1, [pc, #84]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 800142a:	4013      	ands	r3, r2
 800142c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	3301      	adds	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f aed0 	bne.w	80011e4 <HAL_GPIO_Init+0x14>
  }
}
 8001444:	bf00      	nop
 8001446:	372c      	adds	r7, #44	; 0x2c
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	10210000 	.word	0x10210000
 8001454:	10110000 	.word	0x10110000
 8001458:	10120000 	.word	0x10120000
 800145c:	10310000 	.word	0x10310000
 8001460:	10320000 	.word	0x10320000
 8001464:	10220000 	.word	0x10220000
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	40010800 	.word	0x40010800
 8001474:	40010c00 	.word	0x40010c00
 8001478:	40011000 	.word	0x40011000
 800147c:	40011400 	.word	0x40011400
 8001480:	40010400 	.word	0x40010400

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	611a      	str	r2, [r3, #16]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e26c      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8087 	beq.w	80015e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d4:	4b92      	ldr	r3, [pc, #584]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d00c      	beq.n	80014fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014e0:	4b8f      	ldr	r3, [pc, #572]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d112      	bne.n	8001512 <HAL_RCC_OscConfig+0x5e>
 80014ec:	4b8c      	ldr	r3, [pc, #560]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f8:	d10b      	bne.n	8001512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fa:	4b89      	ldr	r3, [pc, #548]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d06c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x12c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d168      	bne.n	80015e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e246      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x76>
 800151c:	4b80      	ldr	r3, [pc, #512]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a7f      	ldr	r2, [pc, #508]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e02e      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b7b      	ldr	r3, [pc, #492]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a7a      	ldr	r2, [pc, #488]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b78      	ldr	r3, [pc, #480]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a77      	ldr	r2, [pc, #476]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e01d      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0xbc>
 8001556:	4b72      	ldr	r3, [pc, #456]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a71      	ldr	r2, [pc, #452]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b6f      	ldr	r3, [pc, #444]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a6e      	ldr	r2, [pc, #440]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 8001570:	4b6b      	ldr	r3, [pc, #428]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a6a      	ldr	r2, [pc, #424]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a67      	ldr	r2, [pc, #412]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fd06 	bl	8000fa0 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fd02 	bl	8000fa0 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1fa      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b5d      	ldr	r3, [pc, #372]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0xe4>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fcf2 	bl	8000fa0 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fcee 	bl	8000fa0 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1e6      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x10c>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d063      	beq.n	80016b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ee:	4b4c      	ldr	r3, [pc, #304]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015fa:	4b49      	ldr	r3, [pc, #292]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b08      	cmp	r3, #8
 8001604:	d11c      	bne.n	8001640 <HAL_RCC_OscConfig+0x18c>
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d116      	bne.n	8001640 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x176>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d001      	beq.n	800162a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e1ba      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4939      	ldr	r1, [pc, #228]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	e03a      	b.n	80016b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001648:	4b36      	ldr	r3, [pc, #216]	; (8001724 <HAL_RCC_OscConfig+0x270>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fca7 	bl	8000fa0 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fca3 	bl	8000fa0 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e19b      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4927      	ldr	r1, [pc, #156]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
 8001688:	e015      	b.n	80016b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_RCC_OscConfig+0x270>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fc86 	bl	8000fa0 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff fc82 	bl	8000fa0 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e17a      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d03a      	beq.n	8001738 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d019      	beq.n	80016fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_RCC_OscConfig+0x274>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d0:	f7ff fc66 	bl	8000fa0 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc62 	bl	8000fa0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e15a      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f000 fada 	bl	8001cb0 <RCC_Delay>
 80016fc:	e01c      	b.n	8001738 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_RCC_OscConfig+0x274>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff fc4c 	bl	8000fa0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170a:	e00f      	b.n	800172c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fc48 	bl	8000fa0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d908      	bls.n	800172c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e140      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	42420000 	.word	0x42420000
 8001728:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	4b9e      	ldr	r3, [pc, #632]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e9      	bne.n	800170c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a6 	beq.w	8001892 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174a:	4b97      	ldr	r3, [pc, #604]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10d      	bne.n	8001772 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b94      	ldr	r3, [pc, #592]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a93      	ldr	r2, [pc, #588]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	61d3      	str	r3, [r2, #28]
 8001762:	4b91      	ldr	r3, [pc, #580]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	4b8e      	ldr	r3, [pc, #568]	; (80019ac <HAL_RCC_OscConfig+0x4f8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d118      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177e:	4b8b      	ldr	r3, [pc, #556]	; (80019ac <HAL_RCC_OscConfig+0x4f8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a8a      	ldr	r2, [pc, #552]	; (80019ac <HAL_RCC_OscConfig+0x4f8>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178a:	f7ff fc09 	bl	8000fa0 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001792:	f7ff fc05 	bl	8000fa0 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b64      	cmp	r3, #100	; 0x64
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0fd      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_RCC_OscConfig+0x4f8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x312>
 80017b8:	4b7b      	ldr	r3, [pc, #492]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a7a      	ldr	r2, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	e02d      	b.n	8001822 <HAL_RCC_OscConfig+0x36e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x334>
 80017ce:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a75      	ldr	r2, [pc, #468]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6213      	str	r3, [r2, #32]
 80017da:	4b73      	ldr	r3, [pc, #460]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4a72      	ldr	r2, [pc, #456]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	6213      	str	r3, [r2, #32]
 80017e6:	e01c      	b.n	8001822 <HAL_RCC_OscConfig+0x36e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d10c      	bne.n	800180a <HAL_RCC_OscConfig+0x356>
 80017f0:	4b6d      	ldr	r3, [pc, #436]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a6c      	ldr	r2, [pc, #432]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a69      	ldr	r2, [pc, #420]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	e00b      	b.n	8001822 <HAL_RCC_OscConfig+0x36e>
 800180a:	4b67      	ldr	r3, [pc, #412]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a66      	ldr	r2, [pc, #408]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a63      	ldr	r2, [pc, #396]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d015      	beq.n	8001856 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff fbb9 	bl	8000fa0 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fbb5 	bl	8000fa0 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0ab      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	4b57      	ldr	r3, [pc, #348]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ee      	beq.n	8001832 <HAL_RCC_OscConfig+0x37e>
 8001854:	e014      	b.n	8001880 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001856:	f7ff fba3 	bl	8000fa0 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fb9f 	bl	8000fa0 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e095      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ee      	bne.n	800185e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d105      	bne.n	8001892 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001886:	4b48      	ldr	r3, [pc, #288]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8081 	beq.w	800199e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189c:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d061      	beq.n	800196c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d146      	bne.n	800193e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b0:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <HAL_RCC_OscConfig+0x4fc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fb73 	bl	8000fa0 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff fb6f 	bl	8000fa0 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e067      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d108      	bne.n	80018f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	492d      	ldr	r1, [pc, #180]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a19      	ldr	r1, [r3, #32]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	430b      	orrs	r3, r1
 800190a:	4927      	ldr	r1, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x4fc>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff fb43 	bl	8000fa0 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff fb3f 	bl	8000fa0 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e037      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x46a>
 800193c:	e02f      	b.n	800199e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <HAL_RCC_OscConfig+0x4fc>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fb2c 	bl	8000fa0 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fb28 	bl	8000fa0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e020      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x498>
 800196a:	e018      	b.n	800199e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e013      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	429a      	cmp	r2, r3
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40007000 	.word	0x40007000
 80019b0:	42420060 	.word	0x42420060

080019b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0d0      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d910      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 0207 	bic.w	r2, r3, #7
 80019de:	4965      	ldr	r1, [pc, #404]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	494d      	ldr	r1, [pc, #308]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d040      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d115      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e07f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a72:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e073      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a82:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e06b      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a92:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f023 0203 	bic.w	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4936      	ldr	r1, [pc, #216]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff fa7c 	bl	8000fa0 <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7ff fa78 	bl	8000fa0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e053      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 020c 	and.w	r2, r3, #12
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1eb      	bne.n	8001aac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d210      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4922      	ldr	r1, [pc, #136]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490e      	ldr	r1, [pc, #56]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b42:	f000 f821 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b46:	4601      	mov	r1, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	5cd3      	ldrb	r3, [r2, r3]
 8001b56:	fa21 f303 	lsr.w	r3, r1, r3
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1cc>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1d0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f9da 	bl	8000f1c <HAL_InitTick>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40022000 	.word	0x40022000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	08003da0 	.word	0x08003da0
 8001b80:	20000004 	.word	0x20000004
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	b490      	push	{r4, r7}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b90:	1d3c      	adds	r4, r7, #4
 8001b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d002      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x46>
 8001bc6:	e02d      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bca:	623b      	str	r3, [r7, #32]
      break;
 8001bcc:	e02d      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	0c9b      	lsrs	r3, r3, #18
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bda:	4413      	add	r3, r2
 8001bdc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001be0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	0c5b      	lsrs	r3, r3, #17
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c06:	fb02 f203 	mul.w	r2, r2, r3
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	e004      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c18:	fb02 f303 	mul.w	r3, r2, r3
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	623b      	str	r3, [r7, #32]
      break;
 8001c22:	e002      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c26:	623b      	str	r3, [r7, #32]
      break;
 8001c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc90      	pop	{r4, r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	08003d8c 	.word	0x08003d8c
 8001c3c:	08003d9c 	.word	0x08003d9c
 8001c40:	40021000 	.word	0x40021000
 8001c44:	007a1200 	.word	0x007a1200
 8001c48:	003d0900 	.word	0x003d0900

08001c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c64:	f7ff fff2 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c68:	4601      	mov	r1, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4a03      	ldr	r2, [pc, #12]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08003db0 	.word	0x08003db0

08001c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c90:	4601      	mov	r1, r0
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	0adb      	lsrs	r3, r3, #11
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4a03      	ldr	r2, [pc, #12]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08003db0 	.word	0x08003db0

08001cb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <RCC_Delay+0x34>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <RCC_Delay+0x38>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0a5b      	lsrs	r3, r3, #9
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ccc:	bf00      	nop
  }
  while (Delay --);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	60fa      	str	r2, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f9      	bne.n	8001ccc <RCC_Delay+0x1c>
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	10624dd3 	.word	0x10624dd3

08001cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e01d      	b.n	8001d3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fef4 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3304      	adds	r3, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f000 fc68 	bl	8002600 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e01d      	b.n	8001d90 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d106      	bne.n	8001d6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f815 	bl	8001d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f000 fc3d 	bl	8002600 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	6839      	ldr	r1, [r7, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 f831 	bl	8002e26 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <HAL_TIM_PWM_Start+0x60>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d107      	bne.n	8001dde <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b06      	cmp	r3, #6
 8001dee:	d007      	beq.n	8001e00 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40012c00 	.word	0x40012c00

08001e10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e01d      	b.n	8001e5e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fe80 	bl	8000b3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f000 fbd6 	bl	8002600 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d122      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d11b      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f06f 0202 	mvn.w	r2, #2
 8001e92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe fd77 	bl	800099c <HAL_TIM_IC_CaptureCallback>
 8001eae:	e005      	b.n	8001ebc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fb8a 	bl	80025ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fb90 	bl	80025dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d122      	bne.n	8001f16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d11b      	bne.n	8001f16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0204 	mvn.w	r2, #4
 8001ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe fd4d 	bl	800099c <HAL_TIM_IC_CaptureCallback>
 8001f02:	e005      	b.n	8001f10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fb60 	bl	80025ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fb66 	bl	80025dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d122      	bne.n	8001f6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d11b      	bne.n	8001f6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f06f 0208 	mvn.w	r2, #8
 8001f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe fd23 	bl	800099c <HAL_TIM_IC_CaptureCallback>
 8001f56:	e005      	b.n	8001f64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fb36 	bl	80025ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fb3c 	bl	80025dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d122      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d11b      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0210 	mvn.w	r2, #16
 8001f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2208      	movs	r2, #8
 8001f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7fe fcf9 	bl	800099c <HAL_TIM_IC_CaptureCallback>
 8001faa:	e005      	b.n	8001fb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fb0c 	bl	80025ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fb12 	bl	80025dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10e      	bne.n	8001fea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f06f 0201 	mvn.w	r2, #1
 8001fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fae7 	bl	80025b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d10e      	bne.n	8002016 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	d107      	bne.n	8002016 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800200e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fff4 	bl	8002ffe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d10e      	bne.n	8002042 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	2b40      	cmp	r3, #64	; 0x40
 8002030:	d107      	bne.n	8002042 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800203a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fad6 	bl	80025ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b20      	cmp	r3, #32
 800204e:	d10e      	bne.n	800206e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b20      	cmp	r3, #32
 800205c:	d107      	bne.n	800206e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f06f 0220 	mvn.w	r2, #32
 8002066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 ffbf 	bl	8002fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_TIM_IC_ConfigChannel+0x1a>
 800208c:	2302      	movs	r3, #2
 800208e:	e08a      	b.n	80021a6 <HAL_TIM_IC_ConfigChannel+0x130>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d11b      	bne.n	80020de <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f000 fd13 	bl	8002ae0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 020c 	bic.w	r2, r2, #12
 80020c8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6999      	ldr	r1, [r3, #24]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	619a      	str	r2, [r3, #24]
 80020dc:	e05a      	b.n	8002194 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d11c      	bne.n	800211e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f000 fd7c 	bl	8002bf0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002106:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6999      	ldr	r1, [r3, #24]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	021a      	lsls	r2, r3, #8
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	619a      	str	r2, [r3, #24]
 800211c:	e03a      	b.n	8002194 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f000 fdc7 	bl	8002cc6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 020c 	bic.w	r2, r2, #12
 8002146:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69d9      	ldr	r1, [r3, #28]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	61da      	str	r2, [r3, #28]
 800215a:	e01b      	b.n	8002194 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f000 fde6 	bl	8002d3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800217e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69d9      	ldr	r1, [r3, #28]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	021a      	lsls	r2, r3, #8
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0b4      	b.n	8002334 <HAL_TIM_PWM_ConfigChannel+0x184>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	f200 809f 	bhi.w	8002320 <HAL_TIM_PWM_ConfigChannel+0x170>
 80021e2:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	0800221d 	.word	0x0800221d
 80021ec:	08002321 	.word	0x08002321
 80021f0:	08002321 	.word	0x08002321
 80021f4:	08002321 	.word	0x08002321
 80021f8:	0800225d 	.word	0x0800225d
 80021fc:	08002321 	.word	0x08002321
 8002200:	08002321 	.word	0x08002321
 8002204:	08002321 	.word	0x08002321
 8002208:	0800229f 	.word	0x0800229f
 800220c:	08002321 	.word	0x08002321
 8002210:	08002321 	.word	0x08002321
 8002214:	08002321 	.word	0x08002321
 8002218:	080022df 	.word	0x080022df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fa4e 	bl	80026c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0208 	orr.w	r2, r2, #8
 8002236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6999      	ldr	r1, [r3, #24]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	619a      	str	r2, [r3, #24]
      break;
 800225a:	e062      	b.n	8002322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fa94 	bl	8002790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6999      	ldr	r1, [r3, #24]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	021a      	lsls	r2, r3, #8
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	619a      	str	r2, [r3, #24]
      break;
 800229c:	e041      	b.n	8002322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fadd 	bl	8002864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0208 	orr.w	r2, r2, #8
 80022b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0204 	bic.w	r2, r2, #4
 80022c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69d9      	ldr	r1, [r3, #28]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	61da      	str	r2, [r3, #28]
      break;
 80022dc:	e021      	b.n	8002322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fb27 	bl	8002938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69d9      	ldr	r1, [r3, #28]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	021a      	lsls	r2, r3, #8
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	61da      	str	r2, [r3, #28]
      break;
 800231e:	e000      	b.n	8002322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002320:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_TIM_ConfigClockSource+0x18>
 8002350:	2302      	movs	r3, #2
 8002352:	e0a6      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x166>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800237a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d067      	beq.n	800245c <HAL_TIM_ConfigClockSource+0x120>
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d80b      	bhi.n	80023a8 <HAL_TIM_ConfigClockSource+0x6c>
 8002390:	2b10      	cmp	r3, #16
 8002392:	d073      	beq.n	800247c <HAL_TIM_ConfigClockSource+0x140>
 8002394:	2b10      	cmp	r3, #16
 8002396:	d802      	bhi.n	800239e <HAL_TIM_ConfigClockSource+0x62>
 8002398:	2b00      	cmp	r3, #0
 800239a:	d06f      	beq.n	800247c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800239c:	e078      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d06c      	beq.n	800247c <HAL_TIM_ConfigClockSource+0x140>
 80023a2:	2b30      	cmp	r3, #48	; 0x30
 80023a4:	d06a      	beq.n	800247c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80023a6:	e073      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023a8:	2b70      	cmp	r3, #112	; 0x70
 80023aa:	d00d      	beq.n	80023c8 <HAL_TIM_ConfigClockSource+0x8c>
 80023ac:	2b70      	cmp	r3, #112	; 0x70
 80023ae:	d804      	bhi.n	80023ba <HAL_TIM_ConfigClockSource+0x7e>
 80023b0:	2b50      	cmp	r3, #80	; 0x50
 80023b2:	d033      	beq.n	800241c <HAL_TIM_ConfigClockSource+0xe0>
 80023b4:	2b60      	cmp	r3, #96	; 0x60
 80023b6:	d041      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80023b8:	e06a      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023be:	d066      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x152>
 80023c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c4:	d017      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80023c6:	e063      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f000 fd06 	bl	8002de8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	609a      	str	r2, [r3, #8]
      break;
 80023f4:	e04c      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f000 fcef 	bl	8002de8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002418:	609a      	str	r2, [r3, #8]
      break;
 800241a:	e039      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	461a      	mov	r2, r3
 800242a:	f000 fbb3 	bl	8002b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2150      	movs	r1, #80	; 0x50
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fcbd 	bl	8002db4 <TIM_ITRx_SetConfig>
      break;
 800243a:	e029      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	461a      	mov	r2, r3
 800244a:	f000 fc0d 	bl	8002c68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2160      	movs	r1, #96	; 0x60
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fcad 	bl	8002db4 <TIM_ITRx_SetConfig>
      break;
 800245a:	e019      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	461a      	mov	r2, r3
 800246a:	f000 fb93 	bl	8002b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2140      	movs	r1, #64	; 0x40
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fc9d 	bl	8002db4 <TIM_ITRx_SetConfig>
      break;
 800247a:	e009      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f000 fc94 	bl	8002db4 <TIM_ITRx_SetConfig>
      break;
 800248c:	e000      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800248e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80024be:	2302      	movs	r3, #2
 80024c0:	e031      	b.n	8002526 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fa7d 	bl	80029d4 <TIM_SlaveTimer_SetConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e018      	b.n	8002526 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002502:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002512:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b0c      	cmp	r3, #12
 8002542:	d831      	bhi.n	80025a8 <HAL_TIM_ReadCapturedValue+0x78>
 8002544:	a201      	add	r2, pc, #4	; (adr r2, 800254c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	08002581 	.word	0x08002581
 8002550:	080025a9 	.word	0x080025a9
 8002554:	080025a9 	.word	0x080025a9
 8002558:	080025a9 	.word	0x080025a9
 800255c:	0800258b 	.word	0x0800258b
 8002560:	080025a9 	.word	0x080025a9
 8002564:	080025a9 	.word	0x080025a9
 8002568:	080025a9 	.word	0x080025a9
 800256c:	08002595 	.word	0x08002595
 8002570:	080025a9 	.word	0x080025a9
 8002574:	080025a9 	.word	0x080025a9
 8002578:	080025a9 	.word	0x080025a9
 800257c:	0800259f 	.word	0x0800259f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002586:	60fb      	str	r3, [r7, #12]

      break;
 8002588:	e00f      	b.n	80025aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	60fb      	str	r3, [r7, #12]

      break;
 8002592:	e00a      	b.n	80025aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	60fb      	str	r3, [r7, #12]

      break;
 800259c:	e005      	b.n	80025aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	60fb      	str	r3, [r7, #12]

      break;
 80025a6:	e000      	b.n	80025aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80025a8:	bf00      	nop
  }

  return tmpreg;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop

080025b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a29      	ldr	r2, [pc, #164]	; (80026b8 <TIM_Base_SetConfig+0xb8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00b      	beq.n	8002630 <TIM_Base_SetConfig+0x30>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261e:	d007      	beq.n	8002630 <TIM_Base_SetConfig+0x30>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a26      	ldr	r2, [pc, #152]	; (80026bc <TIM_Base_SetConfig+0xbc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0x30>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <TIM_Base_SetConfig+0xc0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <TIM_Base_SetConfig+0xb8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00b      	beq.n	8002662 <TIM_Base_SetConfig+0x62>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d007      	beq.n	8002662 <TIM_Base_SetConfig+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a19      	ldr	r2, [pc, #100]	; (80026bc <TIM_Base_SetConfig+0xbc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <TIM_Base_SetConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <TIM_Base_SetConfig+0xc0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d108      	bne.n	8002674 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <TIM_Base_SetConfig+0xb8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d103      	bne.n	80026a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	615a      	str	r2, [r3, #20]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800

080026c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f023 0201 	bic.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f023 0302 	bic.w	r3, r3, #2
 800270c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a1c      	ldr	r2, [pc, #112]	; (800278c <TIM_OC1_SetConfig+0xc8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d10c      	bne.n	800273a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f023 0308 	bic.w	r3, r3, #8
 8002726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 0304 	bic.w	r3, r3, #4
 8002738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a13      	ldr	r2, [pc, #76]	; (800278c <TIM_OC1_SetConfig+0xc8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d111      	bne.n	8002766 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	621a      	str	r2, [r3, #32]
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40012c00 	.word	0x40012c00

08002790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0210 	bic.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0320 	bic.w	r3, r3, #32
 80027da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <TIM_OC2_SetConfig+0xd0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10d      	bne.n	800280c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a14      	ldr	r2, [pc, #80]	; (8002860 <TIM_OC2_SetConfig+0xd0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d113      	bne.n	800283c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800281a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40012c00 	.word	0x40012c00

08002864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <TIM_OC3_SetConfig+0xd0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10d      	bne.n	80028de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <TIM_OC3_SetConfig+0xd0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d113      	bne.n	800290e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	621a      	str	r2, [r3, #32]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40012c00 	.word	0x40012c00

08002938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	031b      	lsls	r3, r3, #12
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <TIM_OC4_SetConfig+0x98>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d109      	bne.n	80029ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800299e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	019b      	lsls	r3, r3, #6
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	621a      	str	r2, [r3, #32]
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40012c00 	.word	0x40012c00

080029d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0307 	bic.w	r3, r3, #7
 80029fe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b30      	cmp	r3, #48	; 0x30
 8002a18:	d05c      	beq.n	8002ad4 <TIM_SlaveTimer_SetConfig+0x100>
 8002a1a:	2b30      	cmp	r3, #48	; 0x30
 8002a1c:	d806      	bhi.n	8002a2c <TIM_SlaveTimer_SetConfig+0x58>
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d058      	beq.n	8002ad4 <TIM_SlaveTimer_SetConfig+0x100>
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d056      	beq.n	8002ad4 <TIM_SlaveTimer_SetConfig+0x100>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d054      	beq.n	8002ad4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8002a2a:	e054      	b.n	8002ad6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8002a2c:	2b50      	cmp	r3, #80	; 0x50
 8002a2e:	d03d      	beq.n	8002aac <TIM_SlaveTimer_SetConfig+0xd8>
 8002a30:	2b50      	cmp	r3, #80	; 0x50
 8002a32:	d802      	bhi.n	8002a3a <TIM_SlaveTimer_SetConfig+0x66>
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d010      	beq.n	8002a5a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8002a38:	e04d      	b.n	8002ad6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8002a3a:	2b60      	cmp	r3, #96	; 0x60
 8002a3c:	d040      	beq.n	8002ac0 <TIM_SlaveTimer_SetConfig+0xec>
 8002a3e:	2b70      	cmp	r3, #112	; 0x70
 8002a40:	d000      	beq.n	8002a44 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8002a42:	e048      	b.n	8002ad6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68d9      	ldr	r1, [r3, #12]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f000 f9c8 	bl	8002de8 <TIM_ETR_SetConfig>
      break;
 8002a58:	e03d      	b.n	8002ad6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d101      	bne.n	8002a66 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e038      	b.n	8002ad8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6a1a      	ldr	r2, [r3, #32]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	621a      	str	r2, [r3, #32]
      break;
 8002aaa:	e014      	b.n	8002ad6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f000 f86b 	bl	8002b94 <TIM_TI1_ConfigInputStage>
      break;
 8002abe:	e00a      	b.n	8002ad6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f000 f8cb 	bl	8002c68 <TIM_TI2_ConfigInputStage>
      break;
 8002ad2:	e000      	b.n	8002ad6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8002ad4:	bf00      	nop
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f023 0201 	bic.w	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <TIM_TI1_SetConfig+0xa8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <TIM_TI1_SetConfig+0x46>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d007      	beq.n	8002b26 <TIM_TI1_SetConfig+0x46>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <TIM_TI1_SetConfig+0xac>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d003      	beq.n	8002b26 <TIM_TI1_SetConfig+0x46>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <TIM_TI1_SetConfig+0xb0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <TIM_TI1_SetConfig+0x4a>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <TIM_TI1_SetConfig+0x4c>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e003      	b.n	8002b4a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f023 030a 	bic.w	r3, r3, #10
 8002b64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f003 030a 	and.w	r3, r3, #10
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800

08002b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0201 	bic.w	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f023 030a 	bic.w	r3, r3, #10
 8002bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f023 0210 	bic.w	r2, r3, #16
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	031b      	lsls	r3, r3, #12
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	621a      	str	r2, [r3, #32]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f023 0210 	bic.w	r2, r3, #16
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	031b      	lsls	r3, r3, #12
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	621a      	str	r2, [r3, #32]
}
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b087      	sub	sp, #28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 0303 	bic.w	r3, r3, #3
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	031b      	lsls	r3, r3, #12
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	031b      	lsls	r3, r3, #12
 8002d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	621a      	str	r2, [r3, #32]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f043 0307 	orr.w	r3, r3, #7
 8002dd6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	609a      	str	r2, [r3, #8]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	021a      	lsls	r2, r3, #8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b087      	sub	sp, #28
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2201      	movs	r2, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1a      	ldr	r2, [r3, #32]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	401a      	ands	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a1a      	ldr	r2, [r3, #32]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	621a      	str	r2, [r3, #32]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f8c5 	bl	8003010 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b06      	cmp	r3, #6
 8002ea6:	d007      	beq.n	8002eb8 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e032      	b.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f12:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e03d      	b.n	8002fe2 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2204      	movs	r2, #4
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	43db      	mvns	r3, r3
 8003032:	401a      	ands	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e03f      	b.n	80030ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fe18 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2224      	movs	r2, #36	; 0x24
 8003088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800309a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f90b 	bl	80032b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b088      	sub	sp, #32
 80030f6:	af02      	add	r7, sp, #8
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b20      	cmp	r3, #32
 8003110:	f040 8083 	bne.w	800321a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_UART_Transmit+0x2e>
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e07b      	b.n	800321c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_UART_Transmit+0x40>
 800312e:	2302      	movs	r3, #2
 8003130:	e074      	b.n	800321c <HAL_UART_Transmit+0x12a>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2221      	movs	r2, #33	; 0x21
 8003144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003148:	f7fd ff2a 	bl	8000fa0 <HAL_GetTick>
 800314c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800315a:	e042      	b.n	80031e2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003172:	d122      	bne.n	80031ba <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2200      	movs	r2, #0
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f850 	bl	8003224 <UART_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e046      	b.n	800321c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3302      	adds	r3, #2
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	e017      	b.n	80031e2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3301      	adds	r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	e013      	b.n	80031e2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f82d 	bl	8003224 <UART_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e023      	b.n	800321c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	60ba      	str	r2, [r7, #8]
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1b7      	bne.n	800315c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f814 	bl	8003224 <UART_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e00a      	b.n	800321c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003234:	e02c      	b.n	8003290 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d028      	beq.n	8003290 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <UART_WaitOnFlagUntilTimeout+0x30>
 8003244:	f7fd feac 	bl	8000fa0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	429a      	cmp	r2, r3
 8003252:	d21d      	bcs.n	8003290 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003262:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e00f      	b.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4013      	ands	r3, r2
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	429a      	cmp	r2, r3
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d0c3      	beq.n	8003236 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032f2:	f023 030c 	bic.w	r3, r3, #12
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	68f9      	ldr	r1, [r7, #12]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a52      	ldr	r2, [pc, #328]	; (8003464 <UART_SetConfig+0x1ac>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d14e      	bne.n	80033be <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003320:	f7fe fcb2 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 8003324:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	4a4a      	ldr	r2, [pc, #296]	; (8003468 <UART_SetConfig+0x1b0>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	0119      	lsls	r1, r3, #4
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009a      	lsls	r2, r3, #2
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	fbb2 f2f3 	udiv	r2, r2, r3
 800335c:	4b42      	ldr	r3, [pc, #264]	; (8003468 <UART_SetConfig+0x1b0>)
 800335e:	fba3 0302 	umull	r0, r3, r3, r2
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2064      	movs	r0, #100	; 0x64
 8003366:	fb00 f303 	mul.w	r3, r0, r3
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	3332      	adds	r3, #50	; 0x32
 8003370:	4a3d      	ldr	r2, [pc, #244]	; (8003468 <UART_SetConfig+0x1b0>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337c:	4419      	add	r1, r3
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009a      	lsls	r2, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	fbb2 f2f3 	udiv	r2, r2, r3
 8003394:	4b34      	ldr	r3, [pc, #208]	; (8003468 <UART_SetConfig+0x1b0>)
 8003396:	fba3 0302 	umull	r0, r3, r3, r2
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2064      	movs	r0, #100	; 0x64
 800339e:	fb00 f303 	mul.w	r3, r0, r3
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	3332      	adds	r3, #50	; 0x32
 80033a8:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <UART_SetConfig+0x1b0>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	440a      	add	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80033bc:	e04d      	b.n	800345a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80033be:	f7fe fc4f 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 80033c2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009a      	lsls	r2, r3, #2
 80033ce:	441a      	add	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	4a23      	ldr	r2, [pc, #140]	; (8003468 <UART_SetConfig+0x1b0>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	0119      	lsls	r1, r3, #4
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009a      	lsls	r2, r3, #2
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <UART_SetConfig+0x1b0>)
 80033fc:	fba3 0302 	umull	r0, r3, r3, r2
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	2064      	movs	r0, #100	; 0x64
 8003404:	fb00 f303 	mul.w	r3, r0, r3
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	3332      	adds	r3, #50	; 0x32
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <UART_SetConfig+0x1b0>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341a:	4419      	add	r1, r3
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	009a      	lsls	r2, r3, #2
 8003426:	441a      	add	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <UART_SetConfig+0x1b0>)
 8003434:	fba3 0302 	umull	r0, r3, r3, r2
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	2064      	movs	r0, #100	; 0x64
 800343c:	fb00 f303 	mul.w	r3, r0, r3
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	3332      	adds	r3, #50	; 0x32
 8003446:	4a08      	ldr	r2, [pc, #32]	; (8003468 <UART_SetConfig+0x1b0>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	440a      	add	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40013800 	.word	0x40013800
 8003468:	51eb851f 	.word	0x51eb851f

0800346c <__errno>:
 800346c:	4b01      	ldr	r3, [pc, #4]	; (8003474 <__errno+0x8>)
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000010 	.word	0x20000010

08003478 <__libc_init_array>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	2500      	movs	r5, #0
 800347c:	4e0c      	ldr	r6, [pc, #48]	; (80034b0 <__libc_init_array+0x38>)
 800347e:	4c0d      	ldr	r4, [pc, #52]	; (80034b4 <__libc_init_array+0x3c>)
 8003480:	1ba4      	subs	r4, r4, r6
 8003482:	10a4      	asrs	r4, r4, #2
 8003484:	42a5      	cmp	r5, r4
 8003486:	d109      	bne.n	800349c <__libc_init_array+0x24>
 8003488:	f000 fc34 	bl	8003cf4 <_init>
 800348c:	2500      	movs	r5, #0
 800348e:	4e0a      	ldr	r6, [pc, #40]	; (80034b8 <__libc_init_array+0x40>)
 8003490:	4c0a      	ldr	r4, [pc, #40]	; (80034bc <__libc_init_array+0x44>)
 8003492:	1ba4      	subs	r4, r4, r6
 8003494:	10a4      	asrs	r4, r4, #2
 8003496:	42a5      	cmp	r5, r4
 8003498:	d105      	bne.n	80034a6 <__libc_init_array+0x2e>
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a0:	4798      	blx	r3
 80034a2:	3501      	adds	r5, #1
 80034a4:	e7ee      	b.n	8003484 <__libc_init_array+0xc>
 80034a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034aa:	4798      	blx	r3
 80034ac:	3501      	adds	r5, #1
 80034ae:	e7f2      	b.n	8003496 <__libc_init_array+0x1e>
 80034b0:	08003dec 	.word	0x08003dec
 80034b4:	08003dec 	.word	0x08003dec
 80034b8:	08003dec 	.word	0x08003dec
 80034bc:	08003df0 	.word	0x08003df0

080034c0 <memset>:
 80034c0:	4603      	mov	r3, r0
 80034c2:	4402      	add	r2, r0
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d100      	bne.n	80034ca <memset+0xa>
 80034c8:	4770      	bx	lr
 80034ca:	f803 1b01 	strb.w	r1, [r3], #1
 80034ce:	e7f9      	b.n	80034c4 <memset+0x4>

080034d0 <siprintf>:
 80034d0:	b40e      	push	{r1, r2, r3}
 80034d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034d6:	b500      	push	{lr}
 80034d8:	b09c      	sub	sp, #112	; 0x70
 80034da:	ab1d      	add	r3, sp, #116	; 0x74
 80034dc:	9002      	str	r0, [sp, #8]
 80034de:	9006      	str	r0, [sp, #24]
 80034e0:	9107      	str	r1, [sp, #28]
 80034e2:	9104      	str	r1, [sp, #16]
 80034e4:	4808      	ldr	r0, [pc, #32]	; (8003508 <siprintf+0x38>)
 80034e6:	4909      	ldr	r1, [pc, #36]	; (800350c <siprintf+0x3c>)
 80034e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80034ec:	9105      	str	r1, [sp, #20]
 80034ee:	6800      	ldr	r0, [r0, #0]
 80034f0:	a902      	add	r1, sp, #8
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	f000 f866 	bl	80035c4 <_svfiprintf_r>
 80034f8:	2200      	movs	r2, #0
 80034fa:	9b02      	ldr	r3, [sp, #8]
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	b01c      	add	sp, #112	; 0x70
 8003500:	f85d eb04 	ldr.w	lr, [sp], #4
 8003504:	b003      	add	sp, #12
 8003506:	4770      	bx	lr
 8003508:	20000010 	.word	0x20000010
 800350c:	ffff0208 	.word	0xffff0208

08003510 <__ssputs_r>:
 8003510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003514:	688e      	ldr	r6, [r1, #8]
 8003516:	4682      	mov	sl, r0
 8003518:	429e      	cmp	r6, r3
 800351a:	460c      	mov	r4, r1
 800351c:	4690      	mov	r8, r2
 800351e:	4699      	mov	r9, r3
 8003520:	d837      	bhi.n	8003592 <__ssputs_r+0x82>
 8003522:	898a      	ldrh	r2, [r1, #12]
 8003524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003528:	d031      	beq.n	800358e <__ssputs_r+0x7e>
 800352a:	2302      	movs	r3, #2
 800352c:	6825      	ldr	r5, [r4, #0]
 800352e:	6909      	ldr	r1, [r1, #16]
 8003530:	1a6f      	subs	r7, r5, r1
 8003532:	6965      	ldr	r5, [r4, #20]
 8003534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003538:	fb95 f5f3 	sdiv	r5, r5, r3
 800353c:	f109 0301 	add.w	r3, r9, #1
 8003540:	443b      	add	r3, r7
 8003542:	429d      	cmp	r5, r3
 8003544:	bf38      	it	cc
 8003546:	461d      	movcc	r5, r3
 8003548:	0553      	lsls	r3, r2, #21
 800354a:	d530      	bpl.n	80035ae <__ssputs_r+0x9e>
 800354c:	4629      	mov	r1, r5
 800354e:	f000 fb37 	bl	8003bc0 <_malloc_r>
 8003552:	4606      	mov	r6, r0
 8003554:	b950      	cbnz	r0, 800356c <__ssputs_r+0x5c>
 8003556:	230c      	movs	r3, #12
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f8ca 3000 	str.w	r3, [sl]
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003566:	81a3      	strh	r3, [r4, #12]
 8003568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356c:	463a      	mov	r2, r7
 800356e:	6921      	ldr	r1, [r4, #16]
 8003570:	f000 fab6 	bl	8003ae0 <memcpy>
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800357a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357e:	81a3      	strh	r3, [r4, #12]
 8003580:	6126      	str	r6, [r4, #16]
 8003582:	443e      	add	r6, r7
 8003584:	6026      	str	r6, [r4, #0]
 8003586:	464e      	mov	r6, r9
 8003588:	6165      	str	r5, [r4, #20]
 800358a:	1bed      	subs	r5, r5, r7
 800358c:	60a5      	str	r5, [r4, #8]
 800358e:	454e      	cmp	r6, r9
 8003590:	d900      	bls.n	8003594 <__ssputs_r+0x84>
 8003592:	464e      	mov	r6, r9
 8003594:	4632      	mov	r2, r6
 8003596:	4641      	mov	r1, r8
 8003598:	6820      	ldr	r0, [r4, #0]
 800359a:	f000 faac 	bl	8003af6 <memmove>
 800359e:	68a3      	ldr	r3, [r4, #8]
 80035a0:	2000      	movs	r0, #0
 80035a2:	1b9b      	subs	r3, r3, r6
 80035a4:	60a3      	str	r3, [r4, #8]
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	441e      	add	r6, r3
 80035aa:	6026      	str	r6, [r4, #0]
 80035ac:	e7dc      	b.n	8003568 <__ssputs_r+0x58>
 80035ae:	462a      	mov	r2, r5
 80035b0:	f000 fb60 	bl	8003c74 <_realloc_r>
 80035b4:	4606      	mov	r6, r0
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d1e2      	bne.n	8003580 <__ssputs_r+0x70>
 80035ba:	6921      	ldr	r1, [r4, #16]
 80035bc:	4650      	mov	r0, sl
 80035be:	f000 fab3 	bl	8003b28 <_free_r>
 80035c2:	e7c8      	b.n	8003556 <__ssputs_r+0x46>

080035c4 <_svfiprintf_r>:
 80035c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c8:	461d      	mov	r5, r3
 80035ca:	898b      	ldrh	r3, [r1, #12]
 80035cc:	b09d      	sub	sp, #116	; 0x74
 80035ce:	061f      	lsls	r7, r3, #24
 80035d0:	4680      	mov	r8, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	4616      	mov	r6, r2
 80035d6:	d50f      	bpl.n	80035f8 <_svfiprintf_r+0x34>
 80035d8:	690b      	ldr	r3, [r1, #16]
 80035da:	b96b      	cbnz	r3, 80035f8 <_svfiprintf_r+0x34>
 80035dc:	2140      	movs	r1, #64	; 0x40
 80035de:	f000 faef 	bl	8003bc0 <_malloc_r>
 80035e2:	6020      	str	r0, [r4, #0]
 80035e4:	6120      	str	r0, [r4, #16]
 80035e6:	b928      	cbnz	r0, 80035f4 <_svfiprintf_r+0x30>
 80035e8:	230c      	movs	r3, #12
 80035ea:	f8c8 3000 	str.w	r3, [r8]
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295
 80035f2:	e0c8      	b.n	8003786 <_svfiprintf_r+0x1c2>
 80035f4:	2340      	movs	r3, #64	; 0x40
 80035f6:	6163      	str	r3, [r4, #20]
 80035f8:	2300      	movs	r3, #0
 80035fa:	9309      	str	r3, [sp, #36]	; 0x24
 80035fc:	2320      	movs	r3, #32
 80035fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003602:	2330      	movs	r3, #48	; 0x30
 8003604:	f04f 0b01 	mov.w	fp, #1
 8003608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800360c:	9503      	str	r5, [sp, #12]
 800360e:	4637      	mov	r7, r6
 8003610:	463d      	mov	r5, r7
 8003612:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003616:	b10b      	cbz	r3, 800361c <_svfiprintf_r+0x58>
 8003618:	2b25      	cmp	r3, #37	; 0x25
 800361a:	d13e      	bne.n	800369a <_svfiprintf_r+0xd6>
 800361c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003620:	d00b      	beq.n	800363a <_svfiprintf_r+0x76>
 8003622:	4653      	mov	r3, sl
 8003624:	4632      	mov	r2, r6
 8003626:	4621      	mov	r1, r4
 8003628:	4640      	mov	r0, r8
 800362a:	f7ff ff71 	bl	8003510 <__ssputs_r>
 800362e:	3001      	adds	r0, #1
 8003630:	f000 80a4 	beq.w	800377c <_svfiprintf_r+0x1b8>
 8003634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003636:	4453      	add	r3, sl
 8003638:	9309      	str	r3, [sp, #36]	; 0x24
 800363a:	783b      	ldrb	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 809d 	beq.w	800377c <_svfiprintf_r+0x1b8>
 8003642:	2300      	movs	r3, #0
 8003644:	f04f 32ff 	mov.w	r2, #4294967295
 8003648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800364c:	9304      	str	r3, [sp, #16]
 800364e:	9307      	str	r3, [sp, #28]
 8003650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003654:	931a      	str	r3, [sp, #104]	; 0x68
 8003656:	462f      	mov	r7, r5
 8003658:	2205      	movs	r2, #5
 800365a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800365e:	4850      	ldr	r0, [pc, #320]	; (80037a0 <_svfiprintf_r+0x1dc>)
 8003660:	f000 fa30 	bl	8003ac4 <memchr>
 8003664:	9b04      	ldr	r3, [sp, #16]
 8003666:	b9d0      	cbnz	r0, 800369e <_svfiprintf_r+0xda>
 8003668:	06d9      	lsls	r1, r3, #27
 800366a:	bf44      	itt	mi
 800366c:	2220      	movmi	r2, #32
 800366e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003672:	071a      	lsls	r2, r3, #28
 8003674:	bf44      	itt	mi
 8003676:	222b      	movmi	r2, #43	; 0x2b
 8003678:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800367c:	782a      	ldrb	r2, [r5, #0]
 800367e:	2a2a      	cmp	r2, #42	; 0x2a
 8003680:	d015      	beq.n	80036ae <_svfiprintf_r+0xea>
 8003682:	462f      	mov	r7, r5
 8003684:	2000      	movs	r0, #0
 8003686:	250a      	movs	r5, #10
 8003688:	9a07      	ldr	r2, [sp, #28]
 800368a:	4639      	mov	r1, r7
 800368c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003690:	3b30      	subs	r3, #48	; 0x30
 8003692:	2b09      	cmp	r3, #9
 8003694:	d94d      	bls.n	8003732 <_svfiprintf_r+0x16e>
 8003696:	b1b8      	cbz	r0, 80036c8 <_svfiprintf_r+0x104>
 8003698:	e00f      	b.n	80036ba <_svfiprintf_r+0xf6>
 800369a:	462f      	mov	r7, r5
 800369c:	e7b8      	b.n	8003610 <_svfiprintf_r+0x4c>
 800369e:	4a40      	ldr	r2, [pc, #256]	; (80037a0 <_svfiprintf_r+0x1dc>)
 80036a0:	463d      	mov	r5, r7
 80036a2:	1a80      	subs	r0, r0, r2
 80036a4:	fa0b f000 	lsl.w	r0, fp, r0
 80036a8:	4318      	orrs	r0, r3
 80036aa:	9004      	str	r0, [sp, #16]
 80036ac:	e7d3      	b.n	8003656 <_svfiprintf_r+0x92>
 80036ae:	9a03      	ldr	r2, [sp, #12]
 80036b0:	1d11      	adds	r1, r2, #4
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	9103      	str	r1, [sp, #12]
 80036b6:	2a00      	cmp	r2, #0
 80036b8:	db01      	blt.n	80036be <_svfiprintf_r+0xfa>
 80036ba:	9207      	str	r2, [sp, #28]
 80036bc:	e004      	b.n	80036c8 <_svfiprintf_r+0x104>
 80036be:	4252      	negs	r2, r2
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	9207      	str	r2, [sp, #28]
 80036c6:	9304      	str	r3, [sp, #16]
 80036c8:	783b      	ldrb	r3, [r7, #0]
 80036ca:	2b2e      	cmp	r3, #46	; 0x2e
 80036cc:	d10c      	bne.n	80036e8 <_svfiprintf_r+0x124>
 80036ce:	787b      	ldrb	r3, [r7, #1]
 80036d0:	2b2a      	cmp	r3, #42	; 0x2a
 80036d2:	d133      	bne.n	800373c <_svfiprintf_r+0x178>
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	3702      	adds	r7, #2
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	9203      	str	r2, [sp, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bfb8      	it	lt
 80036e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80036e6:	9305      	str	r3, [sp, #20]
 80036e8:	4d2e      	ldr	r5, [pc, #184]	; (80037a4 <_svfiprintf_r+0x1e0>)
 80036ea:	2203      	movs	r2, #3
 80036ec:	7839      	ldrb	r1, [r7, #0]
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 f9e8 	bl	8003ac4 <memchr>
 80036f4:	b138      	cbz	r0, 8003706 <_svfiprintf_r+0x142>
 80036f6:	2340      	movs	r3, #64	; 0x40
 80036f8:	1b40      	subs	r0, r0, r5
 80036fa:	fa03 f000 	lsl.w	r0, r3, r0
 80036fe:	9b04      	ldr	r3, [sp, #16]
 8003700:	3701      	adds	r7, #1
 8003702:	4303      	orrs	r3, r0
 8003704:	9304      	str	r3, [sp, #16]
 8003706:	7839      	ldrb	r1, [r7, #0]
 8003708:	2206      	movs	r2, #6
 800370a:	4827      	ldr	r0, [pc, #156]	; (80037a8 <_svfiprintf_r+0x1e4>)
 800370c:	1c7e      	adds	r6, r7, #1
 800370e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003712:	f000 f9d7 	bl	8003ac4 <memchr>
 8003716:	2800      	cmp	r0, #0
 8003718:	d038      	beq.n	800378c <_svfiprintf_r+0x1c8>
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <_svfiprintf_r+0x1e8>)
 800371c:	bb13      	cbnz	r3, 8003764 <_svfiprintf_r+0x1a0>
 800371e:	9b03      	ldr	r3, [sp, #12]
 8003720:	3307      	adds	r3, #7
 8003722:	f023 0307 	bic.w	r3, r3, #7
 8003726:	3308      	adds	r3, #8
 8003728:	9303      	str	r3, [sp, #12]
 800372a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800372c:	444b      	add	r3, r9
 800372e:	9309      	str	r3, [sp, #36]	; 0x24
 8003730:	e76d      	b.n	800360e <_svfiprintf_r+0x4a>
 8003732:	fb05 3202 	mla	r2, r5, r2, r3
 8003736:	2001      	movs	r0, #1
 8003738:	460f      	mov	r7, r1
 800373a:	e7a6      	b.n	800368a <_svfiprintf_r+0xc6>
 800373c:	2300      	movs	r3, #0
 800373e:	250a      	movs	r5, #10
 8003740:	4619      	mov	r1, r3
 8003742:	3701      	adds	r7, #1
 8003744:	9305      	str	r3, [sp, #20]
 8003746:	4638      	mov	r0, r7
 8003748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800374c:	3a30      	subs	r2, #48	; 0x30
 800374e:	2a09      	cmp	r2, #9
 8003750:	d903      	bls.n	800375a <_svfiprintf_r+0x196>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0c8      	beq.n	80036e8 <_svfiprintf_r+0x124>
 8003756:	9105      	str	r1, [sp, #20]
 8003758:	e7c6      	b.n	80036e8 <_svfiprintf_r+0x124>
 800375a:	fb05 2101 	mla	r1, r5, r1, r2
 800375e:	2301      	movs	r3, #1
 8003760:	4607      	mov	r7, r0
 8003762:	e7f0      	b.n	8003746 <_svfiprintf_r+0x182>
 8003764:	ab03      	add	r3, sp, #12
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4622      	mov	r2, r4
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <_svfiprintf_r+0x1ec>)
 800376c:	a904      	add	r1, sp, #16
 800376e:	4640      	mov	r0, r8
 8003770:	f3af 8000 	nop.w
 8003774:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003778:	4681      	mov	r9, r0
 800377a:	d1d6      	bne.n	800372a <_svfiprintf_r+0x166>
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	065b      	lsls	r3, r3, #25
 8003780:	f53f af35 	bmi.w	80035ee <_svfiprintf_r+0x2a>
 8003784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003786:	b01d      	add	sp, #116	; 0x74
 8003788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800378c:	ab03      	add	r3, sp, #12
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	4622      	mov	r2, r4
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <_svfiprintf_r+0x1ec>)
 8003794:	a904      	add	r1, sp, #16
 8003796:	4640      	mov	r0, r8
 8003798:	f000 f882 	bl	80038a0 <_printf_i>
 800379c:	e7ea      	b.n	8003774 <_svfiprintf_r+0x1b0>
 800379e:	bf00      	nop
 80037a0:	08003db8 	.word	0x08003db8
 80037a4:	08003dbe 	.word	0x08003dbe
 80037a8:	08003dc2 	.word	0x08003dc2
 80037ac:	00000000 	.word	0x00000000
 80037b0:	08003511 	.word	0x08003511

080037b4 <_printf_common>:
 80037b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b8:	4691      	mov	r9, r2
 80037ba:	461f      	mov	r7, r3
 80037bc:	688a      	ldr	r2, [r1, #8]
 80037be:	690b      	ldr	r3, [r1, #16]
 80037c0:	4606      	mov	r6, r0
 80037c2:	4293      	cmp	r3, r2
 80037c4:	bfb8      	it	lt
 80037c6:	4613      	movlt	r3, r2
 80037c8:	f8c9 3000 	str.w	r3, [r9]
 80037cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037d0:	460c      	mov	r4, r1
 80037d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037d6:	b112      	cbz	r2, 80037de <_printf_common+0x2a>
 80037d8:	3301      	adds	r3, #1
 80037da:	f8c9 3000 	str.w	r3, [r9]
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	0699      	lsls	r1, r3, #26
 80037e2:	bf42      	ittt	mi
 80037e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037e8:	3302      	addmi	r3, #2
 80037ea:	f8c9 3000 	strmi.w	r3, [r9]
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	f015 0506 	ands.w	r5, r5, #6
 80037f4:	d107      	bne.n	8003806 <_printf_common+0x52>
 80037f6:	f104 0a19 	add.w	sl, r4, #25
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	f8d9 2000 	ldr.w	r2, [r9]
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	42ab      	cmp	r3, r5
 8003804:	dc29      	bgt.n	800385a <_printf_common+0xa6>
 8003806:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800380a:	6822      	ldr	r2, [r4, #0]
 800380c:	3300      	adds	r3, #0
 800380e:	bf18      	it	ne
 8003810:	2301      	movne	r3, #1
 8003812:	0692      	lsls	r2, r2, #26
 8003814:	d42e      	bmi.n	8003874 <_printf_common+0xc0>
 8003816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800381a:	4639      	mov	r1, r7
 800381c:	4630      	mov	r0, r6
 800381e:	47c0      	blx	r8
 8003820:	3001      	adds	r0, #1
 8003822:	d021      	beq.n	8003868 <_printf_common+0xb4>
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	68e5      	ldr	r5, [r4, #12]
 8003828:	f003 0306 	and.w	r3, r3, #6
 800382c:	2b04      	cmp	r3, #4
 800382e:	bf18      	it	ne
 8003830:	2500      	movne	r5, #0
 8003832:	f8d9 2000 	ldr.w	r2, [r9]
 8003836:	f04f 0900 	mov.w	r9, #0
 800383a:	bf08      	it	eq
 800383c:	1aad      	subeq	r5, r5, r2
 800383e:	68a3      	ldr	r3, [r4, #8]
 8003840:	6922      	ldr	r2, [r4, #16]
 8003842:	bf08      	it	eq
 8003844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003848:	4293      	cmp	r3, r2
 800384a:	bfc4      	itt	gt
 800384c:	1a9b      	subgt	r3, r3, r2
 800384e:	18ed      	addgt	r5, r5, r3
 8003850:	341a      	adds	r4, #26
 8003852:	454d      	cmp	r5, r9
 8003854:	d11a      	bne.n	800388c <_printf_common+0xd8>
 8003856:	2000      	movs	r0, #0
 8003858:	e008      	b.n	800386c <_printf_common+0xb8>
 800385a:	2301      	movs	r3, #1
 800385c:	4652      	mov	r2, sl
 800385e:	4639      	mov	r1, r7
 8003860:	4630      	mov	r0, r6
 8003862:	47c0      	blx	r8
 8003864:	3001      	adds	r0, #1
 8003866:	d103      	bne.n	8003870 <_printf_common+0xbc>
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003870:	3501      	adds	r5, #1
 8003872:	e7c2      	b.n	80037fa <_printf_common+0x46>
 8003874:	2030      	movs	r0, #48	; 0x30
 8003876:	18e1      	adds	r1, r4, r3
 8003878:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003882:	4422      	add	r2, r4
 8003884:	3302      	adds	r3, #2
 8003886:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800388a:	e7c4      	b.n	8003816 <_printf_common+0x62>
 800388c:	2301      	movs	r3, #1
 800388e:	4622      	mov	r2, r4
 8003890:	4639      	mov	r1, r7
 8003892:	4630      	mov	r0, r6
 8003894:	47c0      	blx	r8
 8003896:	3001      	adds	r0, #1
 8003898:	d0e6      	beq.n	8003868 <_printf_common+0xb4>
 800389a:	f109 0901 	add.w	r9, r9, #1
 800389e:	e7d8      	b.n	8003852 <_printf_common+0x9e>

080038a0 <_printf_i>:
 80038a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80038a8:	460c      	mov	r4, r1
 80038aa:	7e09      	ldrb	r1, [r1, #24]
 80038ac:	b085      	sub	sp, #20
 80038ae:	296e      	cmp	r1, #110	; 0x6e
 80038b0:	4617      	mov	r7, r2
 80038b2:	4606      	mov	r6, r0
 80038b4:	4698      	mov	r8, r3
 80038b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038b8:	f000 80b3 	beq.w	8003a22 <_printf_i+0x182>
 80038bc:	d822      	bhi.n	8003904 <_printf_i+0x64>
 80038be:	2963      	cmp	r1, #99	; 0x63
 80038c0:	d036      	beq.n	8003930 <_printf_i+0x90>
 80038c2:	d80a      	bhi.n	80038da <_printf_i+0x3a>
 80038c4:	2900      	cmp	r1, #0
 80038c6:	f000 80b9 	beq.w	8003a3c <_printf_i+0x19c>
 80038ca:	2958      	cmp	r1, #88	; 0x58
 80038cc:	f000 8083 	beq.w	80039d6 <_printf_i+0x136>
 80038d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038d8:	e032      	b.n	8003940 <_printf_i+0xa0>
 80038da:	2964      	cmp	r1, #100	; 0x64
 80038dc:	d001      	beq.n	80038e2 <_printf_i+0x42>
 80038de:	2969      	cmp	r1, #105	; 0x69
 80038e0:	d1f6      	bne.n	80038d0 <_printf_i+0x30>
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	6813      	ldr	r3, [r2, #0]
 80038e6:	0605      	lsls	r5, r0, #24
 80038e8:	f103 0104 	add.w	r1, r3, #4
 80038ec:	d52a      	bpl.n	8003944 <_printf_i+0xa4>
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6011      	str	r1, [r2, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da03      	bge.n	80038fe <_printf_i+0x5e>
 80038f6:	222d      	movs	r2, #45	; 0x2d
 80038f8:	425b      	negs	r3, r3
 80038fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038fe:	486f      	ldr	r0, [pc, #444]	; (8003abc <_printf_i+0x21c>)
 8003900:	220a      	movs	r2, #10
 8003902:	e039      	b.n	8003978 <_printf_i+0xd8>
 8003904:	2973      	cmp	r1, #115	; 0x73
 8003906:	f000 809d 	beq.w	8003a44 <_printf_i+0x1a4>
 800390a:	d808      	bhi.n	800391e <_printf_i+0x7e>
 800390c:	296f      	cmp	r1, #111	; 0x6f
 800390e:	d020      	beq.n	8003952 <_printf_i+0xb2>
 8003910:	2970      	cmp	r1, #112	; 0x70
 8003912:	d1dd      	bne.n	80038d0 <_printf_i+0x30>
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	f043 0320 	orr.w	r3, r3, #32
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	e003      	b.n	8003926 <_printf_i+0x86>
 800391e:	2975      	cmp	r1, #117	; 0x75
 8003920:	d017      	beq.n	8003952 <_printf_i+0xb2>
 8003922:	2978      	cmp	r1, #120	; 0x78
 8003924:	d1d4      	bne.n	80038d0 <_printf_i+0x30>
 8003926:	2378      	movs	r3, #120	; 0x78
 8003928:	4865      	ldr	r0, [pc, #404]	; (8003ac0 <_printf_i+0x220>)
 800392a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800392e:	e055      	b.n	80039dc <_printf_i+0x13c>
 8003930:	6813      	ldr	r3, [r2, #0]
 8003932:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003936:	1d19      	adds	r1, r3, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6011      	str	r1, [r2, #0]
 800393c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003940:	2301      	movs	r3, #1
 8003942:	e08c      	b.n	8003a5e <_printf_i+0x1be>
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f010 0f40 	tst.w	r0, #64	; 0x40
 800394a:	6011      	str	r1, [r2, #0]
 800394c:	bf18      	it	ne
 800394e:	b21b      	sxthne	r3, r3
 8003950:	e7cf      	b.n	80038f2 <_printf_i+0x52>
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	6825      	ldr	r5, [r4, #0]
 8003956:	1d18      	adds	r0, r3, #4
 8003958:	6010      	str	r0, [r2, #0]
 800395a:	0628      	lsls	r0, r5, #24
 800395c:	d501      	bpl.n	8003962 <_printf_i+0xc2>
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	e002      	b.n	8003968 <_printf_i+0xc8>
 8003962:	0668      	lsls	r0, r5, #25
 8003964:	d5fb      	bpl.n	800395e <_printf_i+0xbe>
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	296f      	cmp	r1, #111	; 0x6f
 800396a:	bf14      	ite	ne
 800396c:	220a      	movne	r2, #10
 800396e:	2208      	moveq	r2, #8
 8003970:	4852      	ldr	r0, [pc, #328]	; (8003abc <_printf_i+0x21c>)
 8003972:	2100      	movs	r1, #0
 8003974:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003978:	6865      	ldr	r5, [r4, #4]
 800397a:	2d00      	cmp	r5, #0
 800397c:	60a5      	str	r5, [r4, #8]
 800397e:	f2c0 8095 	blt.w	8003aac <_printf_i+0x20c>
 8003982:	6821      	ldr	r1, [r4, #0]
 8003984:	f021 0104 	bic.w	r1, r1, #4
 8003988:	6021      	str	r1, [r4, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d13d      	bne.n	8003a0a <_printf_i+0x16a>
 800398e:	2d00      	cmp	r5, #0
 8003990:	f040 808e 	bne.w	8003ab0 <_printf_i+0x210>
 8003994:	4665      	mov	r5, ip
 8003996:	2a08      	cmp	r2, #8
 8003998:	d10b      	bne.n	80039b2 <_printf_i+0x112>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	07db      	lsls	r3, r3, #31
 800399e:	d508      	bpl.n	80039b2 <_printf_i+0x112>
 80039a0:	6923      	ldr	r3, [r4, #16]
 80039a2:	6862      	ldr	r2, [r4, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	bfde      	ittt	le
 80039a8:	2330      	movle	r3, #48	; 0x30
 80039aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039b2:	ebac 0305 	sub.w	r3, ip, r5
 80039b6:	6123      	str	r3, [r4, #16]
 80039b8:	f8cd 8000 	str.w	r8, [sp]
 80039bc:	463b      	mov	r3, r7
 80039be:	aa03      	add	r2, sp, #12
 80039c0:	4621      	mov	r1, r4
 80039c2:	4630      	mov	r0, r6
 80039c4:	f7ff fef6 	bl	80037b4 <_printf_common>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d14d      	bne.n	8003a68 <_printf_i+0x1c8>
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	b005      	add	sp, #20
 80039d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039d6:	4839      	ldr	r0, [pc, #228]	; (8003abc <_printf_i+0x21c>)
 80039d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039dc:	6813      	ldr	r3, [r2, #0]
 80039de:	6821      	ldr	r1, [r4, #0]
 80039e0:	1d1d      	adds	r5, r3, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6015      	str	r5, [r2, #0]
 80039e6:	060a      	lsls	r2, r1, #24
 80039e8:	d50b      	bpl.n	8003a02 <_printf_i+0x162>
 80039ea:	07ca      	lsls	r2, r1, #31
 80039ec:	bf44      	itt	mi
 80039ee:	f041 0120 	orrmi.w	r1, r1, #32
 80039f2:	6021      	strmi	r1, [r4, #0]
 80039f4:	b91b      	cbnz	r3, 80039fe <_printf_i+0x15e>
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	f022 0220 	bic.w	r2, r2, #32
 80039fc:	6022      	str	r2, [r4, #0]
 80039fe:	2210      	movs	r2, #16
 8003a00:	e7b7      	b.n	8003972 <_printf_i+0xd2>
 8003a02:	064d      	lsls	r5, r1, #25
 8003a04:	bf48      	it	mi
 8003a06:	b29b      	uxthmi	r3, r3
 8003a08:	e7ef      	b.n	80039ea <_printf_i+0x14a>
 8003a0a:	4665      	mov	r5, ip
 8003a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a10:	fb02 3311 	mls	r3, r2, r1, r3
 8003a14:	5cc3      	ldrb	r3, [r0, r3]
 8003a16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	d1f5      	bne.n	8003a0c <_printf_i+0x16c>
 8003a20:	e7b9      	b.n	8003996 <_printf_i+0xf6>
 8003a22:	6813      	ldr	r3, [r2, #0]
 8003a24:	6825      	ldr	r5, [r4, #0]
 8003a26:	1d18      	adds	r0, r3, #4
 8003a28:	6961      	ldr	r1, [r4, #20]
 8003a2a:	6010      	str	r0, [r2, #0]
 8003a2c:	0628      	lsls	r0, r5, #24
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	d501      	bpl.n	8003a36 <_printf_i+0x196>
 8003a32:	6019      	str	r1, [r3, #0]
 8003a34:	e002      	b.n	8003a3c <_printf_i+0x19c>
 8003a36:	066a      	lsls	r2, r5, #25
 8003a38:	d5fb      	bpl.n	8003a32 <_printf_i+0x192>
 8003a3a:	8019      	strh	r1, [r3, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	4665      	mov	r5, ip
 8003a40:	6123      	str	r3, [r4, #16]
 8003a42:	e7b9      	b.n	80039b8 <_printf_i+0x118>
 8003a44:	6813      	ldr	r3, [r2, #0]
 8003a46:	1d19      	adds	r1, r3, #4
 8003a48:	6011      	str	r1, [r2, #0]
 8003a4a:	681d      	ldr	r5, [r3, #0]
 8003a4c:	6862      	ldr	r2, [r4, #4]
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4628      	mov	r0, r5
 8003a52:	f000 f837 	bl	8003ac4 <memchr>
 8003a56:	b108      	cbz	r0, 8003a5c <_printf_i+0x1bc>
 8003a58:	1b40      	subs	r0, r0, r5
 8003a5a:	6060      	str	r0, [r4, #4]
 8003a5c:	6863      	ldr	r3, [r4, #4]
 8003a5e:	6123      	str	r3, [r4, #16]
 8003a60:	2300      	movs	r3, #0
 8003a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a66:	e7a7      	b.n	80039b8 <_printf_i+0x118>
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	462a      	mov	r2, r5
 8003a6c:	4639      	mov	r1, r7
 8003a6e:	4630      	mov	r0, r6
 8003a70:	47c0      	blx	r8
 8003a72:	3001      	adds	r0, #1
 8003a74:	d0aa      	beq.n	80039cc <_printf_i+0x12c>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	079b      	lsls	r3, r3, #30
 8003a7a:	d413      	bmi.n	8003aa4 <_printf_i+0x204>
 8003a7c:	68e0      	ldr	r0, [r4, #12]
 8003a7e:	9b03      	ldr	r3, [sp, #12]
 8003a80:	4298      	cmp	r0, r3
 8003a82:	bfb8      	it	lt
 8003a84:	4618      	movlt	r0, r3
 8003a86:	e7a3      	b.n	80039d0 <_printf_i+0x130>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	464a      	mov	r2, r9
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	4630      	mov	r0, r6
 8003a90:	47c0      	blx	r8
 8003a92:	3001      	adds	r0, #1
 8003a94:	d09a      	beq.n	80039cc <_printf_i+0x12c>
 8003a96:	3501      	adds	r5, #1
 8003a98:	68e3      	ldr	r3, [r4, #12]
 8003a9a:	9a03      	ldr	r2, [sp, #12]
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	42ab      	cmp	r3, r5
 8003aa0:	dcf2      	bgt.n	8003a88 <_printf_i+0x1e8>
 8003aa2:	e7eb      	b.n	8003a7c <_printf_i+0x1dc>
 8003aa4:	2500      	movs	r5, #0
 8003aa6:	f104 0919 	add.w	r9, r4, #25
 8003aaa:	e7f5      	b.n	8003a98 <_printf_i+0x1f8>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ac      	bne.n	8003a0a <_printf_i+0x16a>
 8003ab0:	7803      	ldrb	r3, [r0, #0]
 8003ab2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aba:	e76c      	b.n	8003996 <_printf_i+0xf6>
 8003abc:	08003dc9 	.word	0x08003dc9
 8003ac0:	08003dda 	.word	0x08003dda

08003ac4 <memchr>:
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	b2c9      	uxtb	r1, r1
 8003ac8:	4402      	add	r2, r0
 8003aca:	4290      	cmp	r0, r2
 8003acc:	4603      	mov	r3, r0
 8003ace:	d101      	bne.n	8003ad4 <memchr+0x10>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e003      	b.n	8003adc <memchr+0x18>
 8003ad4:	781c      	ldrb	r4, [r3, #0]
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	428c      	cmp	r4, r1
 8003ada:	d1f6      	bne.n	8003aca <memchr+0x6>
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd10      	pop	{r4, pc}

08003ae0 <memcpy>:
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	1e43      	subs	r3, r0, #1
 8003ae4:	440a      	add	r2, r1
 8003ae6:	4291      	cmp	r1, r2
 8003ae8:	d100      	bne.n	8003aec <memcpy+0xc>
 8003aea:	bd10      	pop	{r4, pc}
 8003aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003af4:	e7f7      	b.n	8003ae6 <memcpy+0x6>

08003af6 <memmove>:
 8003af6:	4288      	cmp	r0, r1
 8003af8:	b510      	push	{r4, lr}
 8003afa:	eb01 0302 	add.w	r3, r1, r2
 8003afe:	d807      	bhi.n	8003b10 <memmove+0x1a>
 8003b00:	1e42      	subs	r2, r0, #1
 8003b02:	4299      	cmp	r1, r3
 8003b04:	d00a      	beq.n	8003b1c <memmove+0x26>
 8003b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b0a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b0e:	e7f8      	b.n	8003b02 <memmove+0xc>
 8003b10:	4283      	cmp	r3, r0
 8003b12:	d9f5      	bls.n	8003b00 <memmove+0xa>
 8003b14:	1881      	adds	r1, r0, r2
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	42d3      	cmn	r3, r2
 8003b1a:	d100      	bne.n	8003b1e <memmove+0x28>
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b22:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b26:	e7f7      	b.n	8003b18 <memmove+0x22>

08003b28 <_free_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	d043      	beq.n	8003bb8 <_free_r+0x90>
 8003b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b34:	1f0c      	subs	r4, r1, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bfb8      	it	lt
 8003b3a:	18e4      	addlt	r4, r4, r3
 8003b3c:	f000 f8d0 	bl	8003ce0 <__malloc_lock>
 8003b40:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <_free_r+0x94>)
 8003b42:	6813      	ldr	r3, [r2, #0]
 8003b44:	4610      	mov	r0, r2
 8003b46:	b933      	cbnz	r3, 8003b56 <_free_r+0x2e>
 8003b48:	6063      	str	r3, [r4, #4]
 8003b4a:	6014      	str	r4, [r2, #0]
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b52:	f000 b8c6 	b.w	8003ce2 <__malloc_unlock>
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	d90b      	bls.n	8003b72 <_free_r+0x4a>
 8003b5a:	6821      	ldr	r1, [r4, #0]
 8003b5c:	1862      	adds	r2, r4, r1
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	bf01      	itttt	eq
 8003b62:	681a      	ldreq	r2, [r3, #0]
 8003b64:	685b      	ldreq	r3, [r3, #4]
 8003b66:	1852      	addeq	r2, r2, r1
 8003b68:	6022      	streq	r2, [r4, #0]
 8003b6a:	6063      	str	r3, [r4, #4]
 8003b6c:	6004      	str	r4, [r0, #0]
 8003b6e:	e7ed      	b.n	8003b4c <_free_r+0x24>
 8003b70:	4613      	mov	r3, r2
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	b10a      	cbz	r2, 8003b7a <_free_r+0x52>
 8003b76:	42a2      	cmp	r2, r4
 8003b78:	d9fa      	bls.n	8003b70 <_free_r+0x48>
 8003b7a:	6819      	ldr	r1, [r3, #0]
 8003b7c:	1858      	adds	r0, r3, r1
 8003b7e:	42a0      	cmp	r0, r4
 8003b80:	d10b      	bne.n	8003b9a <_free_r+0x72>
 8003b82:	6820      	ldr	r0, [r4, #0]
 8003b84:	4401      	add	r1, r0
 8003b86:	1858      	adds	r0, r3, r1
 8003b88:	4282      	cmp	r2, r0
 8003b8a:	6019      	str	r1, [r3, #0]
 8003b8c:	d1de      	bne.n	8003b4c <_free_r+0x24>
 8003b8e:	6810      	ldr	r0, [r2, #0]
 8003b90:	6852      	ldr	r2, [r2, #4]
 8003b92:	4401      	add	r1, r0
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	e7d8      	b.n	8003b4c <_free_r+0x24>
 8003b9a:	d902      	bls.n	8003ba2 <_free_r+0x7a>
 8003b9c:	230c      	movs	r3, #12
 8003b9e:	602b      	str	r3, [r5, #0]
 8003ba0:	e7d4      	b.n	8003b4c <_free_r+0x24>
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	1821      	adds	r1, r4, r0
 8003ba6:	428a      	cmp	r2, r1
 8003ba8:	bf01      	itttt	eq
 8003baa:	6811      	ldreq	r1, [r2, #0]
 8003bac:	6852      	ldreq	r2, [r2, #4]
 8003bae:	1809      	addeq	r1, r1, r0
 8003bb0:	6021      	streq	r1, [r4, #0]
 8003bb2:	6062      	str	r2, [r4, #4]
 8003bb4:	605c      	str	r4, [r3, #4]
 8003bb6:	e7c9      	b.n	8003b4c <_free_r+0x24>
 8003bb8:	bd38      	pop	{r3, r4, r5, pc}
 8003bba:	bf00      	nop
 8003bbc:	2000018c 	.word	0x2000018c

08003bc0 <_malloc_r>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	1ccd      	adds	r5, r1, #3
 8003bc4:	f025 0503 	bic.w	r5, r5, #3
 8003bc8:	3508      	adds	r5, #8
 8003bca:	2d0c      	cmp	r5, #12
 8003bcc:	bf38      	it	cc
 8003bce:	250c      	movcc	r5, #12
 8003bd0:	2d00      	cmp	r5, #0
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	db01      	blt.n	8003bda <_malloc_r+0x1a>
 8003bd6:	42a9      	cmp	r1, r5
 8003bd8:	d903      	bls.n	8003be2 <_malloc_r+0x22>
 8003bda:	230c      	movs	r3, #12
 8003bdc:	6033      	str	r3, [r6, #0]
 8003bde:	2000      	movs	r0, #0
 8003be0:	bd70      	pop	{r4, r5, r6, pc}
 8003be2:	f000 f87d 	bl	8003ce0 <__malloc_lock>
 8003be6:	4a21      	ldr	r2, [pc, #132]	; (8003c6c <_malloc_r+0xac>)
 8003be8:	6814      	ldr	r4, [r2, #0]
 8003bea:	4621      	mov	r1, r4
 8003bec:	b991      	cbnz	r1, 8003c14 <_malloc_r+0x54>
 8003bee:	4c20      	ldr	r4, [pc, #128]	; (8003c70 <_malloc_r+0xb0>)
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	b91b      	cbnz	r3, 8003bfc <_malloc_r+0x3c>
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f000 f863 	bl	8003cc0 <_sbrk_r>
 8003bfa:	6020      	str	r0, [r4, #0]
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f000 f85e 	bl	8003cc0 <_sbrk_r>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d124      	bne.n	8003c52 <_malloc_r+0x92>
 8003c08:	230c      	movs	r3, #12
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	6033      	str	r3, [r6, #0]
 8003c0e:	f000 f868 	bl	8003ce2 <__malloc_unlock>
 8003c12:	e7e4      	b.n	8003bde <_malloc_r+0x1e>
 8003c14:	680b      	ldr	r3, [r1, #0]
 8003c16:	1b5b      	subs	r3, r3, r5
 8003c18:	d418      	bmi.n	8003c4c <_malloc_r+0x8c>
 8003c1a:	2b0b      	cmp	r3, #11
 8003c1c:	d90f      	bls.n	8003c3e <_malloc_r+0x7e>
 8003c1e:	600b      	str	r3, [r1, #0]
 8003c20:	18cc      	adds	r4, r1, r3
 8003c22:	50cd      	str	r5, [r1, r3]
 8003c24:	4630      	mov	r0, r6
 8003c26:	f000 f85c 	bl	8003ce2 <__malloc_unlock>
 8003c2a:	f104 000b 	add.w	r0, r4, #11
 8003c2e:	1d23      	adds	r3, r4, #4
 8003c30:	f020 0007 	bic.w	r0, r0, #7
 8003c34:	1ac3      	subs	r3, r0, r3
 8003c36:	d0d3      	beq.n	8003be0 <_malloc_r+0x20>
 8003c38:	425a      	negs	r2, r3
 8003c3a:	50e2      	str	r2, [r4, r3]
 8003c3c:	e7d0      	b.n	8003be0 <_malloc_r+0x20>
 8003c3e:	684b      	ldr	r3, [r1, #4]
 8003c40:	428c      	cmp	r4, r1
 8003c42:	bf16      	itet	ne
 8003c44:	6063      	strne	r3, [r4, #4]
 8003c46:	6013      	streq	r3, [r2, #0]
 8003c48:	460c      	movne	r4, r1
 8003c4a:	e7eb      	b.n	8003c24 <_malloc_r+0x64>
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	6849      	ldr	r1, [r1, #4]
 8003c50:	e7cc      	b.n	8003bec <_malloc_r+0x2c>
 8003c52:	1cc4      	adds	r4, r0, #3
 8003c54:	f024 0403 	bic.w	r4, r4, #3
 8003c58:	42a0      	cmp	r0, r4
 8003c5a:	d005      	beq.n	8003c68 <_malloc_r+0xa8>
 8003c5c:	1a21      	subs	r1, r4, r0
 8003c5e:	4630      	mov	r0, r6
 8003c60:	f000 f82e 	bl	8003cc0 <_sbrk_r>
 8003c64:	3001      	adds	r0, #1
 8003c66:	d0cf      	beq.n	8003c08 <_malloc_r+0x48>
 8003c68:	6025      	str	r5, [r4, #0]
 8003c6a:	e7db      	b.n	8003c24 <_malloc_r+0x64>
 8003c6c:	2000018c 	.word	0x2000018c
 8003c70:	20000190 	.word	0x20000190

08003c74 <_realloc_r>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	4607      	mov	r7, r0
 8003c78:	4614      	mov	r4, r2
 8003c7a:	460e      	mov	r6, r1
 8003c7c:	b921      	cbnz	r1, 8003c88 <_realloc_r+0x14>
 8003c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c82:	4611      	mov	r1, r2
 8003c84:	f7ff bf9c 	b.w	8003bc0 <_malloc_r>
 8003c88:	b922      	cbnz	r2, 8003c94 <_realloc_r+0x20>
 8003c8a:	f7ff ff4d 	bl	8003b28 <_free_r>
 8003c8e:	4625      	mov	r5, r4
 8003c90:	4628      	mov	r0, r5
 8003c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c94:	f000 f826 	bl	8003ce4 <_malloc_usable_size_r>
 8003c98:	42a0      	cmp	r0, r4
 8003c9a:	d20f      	bcs.n	8003cbc <_realloc_r+0x48>
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	f7ff ff8e 	bl	8003bc0 <_malloc_r>
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0f2      	beq.n	8003c90 <_realloc_r+0x1c>
 8003caa:	4631      	mov	r1, r6
 8003cac:	4622      	mov	r2, r4
 8003cae:	f7ff ff17 	bl	8003ae0 <memcpy>
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	f7ff ff37 	bl	8003b28 <_free_r>
 8003cba:	e7e9      	b.n	8003c90 <_realloc_r+0x1c>
 8003cbc:	4635      	mov	r5, r6
 8003cbe:	e7e7      	b.n	8003c90 <_realloc_r+0x1c>

08003cc0 <_sbrk_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4c05      	ldr	r4, [pc, #20]	; (8003cdc <_sbrk_r+0x1c>)
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	4608      	mov	r0, r1
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	f7fd f880 	bl	8000dd0 <_sbrk>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d102      	bne.n	8003cda <_sbrk_r+0x1a>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	b103      	cbz	r3, 8003cda <_sbrk_r+0x1a>
 8003cd8:	602b      	str	r3, [r5, #0]
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	20000274 	.word	0x20000274

08003ce0 <__malloc_lock>:
 8003ce0:	4770      	bx	lr

08003ce2 <__malloc_unlock>:
 8003ce2:	4770      	bx	lr

08003ce4 <_malloc_usable_size_r>:
 8003ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce8:	1f18      	subs	r0, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bfbc      	itt	lt
 8003cee:	580b      	ldrlt	r3, [r1, r0]
 8003cf0:	18c0      	addlt	r0, r0, r3
 8003cf2:	4770      	bx	lr

08003cf4 <_init>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr

08003d00 <_fini>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr
