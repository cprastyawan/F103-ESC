
F103-ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007494  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080075a8  080075a8  000175a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007880  08007880  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007880  08007880  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007880  08007880  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007884  08007884  00017884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001e0  08007a68  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08007a68  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf7c  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000208c  00000000  00000000  0002d185  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  0002f218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  0002ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000153d1  00000000  00000000  00030c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7c4  00000000  00000000  00046011  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007768d  00000000  00000000  000507d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7e62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d0  00000000  00000000  000c7ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800758c 	.word	0x0800758c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800758c 	.word	0x0800758c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <DWT_Init+0x38>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10e      	bne.n	8000f72 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <DWT_Init+0x38>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <DWT_Init+0x38>)
 8000f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f5e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <DWT_Init+0x3c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <DWT_Init+0x3c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <DWT_Init+0x3c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6013      	str	r3, [r2, #0]
    }
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000edf0 	.word	0xe000edf0
 8000f80:	e0001000 	.word	0xe0001000

08000f84 <outPWM>:
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void sound(uint32_t Frequency, uint32_t milliseconds);
void phase(int step, uint16_t speed);
void outPWM(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t dutyCycle){
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	80fb      	strh	r3, [r7, #6]
	dutyCycle = map(dutyCycle, 0, 0xFFFF, 0, 2000);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <outPWM+0x6c>)
 8000f9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa2:	441a      	add	r2, r3
 8000fa4:	13d2      	asrs	r2, r2, #15
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d104      	bne.n	8000fbc <outPWM+0x38>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fba:	e013      	b.n	8000fe4 <outPWM+0x60>
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d104      	bne.n	8000fcc <outPWM+0x48>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	88fa      	ldrh	r2, [r7, #6]
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fca:	e00b      	b.n	8000fe4 <outPWM+0x60>
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d104      	bne.n	8000fdc <outPWM+0x58>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fda:	e003      	b.n	8000fe4 <outPWM+0x60>
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	88fa      	ldrh	r2, [r7, #6]
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	80008001 	.word	0x80008001

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f000 ffc2 	bl	8001f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f86e 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 fadc 	bl	80015bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001004:	f000 fabc 	bl	8001580 <MX_DMA_Init>
  MX_TIM1_Init();
 8001008:	f000 f93c 	bl	8001284 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800100c:	f000 fa8e 	bl	800152c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001010:	f000 f9f0 	bl	80013f4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001014:	f000 f8be 	bl	8001194 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <main+0xc4>)
 800101a:	f001 fbc5 	bl	80027a8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adcVal, 5);
 800101e:	2205      	movs	r2, #5
 8001020:	4926      	ldr	r1, [pc, #152]	; (80010bc <main+0xc8>)
 8001022:	4825      	ldr	r0, [pc, #148]	; (80010b8 <main+0xc4>)
 8001024:	f001 f8e6 	bl	80021f4 <HAL_ADC_Start_DMA>

  DWT_Init();
 8001028:	f7ff ff8c 	bl	8000f44 <DWT_Init>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800102c:	2100      	movs	r1, #0
 800102e:	4824      	ldr	r0, [pc, #144]	; (80010c0 <main+0xcc>)
 8001030:	f002 ff18 	bl	8003e64 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001034:	2104      	movs	r1, #4
 8001036:	4822      	ldr	r0, [pc, #136]	; (80010c0 <main+0xcc>)
 8001038:	f002 ff14 	bl	8003e64 <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3);
 800103c:	210c      	movs	r1, #12
 800103e:	4821      	ldr	r0, [pc, #132]	; (80010c4 <main+0xd0>)
 8001040:	f002 feaa 	bl	8003d98 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3);
 8001044:	210c      	movs	r1, #12
 8001046:	481f      	ldr	r0, [pc, #124]	; (80010c4 <main+0xd0>)
 8001048:	f003 ff33 	bl	8004eb2 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800104c:	2108      	movs	r1, #8
 800104e:	481c      	ldr	r0, [pc, #112]	; (80010c0 <main+0xcc>)
 8001050:	f002 fea2 	bl	8003d98 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, 0, 0);
  //HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, 0, 0);
  //HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, 0, 0);


  if(Input_DutyCycle > ESC_PWM_MIN + 100){
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <main+0xd4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f240 424c 	movw	r2, #1100	; 0x44c
 800105c:	4293      	cmp	r3, r2
 800105e:	d903      	bls.n	8001068 <main+0x74>
	  esc_mode = ESC_CALIBRATE;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <main+0xd8>)
 8001062:	2202      	movs	r2, #2
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e002      	b.n	800106e <main+0x7a>
  } else esc_mode = ESC_DISARMED;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <main+0xd8>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, "MULAI\r\n", 7, 10);
 800106e:	230a      	movs	r3, #10
 8001070:	2207      	movs	r2, #7
 8001072:	4917      	ldr	r1, [pc, #92]	; (80010d0 <main+0xdc>)
 8001074:	4817      	ldr	r0, [pc, #92]	; (80010d4 <main+0xe0>)
 8001076:	f004 f85e 	bl	8005136 <HAL_UART_Transmit>
				  lastDelta = delta;
				  step = step + 1;
				  if(step > 6) step = 1;
			  }
		  }*/
	  	  phase(step, 0xBFFF);
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <main+0xe4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fae4 	bl	8001650 <phase>
	  	  step = step + (ZeroCross(step) ? 1 : 0);
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <main+0xe4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fbc3 	bl	8001818 <ZeroCross>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <main+0xe4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <main+0xe4>)
 800109e:	6013      	str	r3, [r2, #0]
		  step = step > 6 ? 1 : step;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <main+0xe4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b06      	cmp	r3, #6
 80010a6:	dc02      	bgt.n	80010ae <main+0xba>
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <main+0xe4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	e000      	b.n	80010b0 <main+0xbc>
 80010ae:	2301      	movs	r3, #1
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <main+0xe4>)
 80010b2:	6013      	str	r3, [r2, #0]
	  	  phase(step, 0xBFFF);
 80010b4:	e7e1      	b.n	800107a <main+0x86>
 80010b6:	bf00      	nop
 80010b8:	200002fc 	.word	0x200002fc
 80010bc:	200003b0 	.word	0x200003b0
 80010c0:	20000408 	.word	0x20000408
 80010c4:	200003c4 	.word	0x200003c4
 80010c8:	200001fc 	.word	0x200001fc
 80010cc:	200002f8 	.word	0x200002f8
 80010d0:	080075a8 	.word	0x080075a8
 80010d4:	2000032c 	.word	0x2000032c
 80010d8:	20000000 	.word	0x20000000

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	2228      	movs	r2, #40	; 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fa0a 	bl	8005504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110c:	2301      	movs	r3, #1
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111a:	2301      	movs	r3, #1
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001128:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800112c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f842 	bl	80031bc <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800113e:	f000 fc87 	bl	8001a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800114e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001152:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2102      	movs	r1, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f002 faac 	bl	80036bc <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800116a:	f000 fc71 	bl	8001a50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800116e:	2302      	movs	r3, #2
 8001170:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fc3a 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001186:	f000 fc63 	bl	8001a50 <Error_Handler>
  }
}
 800118a:	bf00      	nop
 800118c:	3750      	adds	r7, #80	; 0x50
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011a4:	4b35      	ldr	r3, [pc, #212]	; (800127c <MX_ADC1_Init+0xe8>)
 80011a6:	4a36      	ldr	r2, [pc, #216]	; (8001280 <MX_ADC1_Init+0xec>)
 80011a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <MX_ADC1_Init+0xe8>)
 80011ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b2:	4b32      	ldr	r3, [pc, #200]	; (800127c <MX_ADC1_Init+0xe8>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <MX_ADC1_Init+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011be:	4b2f      	ldr	r3, [pc, #188]	; (800127c <MX_ADC1_Init+0xe8>)
 80011c0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_ADC1_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <MX_ADC1_Init+0xe8>)
 80011ce:	2205      	movs	r2, #5
 80011d0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d2:	482a      	ldr	r0, [pc, #168]	; (800127c <MX_ADC1_Init+0xe8>)
 80011d4:	f000 ff36 	bl	8002044 <HAL_ADC_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011de:	f000 fc37 	bl	8001a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80011ea:	2301      	movs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4822      	ldr	r0, [pc, #136]	; (800127c <MX_ADC1_Init+0xe8>)
 80011f4:	f001 f8ee 	bl	80023d4 <HAL_ADC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011fe:	f000 fc27 	bl	8001a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001202:	2301      	movs	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001206:	2302      	movs	r3, #2
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	481b      	ldr	r0, [pc, #108]	; (800127c <MX_ADC1_Init+0xe8>)
 8001210:	f001 f8e0 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800121a:	f000 fc19 	bl	8001a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800121e:	2302      	movs	r3, #2
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001222:	2303      	movs	r3, #3
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4814      	ldr	r0, [pc, #80]	; (800127c <MX_ADC1_Init+0xe8>)
 800122c:	f001 f8d2 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001236:	f000 fc0b 	bl	8001a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800123a:	2303      	movs	r3, #3
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800123e:	2304      	movs	r3, #4
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_ADC1_Init+0xe8>)
 8001248:	f001 f8c4 	bl	80023d4 <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001252:	f000 fbfd 	bl	8001a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001256:	2310      	movs	r3, #16
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800125a:	2305      	movs	r3, #5
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_ADC1_Init+0xe8>)
 8001264:	f001 f8b6 	bl	80023d4 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800126e:	f000 fbef 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002fc 	.word	0x200002fc
 8001280:	40012400 	.word	0x40012400

08001284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2220      	movs	r2, #32
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 f921 	bl	8005504 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <MX_TIM1_Init+0x168>)
 80012c4:	4a4a      	ldr	r2, [pc, #296]	; (80013f0 <MX_TIM1_Init+0x16c>)
 80012c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012c8:	4b48      	ldr	r3, [pc, #288]	; (80013ec <MX_TIM1_Init+0x168>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <MX_TIM1_Init+0x168>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000 - 1;
 80012d4:	4b45      	ldr	r3, [pc, #276]	; (80013ec <MX_TIM1_Init+0x168>)
 80012d6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <MX_TIM1_Init+0x168>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <MX_TIM1_Init+0x168>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b40      	ldr	r3, [pc, #256]	; (80013ec <MX_TIM1_Init+0x168>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ee:	483f      	ldr	r0, [pc, #252]	; (80013ec <MX_TIM1_Init+0x168>)
 80012f0:	f002 fcf2 	bl	8003cd8 <HAL_TIM_Base_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012fa:	f000 fba9 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001304:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001308:	4619      	mov	r1, r3
 800130a:	4838      	ldr	r0, [pc, #224]	; (80013ec <MX_TIM1_Init+0x168>)
 800130c:	f003 f87c 	bl	8004408 <HAL_TIM_ConfigClockSource>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001316:	f000 fb9b 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131a:	4834      	ldr	r0, [pc, #208]	; (80013ec <MX_TIM1_Init+0x168>)
 800131c:	f002 fd07 	bl	8003d2e <HAL_TIM_PWM_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001326:	f000 fb93 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001332:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001336:	4619      	mov	r1, r3
 8001338:	482c      	ldr	r0, [pc, #176]	; (80013ec <MX_TIM1_Init+0x168>)
 800133a:	f003 fde4 	bl	8004f06 <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001344:	f000 fb84 	bl	8001a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001348:	2360      	movs	r3, #96	; 0x60
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001358:	2304      	movs	r3, #4
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	481f      	ldr	r0, [pc, #124]	; (80013ec <MX_TIM1_Init+0x168>)
 800136e:	f002 ff85 	bl	800427c <HAL_TIM_PWM_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001378:	f000 fb6a 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	2204      	movs	r2, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4819      	ldr	r0, [pc, #100]	; (80013ec <MX_TIM1_Init+0x168>)
 8001386:	f002 ff79 	bl	800427c <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001390:	f000 fb5e 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	2208      	movs	r2, #8
 800139a:	4619      	mov	r1, r3
 800139c:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_TIM1_Init+0x168>)
 800139e:	f002 ff6d 	bl	800427c <HAL_TIM_PWM_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013a8:	f000 fb52 	bl	8001a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM1_Init+0x168>)
 80013d0:	f003 fddd 	bl	8004f8e <HAL_TIMEx_ConfigBreakDeadTime>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80013da:	f000 fb39 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM1_Init+0x168>)
 80013e0:	f000 fc44 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 80013e4:	bf00      	nop
 80013e6:	3758      	adds	r7, #88	; 0x58
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200003c4 	.word	0x200003c4
 80013f0:	40012c00 	.word	0x40012c00

080013f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b090      	sub	sp, #64	; 0x40
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <MX_TIM2_Init+0x134>)
 8001430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001434:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8001436:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <MX_TIM2_Init+0x134>)
 8001438:	2247      	movs	r2, #71	; 0x47
 800143a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <MX_TIM2_Init+0x134>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001442:	4b39      	ldr	r3, [pc, #228]	; (8001528 <MX_TIM2_Init+0x134>)
 8001444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001448:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <MX_TIM2_Init+0x134>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b35      	ldr	r3, [pc, #212]	; (8001528 <MX_TIM2_Init+0x134>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001456:	4834      	ldr	r0, [pc, #208]	; (8001528 <MX_TIM2_Init+0x134>)
 8001458:	f002 fc3e 	bl	8003cd8 <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001462:	f000 faf5 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800146c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001470:	4619      	mov	r1, r3
 8001472:	482d      	ldr	r0, [pc, #180]	; (8001528 <MX_TIM2_Init+0x134>)
 8001474:	f002 ffc8 	bl	8004408 <HAL_TIM_ConfigClockSource>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800147e:	f000 fae7 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001482:	4829      	ldr	r0, [pc, #164]	; (8001528 <MX_TIM2_Init+0x134>)
 8001484:	f002 fcba 	bl	8003dfc <HAL_TIM_IC_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800148e:	f000 fadf 	bl	8001a50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001492:	2304      	movs	r3, #4
 8001494:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001496:	2350      	movs	r3, #80	; 0x50
 8001498:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	481e      	ldr	r0, [pc, #120]	; (8001528 <MX_TIM2_Init+0x134>)
 80014ae:	f003 f862 	bl	8004576 <HAL_TIM_SlaveConfigSynchro>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80014b8:	f000 faca 	bl	8001a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014c0:	2301      	movs	r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4814      	ldr	r0, [pc, #80]	; (8001528 <MX_TIM2_Init+0x134>)
 80014d6:	f002 fe35 	bl	8004144 <HAL_TIM_IC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80014e0:	f000 fab6 	bl	8001a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014e4:	2302      	movs	r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2204      	movs	r2, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <MX_TIM2_Init+0x134>)
 80014f6:	f002 fe25 	bl	8004144 <HAL_TIM_IC_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8001500:	f000 faa6 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_TIM2_Init+0x134>)
 8001512:	f003 fcf8 	bl	8004f06 <HAL_TIMEx_MasterConfigSynchronization>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 800151c:	f000 fa98 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	3740      	adds	r7, #64	; 0x40
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000408 	.word	0x20000408

0800152c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_USART1_UART_Init+0x50>)
 8001534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001564:	f003 fd9a 	bl	800509c <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800156e:	f000 fa6f 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000032c 	.word	0x2000032c
 800157c:	40013800 	.word	0x40013800

08001580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_DMA_Init+0x38>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <MX_DMA_Init+0x38>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6153      	str	r3, [r2, #20]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_DMA_Init+0x38>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	200b      	movs	r0, #11
 80015a4:	f001 fa73 	bl	8002a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015a8:	200b      	movs	r0, #11
 80015aa:	f001 fa8c 	bl	8002ac6 <HAL_NVIC_EnableIRQ>

}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_GPIO_Init+0x8c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <MX_GPIO_Init+0x8c>)
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_GPIO_Init+0x8c>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_GPIO_Init+0x8c>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a16      	ldr	r2, [pc, #88]	; (8001648 <MX_GPIO_Init+0x8c>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_GPIO_Init+0x8c>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_GPIO_Init+0x8c>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <MX_GPIO_Init+0x8c>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_GPIO_Init+0x8c>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2110      	movs	r1, #16
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <MX_GPIO_Init+0x90>)
 800161e:	f001 fdb5 	bl	800318c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001622:	2310      	movs	r3, #16
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2302      	movs	r3, #2
 8001630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4619      	mov	r1, r3
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_GPIO_Init+0x90>)
 800163a:	f001 fc4d 	bl	8002ed8 <HAL_GPIO_Init>

}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	40010800 	.word	0x40010800

08001650 <phase>:

/* USER CODE BEGIN 4 */

void phase(int step, uint16_t speed){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
	//uint32_t bemfSum = (bemfA + bemfB + bemfC) / 3;

	//strSize = sprintf((char*)buffer, "bemfA: %lu, bemfB: %lu, bemfC: %lu, bemfSum: %lu\t",bemfA, bemfB, bemfC, bemfSum);
	//HAL_UART_Transmit(&huart1, buffer, strSize, 100);

	switch(step){
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	2b05      	cmp	r3, #5
 8001662:	f200 80cb 	bhi.w	80017fc <phase+0x1ac>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <phase+0x1c>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	08001685 	.word	0x08001685
 8001670:	080016c1 	.word	0x080016c1
 8001674:	080016fd 	.word	0x080016fd
 8001678:	08001749 	.word	0x08001749
 800167c:	08001785 	.word	0x08001785
 8001680:	080017c1 	.word	0x080017c1
	case 1: //AH-BL
		ENABLE_A;
 8001684:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <phase+0x1b4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a5e      	ldr	r2, [pc, #376]	; (8001804 <phase+0x1b4>)
 800168a:	f043 0305 	orr.w	r3, r3, #5
 800168e:	6213      	str	r3, [r2, #32]
		ENABLE_B;
 8001690:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <phase+0x1b4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a5b      	ldr	r2, [pc, #364]	; (8001804 <phase+0x1b4>)
 8001696:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800169a:	6213      	str	r3, [r2, #32]
		DISABLE_C;
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <phase+0x1b4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <phase+0x1b4>)
 80016a2:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 80016a6:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_B, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2104      	movs	r1, #4
 80016ac:	4856      	ldr	r0, [pc, #344]	; (8001808 <phase+0x1b8>)
 80016ae:	f7ff fc69 	bl	8000f84 <outPWM>
		outPWM(&htim1, CHANNEL_A, speed);
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	461a      	mov	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	4853      	ldr	r0, [pc, #332]	; (8001808 <phase+0x1b8>)
 80016ba:	f7ff fc63 	bl	8000f84 <outPWM>

		//delta = bemfA - bemfSum;
		//strSize = sprintf((char*)buffer, "STEP: %d AH-BL\r\n", step);
		//HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		break;
 80016be:	e09d      	b.n	80017fc <phase+0x1ac>

	case 2: //AH-CL
		ENABLE_A;
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <phase+0x1b4>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4a4f      	ldr	r2, [pc, #316]	; (8001804 <phase+0x1b4>)
 80016c6:	f043 0305 	orr.w	r3, r3, #5
 80016ca:	6213      	str	r3, [r2, #32]
		ENABLE_C;
 80016cc:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <phase+0x1b4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <phase+0x1b4>)
 80016d2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80016d6:	6213      	str	r3, [r2, #32]
		DISABLE_B;
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <phase+0x1b4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a49      	ldr	r2, [pc, #292]	; (8001804 <phase+0x1b4>)
 80016de:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80016e2:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_C, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2108      	movs	r1, #8
 80016e8:	4847      	ldr	r0, [pc, #284]	; (8001808 <phase+0x1b8>)
 80016ea:	f7ff fc4b 	bl	8000f84 <outPWM>
		outPWM(&htim1, CHANNEL_A, speed);
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	461a      	mov	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	4844      	ldr	r0, [pc, #272]	; (8001808 <phase+0x1b8>)
 80016f6:	f7ff fc45 	bl	8000f84 <outPWM>

		//delta = bemfC - bemfSum;
		//strSize = sprintf((char*)buffer, "STEP: %d AH-CL\r\n", step);
		//HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		break;
 80016fa:	e07f      	b.n	80017fc <phase+0x1ac>

	case 3: //BH-CL
		ENABLE_B;
 80016fc:	4b41      	ldr	r3, [pc, #260]	; (8001804 <phase+0x1b4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a40      	ldr	r2, [pc, #256]	; (8001804 <phase+0x1b4>)
 8001702:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001706:	6213      	str	r3, [r2, #32]
		ENABLE_C;
 8001708:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <phase+0x1b4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <phase+0x1b4>)
 800170e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001712:	6213      	str	r3, [r2, #32]
		DISABLE_A;
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <phase+0x1b4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a3a      	ldr	r2, [pc, #232]	; (8001804 <phase+0x1b4>)
 800171a:	f023 0305 	bic.w	r3, r3, #5
 800171e:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_C, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2108      	movs	r1, #8
 8001724:	4838      	ldr	r0, [pc, #224]	; (8001808 <phase+0x1b8>)
 8001726:	f7ff fc2d 	bl	8000f84 <outPWM>
		outPWM(&htim1, CHANNEL_B, speed);
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	461a      	mov	r2, r3
 800172e:	2104      	movs	r1, #4
 8001730:	4835      	ldr	r0, [pc, #212]	; (8001808 <phase+0x1b8>)
 8001732:	f7ff fc27 	bl	8000f84 <outPWM>

		strSize = sprintf((char*)buffer, "STEP: %d BH-CL\r\n", step);
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4934      	ldr	r1, [pc, #208]	; (800180c <phase+0x1bc>)
 800173a:	4835      	ldr	r0, [pc, #212]	; (8001810 <phase+0x1c0>)
 800173c:	f004 fb3a 	bl	8005db4 <siprintf>
 8001740:	4602      	mov	r2, r0
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <phase+0x1c4>)
 8001744:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		//delta = bemfB - bemfSum;
		break;
 8001746:	e059      	b.n	80017fc <phase+0x1ac>

	case 4: //BH-AL
		ENABLE_B;
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <phase+0x1b4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <phase+0x1b4>)
 800174e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001752:	6213      	str	r3, [r2, #32]
		ENABLE_A;
 8001754:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <phase+0x1b4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <phase+0x1b4>)
 800175a:	f043 0305 	orr.w	r3, r3, #5
 800175e:	6213      	str	r3, [r2, #32]
		DISABLE_C;
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <phase+0x1b4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <phase+0x1b4>)
 8001766:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 800176a:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_A, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	4825      	ldr	r0, [pc, #148]	; (8001808 <phase+0x1b8>)
 8001772:	f7ff fc07 	bl	8000f84 <outPWM>
		outPWM(&htim1, CHANNEL_B, speed);
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	461a      	mov	r2, r3
 800177a:	2104      	movs	r1, #4
 800177c:	4822      	ldr	r0, [pc, #136]	; (8001808 <phase+0x1b8>)
 800177e:	f7ff fc01 	bl	8000f84 <outPWM>

		//strSize = sprintf((char*)buffer, "STEP: %d BH-AL\r\n", step);
		//HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		//delta = bemfA - bemfSum;
		break;
 8001782:	e03b      	b.n	80017fc <phase+0x1ac>

	case 5: //CH-AL
		ENABLE_C;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <phase+0x1b4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <phase+0x1b4>)
 800178a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800178e:	6213      	str	r3, [r2, #32]
		ENABLE_A;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <phase+0x1b4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <phase+0x1b4>)
 8001796:	f043 0305 	orr.w	r3, r3, #5
 800179a:	6213      	str	r3, [r2, #32]
		DISABLE_B;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <phase+0x1b4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <phase+0x1b4>)
 80017a2:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80017a6:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_A, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	4816      	ldr	r0, [pc, #88]	; (8001808 <phase+0x1b8>)
 80017ae:	f7ff fbe9 	bl	8000f84 <outPWM>
		outPWM(&htim1, CHANNEL_C, speed);
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	461a      	mov	r2, r3
 80017b6:	2108      	movs	r1, #8
 80017b8:	4813      	ldr	r0, [pc, #76]	; (8001808 <phase+0x1b8>)
 80017ba:	f7ff fbe3 	bl	8000f84 <outPWM>

		//strSize = sprintf((char*)buffer, "STEP: %d CH-AL\r\n", step);
		//HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		//delta = bemfC - bemfSum;
		break;
 80017be:	e01d      	b.n	80017fc <phase+0x1ac>

	case 6: //CH-BL
		ENABLE_C;
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <phase+0x1b4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <phase+0x1b4>)
 80017c6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80017ca:	6213      	str	r3, [r2, #32]
		ENABLE_B;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <phase+0x1b4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <phase+0x1b4>)
 80017d2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80017d6:	6213      	str	r3, [r2, #32]
		DISABLE_A;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <phase+0x1b4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <phase+0x1b4>)
 80017de:	f023 0305 	bic.w	r3, r3, #5
 80017e2:	6213      	str	r3, [r2, #32]

		outPWM(&htim1, CHANNEL_B, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2104      	movs	r1, #4
 80017e8:	4807      	ldr	r0, [pc, #28]	; (8001808 <phase+0x1b8>)
 80017ea:	f7ff fbcb 	bl	8000f84 <outPWM>
		outPWM(&htim1, CHANNEL_C, speed);
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	461a      	mov	r2, r3
 80017f2:	2108      	movs	r1, #8
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <phase+0x1b8>)
 80017f6:	f7ff fbc5 	bl	8000f84 <outPWM>

		//strSize = sprintf((char*)buffer, "STEP: %d CH-BL\r\n", step);
		//HAL_UART_Transmit(&huart1, buffer, strSize, 100);
		//delta = bemfB - bemfSum;
		break;
 80017fa:	bf00      	nop
	}
	//HAL_Delay(100);
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40012c00 	.word	0x40012c00
 8001808:	200003c4 	.word	0x200003c4
 800180c:	080075b0 	.word	0x080075b0
 8001810:	20000204 	.word	0x20000204
 8001814:	200002cc 	.word	0x200002cc

08001818 <ZeroCross>:

bool ZeroCross(int step){
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	switch(step){
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	2b05      	cmp	r3, #5
 8001826:	d84b      	bhi.n	80018c0 <ZeroCross+0xa8>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <ZeroCross+0x18>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	08001849 	.word	0x08001849
 8001834:	0800185d 	.word	0x0800185d
 8001838:	08001871 	.word	0x08001871
 800183c:	08001885 	.word	0x08001885
 8001840:	08001899 	.word	0x08001899
 8001844:	080018ad 	.word	0x080018ad
	case 1:
		return (adcVal[ADC_CHANNEL_VC] < adcVal[ADC_CHANNEL_VN] ? true : false); //PHASE C FALLING
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <ZeroCross+0xb4>)
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <ZeroCross+0xb4>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	bf34      	ite	cc
 8001854:	2301      	movcc	r3, #1
 8001856:	2300      	movcs	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e032      	b.n	80018c2 <ZeroCross+0xaa>
		break;

	case 2:
		return (adcVal[ADC_CHANNEL_VB] > adcVal[ADC_CHANNEL_VN] ? true : false); //PHASE B RISING
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <ZeroCross+0xb4>)
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <ZeroCross+0xb4>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	bf8c      	ite	hi
 8001868:	2301      	movhi	r3, #1
 800186a:	2300      	movls	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	e028      	b.n	80018c2 <ZeroCross+0xaa>
		break;

	case 3:
		return (adcVal[ADC_CHANNEL_VA] < adcVal[ADC_CHANNEL_VN] ? true : false); //PHASE A FALLING
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <ZeroCross+0xb4>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <ZeroCross+0xb4>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	bf34      	ite	cc
 800187c:	2301      	movcc	r3, #1
 800187e:	2300      	movcs	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	e01e      	b.n	80018c2 <ZeroCross+0xaa>
		break;

	case 4:
		return (adcVal[ADC_CHANNEL_VC] > adcVal[ADC_CHANNEL_VN] ? true : false); //PHASE C RISING
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <ZeroCross+0xb4>)
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <ZeroCross+0xb4>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	bf8c      	ite	hi
 8001890:	2301      	movhi	r3, #1
 8001892:	2300      	movls	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	e014      	b.n	80018c2 <ZeroCross+0xaa>
		break;

	case 5:
		return (adcVal[ADC_CHANNEL_VB] < adcVal[ADC_CHANNEL_VN] ? true : false); //PHASE B FALLING
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <ZeroCross+0xb4>)
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <ZeroCross+0xb4>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	bf34      	ite	cc
 80018a4:	2301      	movcc	r3, #1
 80018a6:	2300      	movcs	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	e00a      	b.n	80018c2 <ZeroCross+0xaa>
		break;

	case 6:
		return (adcVal[ADC_CHANNEL_VA] > adcVal[ADC_CHANNEL_VN] ? true : false); //PHASE A RISING
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <ZeroCross+0xb4>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <ZeroCross+0xb4>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	bf8c      	ite	hi
 80018b8:	2301      	movhi	r3, #1
 80018ba:	2300      	movls	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	e000      	b.n	80018c2 <ZeroCross+0xaa>
		break;
	}
	return false;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	200003b0 	.word	0x200003b0

080018d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	//if(!ADCDataStatus) ADCDataStatus = true;
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_TIM_IC_CaptureCallback>:
		}
		++x;
	}*/
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	static uint32_t Count_Freq1;
	static uint32_t Count_Freq2;

	static bool Freq_State;

	if(htim->Instance == TIM2){
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f4:	f040 808e 	bne.w	8001a14 <HAL_TIM_IC_CaptureCallback+0x130>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7f1b      	ldrb	r3, [r3, #28]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d161      	bne.n	80019c4 <HAL_TIM_IC_CaptureCallback+0xe0>
			//Count_RisingEdge = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
			Count_RisingEdge = TIM2->CCR1;
 8001900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	4a45      	ldr	r2, [pc, #276]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001908:	6013      	str	r3, [r2, #0]

			if(Freq_State == 0){
 800190a:	4b45      	ldr	r3, [pc, #276]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	f083 0301 	eor.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <HAL_TIM_IC_CaptureCallback+0x44>
				Freq_State = 1;
 8001918:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
				Count_Freq1 = Count_RisingEdge;
 800191e:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a40      	ldr	r2, [pc, #256]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e056      	b.n	80019d6 <HAL_TIM_IC_CaptureCallback+0xf2>
			}
			else if(Freq_State == 1){
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d052      	beq.n	80019d6 <HAL_TIM_IC_CaptureCallback+0xf2>
				Freq_State = 0;
 8001930:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
				Count_Freq2 = Count_RisingEdge;
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <HAL_TIM_IC_CaptureCallback+0x144>)
 800193c:	6013      	str	r3, [r2, #0]
				if(Count_Freq2 > Count_Freq1){
 800193e:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d945      	bls.n	80019d6 <HAL_TIM_IC_CaptureCallback+0xf2>
					Frequency = (float)(1 / (((float)Count_Freq2 - (float)Count_Freq1) / 1000) * 1000); //in Hz;
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_TIM_IC_CaptureCallback+0x144>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f950 	bl	8000bf4 <__aeabi_ui2f>
 8001954:	4604      	mov	r4, r0
 8001956:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f94a 	bl	8000bf4 <__aeabi_ui2f>
 8001960:	4603      	mov	r3, r0
 8001962:	4619      	mov	r1, r3
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff f893 	bl	8000a90 <__aeabi_fsub>
 800196a:	4603      	mov	r3, r0
 800196c:	492f      	ldr	r1, [pc, #188]	; (8001a2c <HAL_TIM_IC_CaptureCallback+0x148>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fa4c 	bl	8000e0c <__aeabi_fdiv>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800197c:	f7ff fa46 	bl	8000e0c <__aeabi_fdiv>
 8001980:	4603      	mov	r3, r0
 8001982:	492a      	ldr	r1, [pc, #168]	; (8001a2c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f98d 	bl	8000ca4 <__aeabi_fmul>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001990:	601a      	str	r2, [r3, #0]
					//Frequency = Frequency * 1000; //Convert to Hz
					strSize = sprintf((char*)buffer, "Freq: %f\r\n", Frequency);
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fd46 	bl	8000428 <__aeabi_f2d>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	461a      	mov	r2, r3
 80019a2:	4623      	mov	r3, r4
 80019a4:	4923      	ldr	r1, [pc, #140]	; (8001a34 <HAL_TIM_IC_CaptureCallback+0x150>)
 80019a6:	4824      	ldr	r0, [pc, #144]	; (8001a38 <HAL_TIM_IC_CaptureCallback+0x154>)
 80019a8:	f004 fa04 	bl	8005db4 <siprintf>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_TIM_IC_CaptureCallback+0x158>)
 80019b0:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_TIM_IC_CaptureCallback+0x158>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2364      	movs	r3, #100	; 0x64
 80019ba:	491f      	ldr	r1, [pc, #124]	; (8001a38 <HAL_TIM_IC_CaptureCallback+0x154>)
 80019bc:	4820      	ldr	r0, [pc, #128]	; (8001a40 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80019be:	f003 fbba 	bl	8005136 <HAL_UART_Transmit>
 80019c2:	e008      	b.n	80019d6 <HAL_TIM_IC_CaptureCallback+0xf2>
				}
			}
		}

		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7f1b      	ldrb	r3, [r3, #28]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d104      	bne.n	80019d6 <HAL_TIM_IC_CaptureCallback+0xf2>
			Count_FallingEdge = TIM2->CCR2;
 80019cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_TIM_IC_CaptureCallback+0x160>)
 80019d4:	6013      	str	r3, [r2, #0]
		}

		if(Count_FallingEdge > Count_RisingEdge){
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_TIM_IC_CaptureCallback+0x160>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x138>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d918      	bls.n	8001a14 <HAL_TIM_IC_CaptureCallback+0x130>
			Input_DutyCycle = Count_FallingEdge - Count_RisingEdge;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_TIM_IC_CaptureCallback+0x160>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x138>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_TIM_IC_CaptureCallback+0x164>)
 80019ee:	6013      	str	r3, [r2, #0]
			strSize = sprintf((char*)buffer, "Duty Cycle: %lu\r\n", Input_DutyCycle);
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_TIM_IC_CaptureCallback+0x164>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4915      	ldr	r1, [pc, #84]	; (8001a4c <HAL_TIM_IC_CaptureCallback+0x168>)
 80019f8:	480f      	ldr	r0, [pc, #60]	; (8001a38 <HAL_TIM_IC_CaptureCallback+0x154>)
 80019fa:	f004 f9db 	bl	8005db4 <siprintf>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_TIM_IC_CaptureCallback+0x158>)
 8001a02:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_TIM_IC_CaptureCallback+0x158>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	2364      	movs	r3, #100	; 0x64
 8001a0c:	490a      	ldr	r1, [pc, #40]	; (8001a38 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a0e:	480c      	ldr	r0, [pc, #48]	; (8001a40 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001a10:	f003 fb91 	bl	8005136 <HAL_UART_Transmit>
			//Count_RisingEdge = 0;
			//Count_FallingEdge = 0;
		}
	}
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	200002d0 	.word	0x200002d0
 8001a20:	200002d4 	.word	0x200002d4
 8001a24:	200002d8 	.word	0x200002d8
 8001a28:	200002dc 	.word	0x200002dc
 8001a2c:	447a0000 	.word	0x447a0000
 8001a30:	20000200 	.word	0x20000200
 8001a34:	080075c4 	.word	0x080075c4
 8001a38:	20000204 	.word	0x20000204
 8001a3c:	200002cc 	.word	0x200002cc
 8001a40:	2000032c 	.word	0x2000032c
 8001a44:	200002e0 	.word	0x200002e0
 8001a48:	200001fc 	.word	0x200001fc
 8001a4c:	080075d0 	.word	0x080075d0

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6193      	str	r3, [r2, #24]
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_MspInit+0x60>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_MspInit+0x60>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000

08001ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <HAL_ADC_MspInit+0xbc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d149      	bne.n	8001b74 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_ADC_MspInit+0xc0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_ADC_MspInit+0xc0>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_ADC_MspInit+0xc0>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_ADC_MspInit+0xc0>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <HAL_ADC_MspInit+0xc0>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_ADC_MspInit+0xc0>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b10:	230f      	movs	r3, #15
 8001b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b14:	2303      	movs	r3, #3
 8001b16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4819      	ldr	r0, [pc, #100]	; (8001b84 <HAL_ADC_MspInit+0xc4>)
 8001b20:	f001 f9da 	bl	8002ed8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b26:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_ADC_MspInit+0xcc>)
 8001b28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b4e:	2220      	movs	r2, #32
 8001b50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b5a:	f000 ffcf 	bl	8002afc <HAL_DMA_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b64:	f7ff ff74 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b6c:	621a      	str	r2, [r3, #32]
 8001b6e:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_ADC_MspInit+0xc8>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40012400 	.word	0x40012400
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010800 	.word	0x40010800
 8001b88:	2000036c 	.word	0x2000036c
 8001b8c:	40020008 	.word	0x40020008

08001b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a2c      	ldr	r2, [pc, #176]	; (8001c5c <HAL_TIM_Base_MspInit+0xcc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d10c      	bne.n	8001bca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_TIM_Base_MspInit+0xd0>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a2a      	ldr	r2, [pc, #168]	; (8001c60 <HAL_TIM_Base_MspInit+0xd0>)
 8001bb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_TIM_Base_MspInit+0xd0>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bc8:	e043      	b.n	8001c52 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd2:	d13e      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_TIM_Base_MspInit+0xd0>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <HAL_TIM_Base_MspInit+0xd0>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	61d3      	str	r3, [r2, #28]
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <HAL_TIM_Base_MspInit+0xd0>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_TIM_Base_MspInit+0xd0>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_TIM_Base_MspInit+0xd0>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_TIM_Base_MspInit+0xd0>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4812      	ldr	r0, [pc, #72]	; (8001c64 <HAL_TIM_Base_MspInit+0xd4>)
 8001c1a:	f001 f95d 	bl	8002ed8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_TIM_Base_MspInit+0xd8>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_TIM_Base_MspInit+0xd8>)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	201c      	movs	r0, #28
 8001c48:	f000 ff21 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c4c:	201c      	movs	r0, #28
 8001c4e:	f000 ff3a 	bl	8002ac6 <HAL_NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	40010000 	.word	0x40010000

08001c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <HAL_TIM_MspPostInit+0xb0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d142      	bne.n	8001d12 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_TIM_MspPostInit+0xb4>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <HAL_TIM_MspPostInit+0xb4>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_TIM_MspPostInit+0xb4>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <HAL_TIM_MspPostInit+0xb4>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_TIM_MspPostInit+0xb4>)
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_TIM_MspPostInit+0xb4>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001cbc:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4814      	ldr	r0, [pc, #80]	; (8001d24 <HAL_TIM_MspPostInit+0xb8>)
 8001cd2:	f001 f901 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480f      	ldr	r0, [pc, #60]	; (8001d28 <HAL_TIM_MspPostInit+0xbc>)
 8001cea:	f001 f8f5 	bl	8002ed8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_TIM_MspPostInit+0xc0>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_TIM_MspPostInit+0xc0>)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40012c00 	.word	0x40012c00
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010800 	.word	0x40010800
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40010000 	.word	0x40010000

08001d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_UART_MspInit+0xa4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d13d      	bne.n	8001dcc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_UART_MspInit+0xa8>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <HAL_UART_MspInit+0xa8>)
 8001d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_UART_MspInit+0xa8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_UART_MspInit+0xa8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <HAL_UART_MspInit+0xa8>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_UART_MspInit+0xa8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d80:	2340      	movs	r3, #64	; 0x40
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4812      	ldr	r0, [pc, #72]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001d94:	f001 f8a0 	bl	8002ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	480c      	ldr	r0, [pc, #48]	; (8001ddc <HAL_UART_MspInit+0xac>)
 8001dac:	f001 f894 	bl	8002ed8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_UART_MspInit+0xb0>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_UART_MspInit+0xb0>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010c00 	.word	0x40010c00
 8001de0:	40010000 	.word	0x40010000

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <HardFault_Handler+0x4>

08001df6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <BusFault_Handler+0x4>

08001e02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <UsageFault_Handler+0x4>

08001e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e30:	f000 f8ec 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <DMA1_Channel1_IRQHandler+0x10>)
 8001e3e:	f000 ff17 	bl	8002c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2000036c 	.word	0x2000036c

08001e4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <TIM2_IRQHandler+0x10>)
 8001e52:	f002 f86f 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000408 	.word	0x20000408

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f003 fb0e 	bl	80054b0 <__errno>
 8001e94:	4602      	mov	r2, r0
 8001e96:	230c      	movs	r3, #12
 8001e98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20005000 	.word	0x20005000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	200002e4 	.word	0x200002e4
 8001ec8:	20000450 	.word	0x20000450

08001ecc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <SystemInit+0x5c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <SystemInit+0x5c>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <SystemInit+0x5c>)
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4911      	ldr	r1, [pc, #68]	; (8001f28 <SystemInit+0x5c>)
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <SystemInit+0x60>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <SystemInit+0x5c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <SystemInit+0x5c>)
 8001eee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <SystemInit+0x5c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <SystemInit+0x5c>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <SystemInit+0x5c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <SystemInit+0x5c>)
 8001f0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f0e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SystemInit+0x5c>)
 8001f12:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f16:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SystemInit+0x64>)
 8001f1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f1e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	f8ff0000 	.word	0xf8ff0000
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f36:	e003      	b.n	8001f40 <LoopCopyDataInit>

08001f38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f3e:	3104      	adds	r1, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f40:	480a      	ldr	r0, [pc, #40]	; (8001f6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f48:	d3f6      	bcc.n	8001f38 <CopyDataInit>
  ldr r2, =_sbss
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f4c:	e002      	b.n	8001f54 <LoopFillZerobss>

08001f4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f50:	f842 3b04 	str.w	r3, [r2], #4

08001f54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f58:	d3f9      	bcc.n	8001f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f5a:	f7ff ffb7 	bl	8001ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f003 faad 	bl	80054bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f62:	f7ff f847 	bl	8000ff4 <main>
  bx lr
 8001f66:	4770      	bx	lr
  ldr r3, =_sidata
 8001f68:	08007888 	.word	0x08007888
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f70:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001f74:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001f78:	20000450 	.word	0x20000450

08001f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC1_2_IRQHandler>
	...

08001f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_Init+0x28>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_Init+0x28>)
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 fd71 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f808 	bl	8001fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9c:	f7ff fd5e 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_InitTick+0x54>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x58>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fd89 	bl	8002ae2 <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00e      	b.n	8001ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d80a      	bhi.n	8001ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f000 fd51 	bl	8002a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_InitTick+0x5c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000004 	.word	0x20000004
 8002004:	2000000c 	.word	0x2000000c
 8002008:	20000008 	.word	0x20000008

0800200c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_IncTick+0x1c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_IncTick+0x20>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a03      	ldr	r2, [pc, #12]	; (800202c <HAL_IncTick+0x20>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	2000000c 	.word	0x2000000c
 800202c:	20000448 	.word	0x20000448

08002030 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b02      	ldr	r3, [pc, #8]	; (8002040 <HAL_GetTick+0x10>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	20000448 	.word	0x20000448

08002044 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0be      	b.n	80021e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fd1c 	bl	8001ac0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 faed 	bl	8002668 <ADC_ConversionStop_Disable>
 800208e:	4603      	mov	r3, r0
 8002090:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8099 	bne.w	80021d2 <HAL_ADC_Init+0x18e>
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8095 	bne.w	80021d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020b0:	f023 0302 	bic.w	r3, r3, #2
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7b1b      	ldrb	r3, [r3, #12]
 80020ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020dc:	d003      	beq.n	80020e6 <HAL_ADC_Init+0xa2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_ADC_Init+0xa8>
 80020e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ea:	e000      	b.n	80020ee <HAL_ADC_Init+0xaa>
 80020ec:	2300      	movs	r3, #0
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7d1b      	ldrb	r3, [r3, #20]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d119      	bne.n	8002130 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7b1b      	ldrb	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	3b01      	subs	r3, #1
 800210a:	035a      	lsls	r2, r3, #13
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	e00b      	b.n	8002130 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	f043 0220 	orr.w	r2, r3, #32
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	4b28      	ldr	r3, [pc, #160]	; (80021ec <HAL_ADC_Init+0x1a8>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	430b      	orrs	r3, r1
 8002156:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002160:	d003      	beq.n	800216a <HAL_ADC_Init+0x126>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d104      	bne.n	8002174 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	3b01      	subs	r3, #1
 8002170:	051b      	lsls	r3, r3, #20
 8002172:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	430a      	orrs	r2, r1
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_ADC_Init+0x1ac>)
 8002190:	4013      	ands	r3, r2
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	d10b      	bne.n	80021b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021ae:	e018      	b.n	80021e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	f023 0312 	bic.w	r3, r3, #18
 80021b8:	f043 0210 	orr.w	r2, r3, #16
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	f043 0201 	orr.w	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d0:	e007      	b.n	80021e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	ffe1f7fd 	.word	0xffe1f7fd
 80021f0:	ff1f0efe 	.word	0xff1f0efe

080021f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a64      	ldr	r2, [pc, #400]	; (800239c <HAL_ADC_Start_DMA+0x1a8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d004      	beq.n	8002218 <HAL_ADC_Start_DMA+0x24>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a63      	ldr	r2, [pc, #396]	; (80023a0 <HAL_ADC_Start_DMA+0x1ac>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d106      	bne.n	8002226 <HAL_ADC_Start_DMA+0x32>
 8002218:	4b60      	ldr	r3, [pc, #384]	; (800239c <HAL_ADC_Start_DMA+0x1a8>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 80b3 	bne.w	800238c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_Start_DMA+0x40>
 8002230:	2302      	movs	r3, #2
 8002232:	e0ae      	b.n	8002392 <HAL_ADC_Start_DMA+0x19e>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f9c1 	bl	80025c4 <ADC_Enable>
 8002242:	4603      	mov	r3, r0
 8002244:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 809a 	bne.w	8002382 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a4e      	ldr	r2, [pc, #312]	; (80023a0 <HAL_ADC_Start_DMA+0x1ac>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d105      	bne.n	8002278 <HAL_ADC_Start_DMA+0x84>
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <HAL_ADC_Start_DMA+0x1a8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d115      	bne.n	80022a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228e:	2b00      	cmp	r3, #0
 8002290:	d026      	beq.n	80022e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800229a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022a2:	e01d      	b.n	80022e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a39      	ldr	r2, [pc, #228]	; (800239c <HAL_ADC_Start_DMA+0x1a8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d004      	beq.n	80022c4 <HAL_ADC_Start_DMA+0xd0>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a38      	ldr	r2, [pc, #224]	; (80023a0 <HAL_ADC_Start_DMA+0x1ac>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10d      	bne.n	80022e0 <HAL_ADC_Start_DMA+0xec>
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_ADC_Start_DMA+0x1a8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	f023 0206 	bic.w	r2, r3, #6
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80022f8:	e002      	b.n	8002300 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <HAL_ADC_Start_DMA+0x1b0>)
 800230e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_ADC_Start_DMA+0x1b4>)
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_ADC_Start_DMA+0x1b8>)
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0202 	mvn.w	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002338:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a18      	ldr	r0, [r3, #32]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	334c      	adds	r3, #76	; 0x4c
 8002344:	4619      	mov	r1, r3
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f000 fc31 	bl	8002bb0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002358:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800235c:	d108      	bne.n	8002370 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800236c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800236e:	e00f      	b.n	8002390 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800237e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002380:	e006      	b.n	8002390 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800238a:	e001      	b.n	8002390 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002390:	7dfb      	ldrb	r3, [r7, #23]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40012400 	.word	0x40012400
 80023a0:	40012800 	.word	0x40012800
 80023a4:	080026dd 	.word	0x080026dd
 80023a8:	08002759 	.word	0x08002759
 80023ac:	08002775 	.word	0x08002775

080023b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x20>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e0dc      	b.n	80025ae <HAL_ADC_ConfigChannel+0x1da>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b06      	cmp	r3, #6
 8002402:	d81c      	bhi.n	800243e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	3b05      	subs	r3, #5
 8002416:	221f      	movs	r2, #31
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	4019      	ands	r1, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b05      	subs	r3, #5
 8002430:	fa00 f203 	lsl.w	r2, r0, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	635a      	str	r2, [r3, #52]	; 0x34
 800243c:	e03c      	b.n	80024b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d81c      	bhi.n	8002480 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b23      	subs	r3, #35	; 0x23
 8002458:	221f      	movs	r2, #31
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	4019      	ands	r1, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	3b23      	subs	r3, #35	; 0x23
 8002472:	fa00 f203 	lsl.w	r2, r0, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	631a      	str	r2, [r3, #48]	; 0x30
 800247e:	e01b      	b.n	80024b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b41      	subs	r3, #65	; 0x41
 8002492:	221f      	movs	r2, #31
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	4019      	ands	r1, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	3b41      	subs	r3, #65	; 0x41
 80024ac:	fa00 f203 	lsl.w	r2, r0, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	d91c      	bls.n	80024fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68d9      	ldr	r1, [r3, #12]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	3b1e      	subs	r3, #30
 80024d2:	2207      	movs	r2, #7
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	4019      	ands	r1, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6898      	ldr	r0, [r3, #8]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	fa00 f203 	lsl.w	r2, r0, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	e019      	b.n	800252e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6919      	ldr	r1, [r3, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	2207      	movs	r2, #7
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	4019      	ands	r1, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6898      	ldr	r0, [r3, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	fa00 f203 	lsl.w	r2, r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b10      	cmp	r3, #16
 8002534:	d003      	beq.n	800253e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800253a:	2b11      	cmp	r3, #17
 800253c:	d132      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d125      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d126      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002564:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b10      	cmp	r3, #16
 800256c:	d11a      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	0c9a      	lsrs	r2, r3, #18
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002584:	e002      	b.n	800258c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3b01      	subs	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x1b2>
 8002592:	e007      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	40012400 	.word	0x40012400
 80025bc:	20000004 	.word	0x20000004
 80025c0:	431bde83 	.word	0x431bde83

080025c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d039      	beq.n	8002656 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <ADC_Enable+0x9c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <ADC_Enable+0xa0>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	0c9b      	lsrs	r3, r3, #18
 80025fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002600:	e002      	b.n	8002608 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	3b01      	subs	r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f9      	bne.n	8002602 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800260e:	f7ff fd0f 	bl	8002030 <HAL_GetTick>
 8002612:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002614:	e018      	b.n	8002648 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002616:	f7ff fd0b 	bl	8002030 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d911      	bls.n	8002648 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f043 0210 	orr.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e007      	b.n	8002658 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d1df      	bne.n	8002616 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000004 	.word	0x20000004
 8002664:	431bde83 	.word	0x431bde83

08002668 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d127      	bne.n	80026d2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002692:	f7ff fccd 	bl	8002030 <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002698:	e014      	b.n	80026c4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800269a:	f7ff fcc9 	bl	8002030 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d90d      	bls.n	80026c4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e007      	b.n	80026d4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d0e3      	beq.n	800269a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d127      	bne.n	8002746 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800270c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002710:	d115      	bne.n	800273e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002716:	2b00      	cmp	r3, #0
 8002718:	d111      	bne.n	800273e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d105      	bne.n	800273e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f7ff f8c6 	bl	80018d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002744:	e004      	b.n	8002750 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff fe22 	bl	80023b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff fe11 	bl	80023c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e086      	b.n	80028d4 <HAL_ADCEx_Calibration_Start+0x12c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ff4a 	bl	8002668 <ADC_ConversionStop_Disable>
 80027d4:	4603      	mov	r3, r0
 80027d6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d175      	bne.n	80028ca <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027e6:	f023 0302 	bic.w	r3, r3, #2
 80027ea:	f043 0202 	orr.w	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80027f2:	4b3a      	ldr	r3, [pc, #232]	; (80028dc <HAL_ADCEx_Calibration_Start+0x134>)
 80027f4:	681c      	ldr	r4, [r3, #0]
 80027f6:	2002      	movs	r0, #2
 80027f8:	f001 f9b2 	bl	8003b60 <HAL_RCCEx_GetPeriphCLKFreq>
 80027fc:	4603      	mov	r3, r0
 80027fe:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002802:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002804:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002806:	e002      	b.n	800280e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3b01      	subs	r3, #1
 800280c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f9      	bne.n	8002808 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fed5 	bl	80025c4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0208 	orr.w	r2, r2, #8
 8002828:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800282a:	f7ff fc01 	bl	8002030 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002830:	e014      	b.n	800285c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002832:	f7ff fbfd 	bl	8002030 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b0a      	cmp	r3, #10
 800283e:	d90d      	bls.n	800285c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f023 0312 	bic.w	r3, r3, #18
 8002848:	f043 0210 	orr.w	r2, r3, #16
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e03b      	b.n	80028d4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e3      	bne.n	8002832 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0204 	orr.w	r2, r2, #4
 8002878:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800287a:	f7ff fbd9 	bl	8002030 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002880:	e014      	b.n	80028ac <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002882:	f7ff fbd5 	bl	8002030 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b0a      	cmp	r3, #10
 800288e:	d90d      	bls.n	80028ac <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f023 0312 	bic.w	r3, r3, #18
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e013      	b.n	80028d4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e3      	bne.n	8002882 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}
 80028dc:	20000004 	.word	0x20000004

080028e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800290c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60d3      	str	r3, [r2, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <__NVIC_GetPriorityGrouping+0x18>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 0307 	and.w	r3, r3, #7
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	2b00      	cmp	r3, #0
 8002954:	db0b      	blt.n	800296e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4906      	ldr	r1, [pc, #24]	; (8002978 <__NVIC_EnableIRQ+0x34>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2001      	movs	r0, #1
 8002966:	fa00 f202 	lsl.w	r2, r0, r2
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	; (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf28      	it	cs
 80029ee:	2304      	movcs	r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d902      	bls.n	8002a00 <NVIC_EncodePriority+0x30>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	e000      	b.n	8002a02 <NVIC_EncodePriority+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	4313      	orrs	r3, r2
         );
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a44:	d301      	bcc.n	8002a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00f      	b.n	8002a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <SysTick_Config+0x40>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a52:	210f      	movs	r1, #15
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f7ff ff90 	bl	800297c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <SysTick_Config+0x40>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <SysTick_Config+0x40>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	e000e010 	.word	0xe000e010

08002a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ff2d 	bl	80028e0 <__NVIC_SetPriorityGrouping>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa0:	f7ff ff42 	bl	8002928 <__NVIC_GetPriorityGrouping>
 8002aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff ff90 	bl	80029d0 <NVIC_EncodePriority>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff5f 	bl	800297c <__NVIC_SetPriority>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff35 	bl	8002944 <__NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffa2 	bl	8002a34 <SysTick_Config>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e043      	b.n	8002b9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_DMA_Init+0xa8>)
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <HAL_DMA_Init+0xac>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	009a      	lsls	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_DMA_Init+0xb0>)
 8002b2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	bffdfff8 	.word	0xbffdfff8
 8002ba8:	cccccccd 	.word	0xcccccccd
 8002bac:	40020000 	.word	0x40020000

08002bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_DMA_Start_IT+0x20>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e04a      	b.n	8002c66 <HAL_DMA_Start_IT+0xb6>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d13a      	bne.n	8002c58 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f938 	bl	8002e7c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 020e 	orr.w	r2, r2, #14
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e00f      	b.n	8002c46 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0204 	bic.w	r2, r2, #4
 8002c34:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 020a 	orr.w	r2, r2, #10
 8002c44:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e005      	b.n	8002c64 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
 8002c62:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d04f      	beq.n	8002d38 <HAL_DMA_IRQHandler+0xc8>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04a      	beq.n	8002d38 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0204 	bic.w	r2, r2, #4
 8002cbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a66      	ldr	r2, [pc, #408]	; (8002e60 <HAL_DMA_IRQHandler+0x1f0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d029      	beq.n	8002d1e <HAL_DMA_IRQHandler+0xae>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a65      	ldr	r2, [pc, #404]	; (8002e64 <HAL_DMA_IRQHandler+0x1f4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <HAL_DMA_IRQHandler+0xaa>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a63      	ldr	r2, [pc, #396]	; (8002e68 <HAL_DMA_IRQHandler+0x1f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01a      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xa4>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a62      	ldr	r2, [pc, #392]	; (8002e6c <HAL_DMA_IRQHandler+0x1fc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d012      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x9e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a60      	ldr	r2, [pc, #384]	; (8002e70 <HAL_DMA_IRQHandler+0x200>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00a      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x98>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a5f      	ldr	r2, [pc, #380]	; (8002e74 <HAL_DMA_IRQHandler+0x204>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d102      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x92>
 8002cfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d00:	e00e      	b.n	8002d20 <HAL_DMA_IRQHandler+0xb0>
 8002d02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d06:	e00b      	b.n	8002d20 <HAL_DMA_IRQHandler+0xb0>
 8002d08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d0c:	e008      	b.n	8002d20 <HAL_DMA_IRQHandler+0xb0>
 8002d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d12:	e005      	b.n	8002d20 <HAL_DMA_IRQHandler+0xb0>
 8002d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d18:	e002      	b.n	8002d20 <HAL_DMA_IRQHandler+0xb0>
 8002d1a:	2340      	movs	r3, #64	; 0x40
 8002d1c:	e000      	b.n	8002d20 <HAL_DMA_IRQHandler+0xb0>
 8002d1e:	2304      	movs	r3, #4
 8002d20:	4a55      	ldr	r2, [pc, #340]	; (8002e78 <HAL_DMA_IRQHandler+0x208>)
 8002d22:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8094 	beq.w	8002e56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d36:	e08e      	b.n	8002e56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d056      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x186>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d051      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 020a 	bic.w	r2, r2, #10
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <HAL_DMA_IRQHandler+0x1f0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d029      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x166>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a37      	ldr	r2, [pc, #220]	; (8002e64 <HAL_DMA_IRQHandler+0x1f4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x162>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a35      	ldr	r2, [pc, #212]	; (8002e68 <HAL_DMA_IRQHandler+0x1f8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01a      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x15c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a34      	ldr	r2, [pc, #208]	; (8002e6c <HAL_DMA_IRQHandler+0x1fc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d012      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x156>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a32      	ldr	r2, [pc, #200]	; (8002e70 <HAL_DMA_IRQHandler+0x200>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00a      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x150>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <HAL_DMA_IRQHandler+0x204>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d102      	bne.n	8002dba <HAL_DMA_IRQHandler+0x14a>
 8002db4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002db8:	e00e      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x168>
 8002dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dbe:	e00b      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x168>
 8002dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc4:	e008      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x168>
 8002dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dca:	e005      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x168>
 8002dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd0:	e002      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x168>
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	e000      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x168>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <HAL_DMA_IRQHandler+0x208>)
 8002dda:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d034      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002df4:	e02f      	b.n	8002e56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d028      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x1e8>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 020e 	bic.w	r2, r2, #14
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
    }
  }
  return;
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
}
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40020008 	.word	0x40020008
 8002e64:	4002001c 	.word	0x4002001c
 8002e68:	40020030 	.word	0x40020030
 8002e6c:	40020044 	.word	0x40020044
 8002e70:	40020058 	.word	0x40020058
 8002e74:	4002006c 	.word	0x4002006c
 8002e78:	40020000 	.word	0x40020000

08002e7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	2101      	movs	r1, #1
 8002e94:	fa01 f202 	lsl.w	r2, r1, r2
 8002e98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d108      	bne.n	8002ebc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eba:	e007      	b.n	8002ecc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b08b      	sub	sp, #44	; 0x2c
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eea:	e127      	b.n	800313c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002eec:	2201      	movs	r2, #1
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f040 8116 	bne.w	8003136 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b12      	cmp	r3, #18
 8002f10:	d034      	beq.n	8002f7c <HAL_GPIO_Init+0xa4>
 8002f12:	2b12      	cmp	r3, #18
 8002f14:	d80d      	bhi.n	8002f32 <HAL_GPIO_Init+0x5a>
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d02b      	beq.n	8002f72 <HAL_GPIO_Init+0x9a>
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d804      	bhi.n	8002f28 <HAL_GPIO_Init+0x50>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d031      	beq.n	8002f86 <HAL_GPIO_Init+0xae>
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d01c      	beq.n	8002f60 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f26:	e048      	b.n	8002fba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d043      	beq.n	8002fb4 <HAL_GPIO_Init+0xdc>
 8002f2c:	2b11      	cmp	r3, #17
 8002f2e:	d01b      	beq.n	8002f68 <HAL_GPIO_Init+0x90>
          break;
 8002f30:	e043      	b.n	8002fba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f32:	4a89      	ldr	r2, [pc, #548]	; (8003158 <HAL_GPIO_Init+0x280>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d026      	beq.n	8002f86 <HAL_GPIO_Init+0xae>
 8002f38:	4a87      	ldr	r2, [pc, #540]	; (8003158 <HAL_GPIO_Init+0x280>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d806      	bhi.n	8002f4c <HAL_GPIO_Init+0x74>
 8002f3e:	4a87      	ldr	r2, [pc, #540]	; (800315c <HAL_GPIO_Init+0x284>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d020      	beq.n	8002f86 <HAL_GPIO_Init+0xae>
 8002f44:	4a86      	ldr	r2, [pc, #536]	; (8003160 <HAL_GPIO_Init+0x288>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01d      	beq.n	8002f86 <HAL_GPIO_Init+0xae>
          break;
 8002f4a:	e036      	b.n	8002fba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f4c:	4a85      	ldr	r2, [pc, #532]	; (8003164 <HAL_GPIO_Init+0x28c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0xae>
 8002f52:	4a85      	ldr	r2, [pc, #532]	; (8003168 <HAL_GPIO_Init+0x290>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d016      	beq.n	8002f86 <HAL_GPIO_Init+0xae>
 8002f58:	4a84      	ldr	r2, [pc, #528]	; (800316c <HAL_GPIO_Init+0x294>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_GPIO_Init+0xae>
          break;
 8002f5e:	e02c      	b.n	8002fba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	623b      	str	r3, [r7, #32]
          break;
 8002f66:	e028      	b.n	8002fba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	623b      	str	r3, [r7, #32]
          break;
 8002f70:	e023      	b.n	8002fba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	3308      	adds	r3, #8
 8002f78:	623b      	str	r3, [r7, #32]
          break;
 8002f7a:	e01e      	b.n	8002fba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	330c      	adds	r3, #12
 8002f82:	623b      	str	r3, [r7, #32]
          break;
 8002f84:	e019      	b.n	8002fba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	623b      	str	r3, [r7, #32]
          break;
 8002f92:	e012      	b.n	8002fba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	611a      	str	r2, [r3, #16]
          break;
 8002fa6:	e008      	b.n	8002fba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa8:	2308      	movs	r3, #8
 8002faa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	615a      	str	r2, [r3, #20]
          break;
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
          break;
 8002fb8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2bff      	cmp	r3, #255	; 0xff
 8002fbe:	d801      	bhi.n	8002fc4 <HAL_GPIO_Init+0xec>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	e001      	b.n	8002fc8 <HAL_GPIO_Init+0xf0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2bff      	cmp	r3, #255	; 0xff
 8002fce:	d802      	bhi.n	8002fd6 <HAL_GPIO_Init+0xfe>
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	e002      	b.n	8002fdc <HAL_GPIO_Init+0x104>
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	3b08      	subs	r3, #8
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	210f      	movs	r1, #15
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	401a      	ands	r2, r3
 8002fee:	6a39      	ldr	r1, [r7, #32]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8096 	beq.w	8003136 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800300a:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_GPIO_Init+0x298>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	4a58      	ldr	r2, [pc, #352]	; (8003170 <HAL_GPIO_Init+0x298>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6193      	str	r3, [r2, #24]
 8003016:	4b56      	ldr	r3, [pc, #344]	; (8003170 <HAL_GPIO_Init+0x298>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003022:	4a54      	ldr	r2, [pc, #336]	; (8003174 <HAL_GPIO_Init+0x29c>)
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	3302      	adds	r3, #2
 800302a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4013      	ands	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4b      	ldr	r2, [pc, #300]	; (8003178 <HAL_GPIO_Init+0x2a0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_GPIO_Init+0x19e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4a      	ldr	r2, [pc, #296]	; (800317c <HAL_GPIO_Init+0x2a4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00d      	beq.n	8003072 <HAL_GPIO_Init+0x19a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a49      	ldr	r2, [pc, #292]	; (8003180 <HAL_GPIO_Init+0x2a8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d007      	beq.n	800306e <HAL_GPIO_Init+0x196>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a48      	ldr	r2, [pc, #288]	; (8003184 <HAL_GPIO_Init+0x2ac>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <HAL_GPIO_Init+0x192>
 8003066:	2303      	movs	r3, #3
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x1a0>
 800306a:	2304      	movs	r3, #4
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x1a0>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x1a0>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x1a0>
 8003076:	2300      	movs	r3, #0
 8003078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003088:	493a      	ldr	r1, [pc, #232]	; (8003174 <HAL_GPIO_Init+0x29c>)
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4938      	ldr	r1, [pc, #224]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
 80030ae:	e006      	b.n	80030be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030b0:	4b35      	ldr	r3, [pc, #212]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	4933      	ldr	r1, [pc, #204]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030ca:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	492e      	ldr	r1, [pc, #184]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
 80030d6:	e006      	b.n	80030e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030d8:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	43db      	mvns	r3, r3
 80030e0:	4929      	ldr	r1, [pc, #164]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030f2:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	4924      	ldr	r1, [pc, #144]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
 80030fe:	e006      	b.n	800310e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	43db      	mvns	r3, r3
 8003108:	491f      	ldr	r1, [pc, #124]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 800310a:	4013      	ands	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	491a      	ldr	r1, [pc, #104]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	60cb      	str	r3, [r1, #12]
 8003126:	e006      	b.n	8003136 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003128:	4b17      	ldr	r3, [pc, #92]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	43db      	mvns	r3, r3
 8003130:	4915      	ldr	r1, [pc, #84]	; (8003188 <HAL_GPIO_Init+0x2b0>)
 8003132:	4013      	ands	r3, r2
 8003134:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	3301      	adds	r3, #1
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	f47f aed0 	bne.w	8002eec <HAL_GPIO_Init+0x14>
  }
}
 800314c:	bf00      	nop
 800314e:	372c      	adds	r7, #44	; 0x2c
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	10210000 	.word	0x10210000
 800315c:	10110000 	.word	0x10110000
 8003160:	10120000 	.word	0x10120000
 8003164:	10310000 	.word	0x10310000
 8003168:	10320000 	.word	0x10320000
 800316c:	10220000 	.word	0x10220000
 8003170:	40021000 	.word	0x40021000
 8003174:	40010000 	.word	0x40010000
 8003178:	40010800 	.word	0x40010800
 800317c:	40010c00 	.word	0x40010c00
 8003180:	40011000 	.word	0x40011000
 8003184:	40011400 	.word	0x40011400
 8003188:	40010400 	.word	0x40010400

0800318c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
 8003198:	4613      	mov	r3, r2
 800319a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800319c:	787b      	ldrb	r3, [r7, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031a8:	e003      	b.n	80031b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	041a      	lsls	r2, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	611a      	str	r2, [r3, #16]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e26c      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8087 	beq.w	80032ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031dc:	4b92      	ldr	r3, [pc, #584]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d00c      	beq.n	8003202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031e8:	4b8f      	ldr	r3, [pc, #572]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d112      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
 80031f4:	4b8c      	ldr	r3, [pc, #560]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d10b      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	4b89      	ldr	r3, [pc, #548]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x12c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d168      	bne.n	80032e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e246      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x76>
 8003224:	4b80      	ldr	r3, [pc, #512]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a7f      	ldr	r2, [pc, #508]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e02e      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b7b      	ldr	r3, [pc, #492]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7a      	ldr	r2, [pc, #488]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b78      	ldr	r3, [pc, #480]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a77      	ldr	r2, [pc, #476]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0xbc>
 800325e:	4b72      	ldr	r3, [pc, #456]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a71      	ldr	r2, [pc, #452]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b6f      	ldr	r3, [pc, #444]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6e      	ldr	r2, [pc, #440]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003278:	4b6b      	ldr	r3, [pc, #428]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6a      	ldr	r2, [pc, #424]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b68      	ldr	r3, [pc, #416]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a67      	ldr	r2, [pc, #412]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe feca 	bl	8002030 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe fec6 	bl	8002030 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1fa      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b5d      	ldr	r3, [pc, #372]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe4>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe feb6 	bl	8002030 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe feb2 	bl	8002030 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1e6      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b53      	ldr	r3, [pc, #332]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x10c>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f6:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003302:	4b49      	ldr	r3, [pc, #292]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x18c>
 800330e:	4b46      	ldr	r3, [pc, #280]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x176>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1ba      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4939      	ldr	r1, [pc, #228]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b36      	ldr	r3, [pc, #216]	; (800342c <HAL_RCC_OscConfig+0x270>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fe fe6b 	bl	8002030 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335e:	f7fe fe67 	bl	8002030 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e19b      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4927      	ldr	r1, [pc, #156]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <HAL_RCC_OscConfig+0x270>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fe4a 	bl	8002030 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fe fe46 	bl	8002030 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e17a      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d03a      	beq.n	8003440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d019      	beq.n	8003406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_RCC_OscConfig+0x274>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d8:	f7fe fe2a 	bl	8002030 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fe fe26 	bl	8002030 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e15a      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033fe:	2001      	movs	r0, #1
 8003400:	f000 fada 	bl	80039b8 <RCC_Delay>
 8003404:	e01c      	b.n	8003440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003406:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_RCC_OscConfig+0x274>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fe fe10 	bl	8002030 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003412:	e00f      	b.n	8003434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003414:	f7fe fe0c 	bl	8002030 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d908      	bls.n	8003434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e140      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	42420000 	.word	0x42420000
 8003430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	4b9e      	ldr	r3, [pc, #632]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e9      	bne.n	8003414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a6 	beq.w	800359a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003452:	4b97      	ldr	r3, [pc, #604]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	4b94      	ldr	r3, [pc, #592]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4a93      	ldr	r2, [pc, #588]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	61d3      	str	r3, [r2, #28]
 800346a:	4b91      	ldr	r3, [pc, #580]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	4b8e      	ldr	r3, [pc, #568]	; (80036b4 <HAL_RCC_OscConfig+0x4f8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d118      	bne.n	80034b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003486:	4b8b      	ldr	r3, [pc, #556]	; (80036b4 <HAL_RCC_OscConfig+0x4f8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a8a      	ldr	r2, [pc, #552]	; (80036b4 <HAL_RCC_OscConfig+0x4f8>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003492:	f7fe fdcd 	bl	8002030 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349a:	f7fe fdc9 	bl	8002030 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	; 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0fd      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	4b81      	ldr	r3, [pc, #516]	; (80036b4 <HAL_RCC_OscConfig+0x4f8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x312>
 80034c0:	4b7b      	ldr	r3, [pc, #492]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a7a      	ldr	r2, [pc, #488]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	e02d      	b.n	800352a <HAL_RCC_OscConfig+0x36e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x334>
 80034d6:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4a75      	ldr	r2, [pc, #468]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6213      	str	r3, [r2, #32]
 80034e2:	4b73      	ldr	r3, [pc, #460]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a72      	ldr	r2, [pc, #456]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	6213      	str	r3, [r2, #32]
 80034ee:	e01c      	b.n	800352a <HAL_RCC_OscConfig+0x36e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b05      	cmp	r3, #5
 80034f6:	d10c      	bne.n	8003512 <HAL_RCC_OscConfig+0x356>
 80034f8:	4b6d      	ldr	r3, [pc, #436]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4a6c      	ldr	r2, [pc, #432]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	6213      	str	r3, [r2, #32]
 8003504:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4a69      	ldr	r2, [pc, #420]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6213      	str	r3, [r2, #32]
 8003510:	e00b      	b.n	800352a <HAL_RCC_OscConfig+0x36e>
 8003512:	4b67      	ldr	r3, [pc, #412]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4a66      	ldr	r2, [pc, #408]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6213      	str	r3, [r2, #32]
 800351e:	4b64      	ldr	r3, [pc, #400]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a63      	ldr	r2, [pc, #396]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d015      	beq.n	800355e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fe fd7d 	bl	8002030 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003538:	e00a      	b.n	8003550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fe fd79 	bl	8002030 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0ab      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003550:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0ee      	beq.n	800353a <HAL_RCC_OscConfig+0x37e>
 800355c:	e014      	b.n	8003588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355e:	f7fe fd67 	bl	8002030 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fe fd63 	bl	8002030 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e095      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357c:	4b4c      	ldr	r3, [pc, #304]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ee      	bne.n	8003566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d105      	bne.n	800359a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4b48      	ldr	r3, [pc, #288]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	4a47      	ldr	r2, [pc, #284]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8081 	beq.w	80036a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d061      	beq.n	8003674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d146      	bne.n	8003646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_OscConfig+0x4fc>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7fe fd37 	bl	8002030 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fe fd33 	bl	8002030 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e067      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f0      	bne.n	80035c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d108      	bne.n	8003600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ee:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	492d      	ldr	r1, [pc, #180]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a19      	ldr	r1, [r3, #32]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	430b      	orrs	r3, r1
 8003612:	4927      	ldr	r1, [pc, #156]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <HAL_RCC_OscConfig+0x4fc>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7fe fd07 	bl	8002030 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7fe fd03 	bl	8002030 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e037      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003638:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x46a>
 8003644:	e02f      	b.n	80036a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_RCC_OscConfig+0x4fc>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe fcf0 	bl	8002030 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe fcec 	bl	8002030 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e020      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x498>
 8003672:	e018      	b.n	80036a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e013      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_OscConfig+0x4f4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	429a      	cmp	r2, r3
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40007000 	.word	0x40007000
 80036b8:	42420060 	.word	0x42420060

080036bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0d0      	b.n	8003872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b6a      	ldr	r3, [pc, #424]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d910      	bls.n	8003700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b67      	ldr	r3, [pc, #412]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	4965      	ldr	r1, [pc, #404]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b63      	ldr	r3, [pc, #396]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0b8      	b.n	8003872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d020      	beq.n	800374e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003718:	4b59      	ldr	r3, [pc, #356]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a58      	ldr	r2, [pc, #352]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a52      	ldr	r2, [pc, #328]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800373a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800373c:	4b50      	ldr	r3, [pc, #320]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	494d      	ldr	r1, [pc, #308]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d040      	beq.n	80037dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	4b47      	ldr	r3, [pc, #284]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d115      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e07f      	b.n	8003872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377a:	4b41      	ldr	r3, [pc, #260]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e073      	b.n	8003872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e06b      	b.n	8003872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379a:	4b39      	ldr	r3, [pc, #228]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f023 0203 	bic.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4936      	ldr	r1, [pc, #216]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ac:	f7fe fc40 	bl	8002030 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b4:	f7fe fc3c 	bl	8002030 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e053      	b.n	8003872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 020c 	and.w	r2, r3, #12
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1eb      	bne.n	80037b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d210      	bcs.n	800380c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 0207 	bic.w	r2, r3, #7
 80037f2:	4922      	ldr	r1, [pc, #136]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e032      	b.n	8003872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003818:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4916      	ldr	r1, [pc, #88]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	490e      	ldr	r1, [pc, #56]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800384a:	f000 f821 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 800384e:	4601      	mov	r1, r0
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	5cd3      	ldrb	r3, [r2, r3]
 800385e:	fa21 f303 	lsr.w	r3, r1, r3
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <HAL_RCC_ClockConfig+0x1cc>)
 8003864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_RCC_ClockConfig+0x1d0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fb9e 	bl	8001fac <HAL_InitTick>

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40022000 	.word	0x40022000
 8003880:	40021000 	.word	0x40021000
 8003884:	0800760c 	.word	0x0800760c
 8003888:	20000004 	.word	0x20000004
 800388c:	20000008 	.word	0x20000008

08003890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003890:	b490      	push	{r4, r7}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003896:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003898:	1d3c      	adds	r4, r7, #4
 800389a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800389c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x40>
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x46>
 80038ce:	e02d      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038d2:	623b      	str	r3, [r7, #32]
      break;
 80038d4:	e02d      	b.n	8003932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	0c9b      	lsrs	r3, r3, #18
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038e2:	4413      	add	r3, r2
 80038e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038f4:	4b14      	ldr	r3, [pc, #80]	; (8003948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0c5b      	lsrs	r3, r3, #17
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003902:	4413      	add	r3, r2
 8003904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	4a0f      	ldr	r2, [pc, #60]	; (800394c <HAL_RCC_GetSysClockFreq+0xbc>)
 800390e:	fb02 f203 	mul.w	r2, r2, r3
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	e004      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003920:	fb02 f303 	mul.w	r3, r2, r3
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	623b      	str	r3, [r7, #32]
      break;
 800392a:	e002      	b.n	8003932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_RCC_GetSysClockFreq+0xbc>)
 800392e:	623b      	str	r3, [r7, #32]
      break;
 8003930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003932:	6a3b      	ldr	r3, [r7, #32]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3728      	adds	r7, #40	; 0x28
 8003938:	46bd      	mov	sp, r7
 800393a:	bc90      	pop	{r4, r7}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	080075e4 	.word	0x080075e4
 8003944:	080075f4 	.word	0x080075f4
 8003948:	40021000 	.word	0x40021000
 800394c:	007a1200 	.word	0x007a1200
 8003950:	003d0900 	.word	0x003d0900

08003954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003958:	4b02      	ldr	r3, [pc, #8]	; (8003964 <HAL_RCC_GetHCLKFreq+0x10>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr
 8003964:	20000004 	.word	0x20000004

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800396c:	f7ff fff2 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 8003970:	4601      	mov	r1, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4a03      	ldr	r2, [pc, #12]	; (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	0800761c 	.word	0x0800761c

08003990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003994:	f7ff ffde 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 8003998:	4601      	mov	r1, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	0adb      	lsrs	r3, r3, #11
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4a03      	ldr	r2, [pc, #12]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a6:	5cd3      	ldrb	r3, [r2, r3]
 80039a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	0800761c 	.word	0x0800761c

080039b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <RCC_Delay+0x34>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <RCC_Delay+0x38>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	0a5b      	lsrs	r3, r3, #9
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039d4:	bf00      	nop
  }
  while (Delay --);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1e5a      	subs	r2, r3, #1
 80039da:	60fa      	str	r2, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f9      	bne.n	80039d4 <RCC_Delay+0x1c>
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000004 	.word	0x20000004
 80039f0:	10624dd3 	.word	0x10624dd3

080039f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d07d      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a14:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10d      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a20:	4b4c      	ldr	r3, [pc, #304]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	4a4b      	ldr	r2, [pc, #300]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	61d3      	str	r3, [r2, #28]
 8003a2c:	4b49      	ldr	r3, [pc, #292]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d118      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a48:	4b43      	ldr	r3, [pc, #268]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a42      	ldr	r2, [pc, #264]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a54:	f7fe faec 	bl	8002030 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	e008      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5c:	f7fe fae8 	bl	8002030 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e06d      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b3a      	ldr	r3, [pc, #232]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a7a:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02e      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d027      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a98:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aa2:	4b2e      	ldr	r3, [pc, #184]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aae:	4a29      	ldr	r2, [pc, #164]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d014      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fe fab7 	bl	8002030 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fe fab3 	bl	8002030 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e036      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0ee      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4917      	ldr	r1, [pc, #92]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d105      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	490b      	ldr	r1, [pc, #44]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	4904      	ldr	r1, [pc, #16]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42420440 	.word	0x42420440

08003b60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b08d      	sub	sp, #52	; 0x34
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b68:	4b55      	ldr	r3, [pc, #340]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003b6a:	f107 040c 	add.w	r4, r7, #12
 8003b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b74:	4b53      	ldr	r3, [pc, #332]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b82:	2300      	movs	r3, #0
 8003b84:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d07f      	beq.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d002      	beq.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d048      	beq.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b9c:	e08b      	b.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ba4:	4b48      	ldr	r3, [pc, #288]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d07f      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	0c9b      	lsrs	r3, r3, #18
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bc2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d018      	beq.n	8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bce:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	0c5b      	lsrs	r3, r3, #17
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003bdc:	4413      	add	r3, r2
 8003bde:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bee:	4a37      	ldr	r2, [pc, #220]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfe:	e004      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c0a:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c16:	d102      	bne.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c1c:	e048      	b.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4a2c      	ldr	r2, [pc, #176]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c2c:	e040      	b.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3e:	d108      	bne.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c50:	e01f      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003c6a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c70:	e00f      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7c:	d11a      	bne.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d014      	beq.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003c8a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c90:	e010      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003c92:	e00f      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c94:	f7ff fe7c 	bl	8003990 <HAL_RCC_GetPCLK2Freq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0b9b      	lsrs	r3, r3, #14
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cae:	e002      	b.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003cb0:	bf00      	nop
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003cb4:	bf00      	nop
    }
  }
  return (frequency);
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3734      	adds	r7, #52	; 0x34
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd90      	pop	{r4, r7, pc}
 8003cc0:	080075f8 	.word	0x080075f8
 8003cc4:	08007608 	.word	0x08007608
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	007a1200 	.word	0x007a1200
 8003cd0:	003d0900 	.word	0x003d0900
 8003cd4:	aaaaaaab 	.word	0xaaaaaaab

08003cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e01d      	b.n	8003d26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd ff46 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 fc94 	bl	8004644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e01d      	b.n	8003d7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f815 	bl	8003d84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f000 fc69 	bl	8004644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2201      	movs	r2, #1
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f85d 	bl	8004e6a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <HAL_TIM_PWM_Start+0x60>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d107      	bne.n	8003dca <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d007      	beq.n	8003dec <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40012c00 	.word	0x40012c00

08003dfc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e01d      	b.n	8003e4a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f815 	bl	8003e52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f000 fc02 	bl	8004644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b0c      	cmp	r3, #12
 8003e72:	d841      	bhi.n	8003ef8 <HAL_TIM_IC_Start_IT+0x94>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <HAL_TIM_IC_Start_IT+0x18>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003eb1 	.word	0x08003eb1
 8003e80:	08003ef9 	.word	0x08003ef9
 8003e84:	08003ef9 	.word	0x08003ef9
 8003e88:	08003ef9 	.word	0x08003ef9
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ef9 	.word	0x08003ef9
 8003e94:	08003ef9 	.word	0x08003ef9
 8003e98:	08003ef9 	.word	0x08003ef9
 8003e9c:	08003ed5 	.word	0x08003ed5
 8003ea0:	08003ef9 	.word	0x08003ef9
 8003ea4:	08003ef9 	.word	0x08003ef9
 8003ea8:	08003ef9 	.word	0x08003ef9
 8003eac:	08003ee7 	.word	0x08003ee7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0202 	orr.w	r2, r2, #2
 8003ebe:	60da      	str	r2, [r3, #12]
      break;
 8003ec0:	e01b      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0204 	orr.w	r2, r2, #4
 8003ed0:	60da      	str	r2, [r3, #12]
      break;
 8003ed2:	e012      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0208 	orr.w	r2, r2, #8
 8003ee2:	60da      	str	r2, [r3, #12]
      break;
 8003ee4:	e009      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0210 	orr.w	r2, r2, #16
 8003ef4:	60da      	str	r2, [r3, #12]
      break;
 8003ef6:	e000      	b.n	8003efa <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003ef8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2201      	movs	r2, #1
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 ffb1 	bl	8004e6a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d007      	beq.n	8003f2a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d122      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d11b      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0202 	mvn.w	r2, #2
 8003f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd fcb4 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fb44 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fb4a 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d122      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d11b      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0204 	mvn.w	r2, #4
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd fc8a 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fb1a 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fb20 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d122      	bne.n	8004038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d11b      	bne.n	8004038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0208 	mvn.w	r2, #8
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2204      	movs	r2, #4
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd fc60 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 faf0 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 faf6 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b10      	cmp	r3, #16
 8004044:	d122      	bne.n	800408c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b10      	cmp	r3, #16
 8004052:	d11b      	bne.n	800408c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0210 	mvn.w	r2, #16
 800405c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2208      	movs	r2, #8
 8004062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fd fc36 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fac6 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 facc 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10e      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d107      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0201 	mvn.w	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 faa1 	bl	80045fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	d10e      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b80      	cmp	r3, #128	; 0x80
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 ffaf 	bl	8005042 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d107      	bne.n	8004110 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa90 	bl	8004630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b20      	cmp	r3, #32
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b20      	cmp	r3, #32
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0220 	mvn.w	r2, #32
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 ff7a 	bl	8005030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_TIM_IC_ConfigChannel+0x1a>
 800415a:	2302      	movs	r3, #2
 800415c:	e08a      	b.n	8004274 <HAL_TIM_IC_ConfigChannel+0x130>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6819      	ldr	r1, [r3, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f000 fcce 	bl	8004b24 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 020c 	bic.w	r2, r2, #12
 8004196:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6999      	ldr	r1, [r3, #24]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	619a      	str	r2, [r3, #24]
 80041aa:	e05a      	b.n	8004262 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d11c      	bne.n	80041ec <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6819      	ldr	r1, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f000 fd37 	bl	8004c34 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699a      	ldr	r2, [r3, #24]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6999      	ldr	r1, [r3, #24]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	021a      	lsls	r2, r3, #8
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	619a      	str	r2, [r3, #24]
 80041ea:	e03a      	b.n	8004262 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d11b      	bne.n	800422a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f000 fd82 	bl	8004d0a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 020c 	bic.w	r2, r2, #12
 8004214:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69d9      	ldr	r1, [r3, #28]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	61da      	str	r2, [r3, #28]
 8004228:	e01b      	b.n	8004262 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f000 fda1 	bl	8004d80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800424c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69d9      	ldr	r1, [r3, #28]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	021a      	lsls	r2, r3, #8
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004292:	2302      	movs	r3, #2
 8004294:	e0b4      	b.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	f200 809f 	bhi.w	80043ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042e9 	.word	0x080042e9
 80042b8:	080043ed 	.word	0x080043ed
 80042bc:	080043ed 	.word	0x080043ed
 80042c0:	080043ed 	.word	0x080043ed
 80042c4:	08004329 	.word	0x08004329
 80042c8:	080043ed 	.word	0x080043ed
 80042cc:	080043ed 	.word	0x080043ed
 80042d0:	080043ed 	.word	0x080043ed
 80042d4:	0800436b 	.word	0x0800436b
 80042d8:	080043ed 	.word	0x080043ed
 80042dc:	080043ed 	.word	0x080043ed
 80042e0:	080043ed 	.word	0x080043ed
 80042e4:	080043ab 	.word	0x080043ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa0a 	bl	8004708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0208 	orr.w	r2, r2, #8
 8004302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0204 	bic.w	r2, r2, #4
 8004312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6999      	ldr	r1, [r3, #24]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	619a      	str	r2, [r3, #24]
      break;
 8004326:	e062      	b.n	80043ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fa50 	bl	80047d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6999      	ldr	r1, [r3, #24]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	021a      	lsls	r2, r3, #8
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	619a      	str	r2, [r3, #24]
      break;
 8004368:	e041      	b.n	80043ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fa99 	bl	80048a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69da      	ldr	r2, [r3, #28]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0208 	orr.w	r2, r2, #8
 8004384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0204 	bic.w	r2, r2, #4
 8004394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69d9      	ldr	r1, [r3, #28]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	61da      	str	r2, [r3, #28]
      break;
 80043a8:	e021      	b.n	80043ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fae3 	bl	800497c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69d9      	ldr	r1, [r3, #28]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	021a      	lsls	r2, r3, #8
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	61da      	str	r2, [r3, #28]
      break;
 80043ea:	e000      	b.n	80043ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80043ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_TIM_ConfigClockSource+0x18>
 800441c:	2302      	movs	r3, #2
 800441e:	e0a6      	b.n	800456e <HAL_TIM_ConfigClockSource+0x166>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800443e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004446:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d067      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x120>
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d80b      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x6c>
 800445c:	2b10      	cmp	r3, #16
 800445e:	d073      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0x140>
 8004460:	2b10      	cmp	r3, #16
 8004462:	d802      	bhi.n	800446a <HAL_TIM_ConfigClockSource+0x62>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d06f      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004468:	e078      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800446a:	2b20      	cmp	r3, #32
 800446c:	d06c      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0x140>
 800446e:	2b30      	cmp	r3, #48	; 0x30
 8004470:	d06a      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004472:	e073      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004474:	2b70      	cmp	r3, #112	; 0x70
 8004476:	d00d      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0x8c>
 8004478:	2b70      	cmp	r3, #112	; 0x70
 800447a:	d804      	bhi.n	8004486 <HAL_TIM_ConfigClockSource+0x7e>
 800447c:	2b50      	cmp	r3, #80	; 0x50
 800447e:	d033      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0xe0>
 8004480:	2b60      	cmp	r3, #96	; 0x60
 8004482:	d041      	beq.n	8004508 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004484:	e06a      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448a:	d066      	beq.n	800455a <HAL_TIM_ConfigClockSource+0x152>
 800448c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004490:	d017      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004492:	e063      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6899      	ldr	r1, [r3, #8]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f000 fcc2 	bl	8004e2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	609a      	str	r2, [r3, #8]
      break;
 80044c0:	e04c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6899      	ldr	r1, [r3, #8]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f000 fcab 	bl	8004e2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e4:	609a      	str	r2, [r3, #8]
      break;
 80044e6:	e039      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f000 fb6f 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2150      	movs	r1, #80	; 0x50
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fc79 	bl	8004df8 <TIM_ITRx_SetConfig>
      break;
 8004506:	e029      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	461a      	mov	r2, r3
 8004516:	f000 fbc9 	bl	8004cac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2160      	movs	r1, #96	; 0x60
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fc69 	bl	8004df8 <TIM_ITRx_SetConfig>
      break;
 8004526:	e019      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6859      	ldr	r1, [r3, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	461a      	mov	r2, r3
 8004536:	f000 fb4f 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2140      	movs	r1, #64	; 0x40
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fc59 	bl	8004df8 <TIM_ITRx_SetConfig>
      break;
 8004546:	e009      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f000 fc50 	bl	8004df8 <TIM_ITRx_SetConfig>
      break;
 8004558:	e000      	b.n	800455c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800455a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_TIM_SlaveConfigSynchro+0x18>
 800458a:	2302      	movs	r3, #2
 800458c:	e031      	b.n	80045f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800459e:	6839      	ldr	r1, [r7, #0]
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fa39 	bl	8004a18 <TIM_SlaveTimer_SetConfig>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e018      	b.n	80045f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ce:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045de:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
	...

08004644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a29      	ldr	r2, [pc, #164]	; (80046fc <TIM_Base_SetConfig+0xb8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00b      	beq.n	8004674 <TIM_Base_SetConfig+0x30>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d007      	beq.n	8004674 <TIM_Base_SetConfig+0x30>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a26      	ldr	r2, [pc, #152]	; (8004700 <TIM_Base_SetConfig+0xbc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_Base_SetConfig+0x30>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a25      	ldr	r2, [pc, #148]	; (8004704 <TIM_Base_SetConfig+0xc0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d108      	bne.n	8004686 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <TIM_Base_SetConfig+0xb8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0x62>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x62>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <TIM_Base_SetConfig+0xbc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <TIM_Base_SetConfig+0xc0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a07      	ldr	r2, [pc, #28]	; (80046fc <TIM_Base_SetConfig+0xb8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	615a      	str	r2, [r3, #20]
}
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800

08004708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 0302 	bic.w	r3, r3, #2
 8004750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <TIM_OC1_SetConfig+0xc8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10c      	bne.n	800477e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f023 0308 	bic.w	r3, r3, #8
 800476a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <TIM_OC1_SetConfig+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d111      	bne.n	80047aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800478c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	621a      	str	r2, [r3, #32]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00

080047d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0210 	bic.w	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 0320 	bic.w	r3, r3, #32
 800481e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <TIM_OC2_SetConfig+0xd0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d10d      	bne.n	8004850 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800483a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <TIM_OC2_SetConfig+0xd0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d113      	bne.n	8004880 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800485e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00

080048a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0303 	bic.w	r3, r3, #3
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <TIM_OC3_SetConfig+0xd0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d10d      	bne.n	8004922 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800490c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <TIM_OC3_SetConfig+0xd0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d113      	bne.n	8004952 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	621a      	str	r2, [r3, #32]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40012c00 	.word	0x40012c00

0800497c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	031b      	lsls	r3, r3, #12
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <TIM_OC4_SetConfig+0x98>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d109      	bne.n	80049f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	019b      	lsls	r3, r3, #6
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	40012c00 	.word	0x40012c00

08004a18 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b30      	cmp	r3, #48	; 0x30
 8004a5c:	d05c      	beq.n	8004b18 <TIM_SlaveTimer_SetConfig+0x100>
 8004a5e:	2b30      	cmp	r3, #48	; 0x30
 8004a60:	d806      	bhi.n	8004a70 <TIM_SlaveTimer_SetConfig+0x58>
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d058      	beq.n	8004b18 <TIM_SlaveTimer_SetConfig+0x100>
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d056      	beq.n	8004b18 <TIM_SlaveTimer_SetConfig+0x100>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d054      	beq.n	8004b18 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004a6e:	e054      	b.n	8004b1a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004a70:	2b50      	cmp	r3, #80	; 0x50
 8004a72:	d03d      	beq.n	8004af0 <TIM_SlaveTimer_SetConfig+0xd8>
 8004a74:	2b50      	cmp	r3, #80	; 0x50
 8004a76:	d802      	bhi.n	8004a7e <TIM_SlaveTimer_SetConfig+0x66>
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d010      	beq.n	8004a9e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8004a7c:	e04d      	b.n	8004b1a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004a7e:	2b60      	cmp	r3, #96	; 0x60
 8004a80:	d040      	beq.n	8004b04 <TIM_SlaveTimer_SetConfig+0xec>
 8004a82:	2b70      	cmp	r3, #112	; 0x70
 8004a84:	d000      	beq.n	8004a88 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8004a86:	e048      	b.n	8004b1a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68d9      	ldr	r1, [r3, #12]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f000 f9c8 	bl	8004e2c <TIM_ETR_SetConfig>
      break;
 8004a9c:	e03d      	b.n	8004b1a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d101      	bne.n	8004aaa <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e038      	b.n	8004b1c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	621a      	str	r2, [r3, #32]
      break;
 8004aee:	e014      	b.n	8004b1a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	6899      	ldr	r1, [r3, #8]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	461a      	mov	r2, r3
 8004afe:	f000 f86b 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
      break;
 8004b02:	e00a      	b.n	8004b1a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	6899      	ldr	r1, [r3, #8]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	461a      	mov	r2, r3
 8004b12:	f000 f8cb 	bl	8004cac <TIM_TI2_ConfigInputStage>
      break;
 8004b16:	e000      	b.n	8004b1a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8004b18:	bf00      	nop
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0201 	bic.w	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <TIM_TI1_SetConfig+0xa8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00b      	beq.n	8004b6a <TIM_TI1_SetConfig+0x46>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d007      	beq.n	8004b6a <TIM_TI1_SetConfig+0x46>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <TIM_TI1_SetConfig+0xac>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d003      	beq.n	8004b6a <TIM_TI1_SetConfig+0x46>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <TIM_TI1_SetConfig+0xb0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d101      	bne.n	8004b6e <TIM_TI1_SetConfig+0x4a>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <TIM_TI1_SetConfig+0x4c>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e003      	b.n	8004b8e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f023 030a 	bic.w	r3, r3, #10
 8004ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f003 030a 	and.w	r3, r3, #10
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800

08004bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 030a 	bic.w	r3, r3, #10
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0210 	bic.w	r2, r3, #16
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	031b      	lsls	r3, r3, #12
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f023 0210 	bic.w	r2, r3, #16
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	031b      	lsls	r3, r3, #12
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	621a      	str	r2, [r3, #32]
}
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b087      	sub	sp, #28
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	031b      	lsls	r3, r3, #12
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	031b      	lsls	r3, r3, #12
 8004dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr

08004df8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f043 0307 	orr.w	r3, r3, #7
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	609a      	str	r2, [r3, #8]
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	609a      	str	r2, [r3, #8]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b087      	sub	sp, #28
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1a      	ldr	r2, [r3, #32]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	401a      	ands	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1a      	ldr	r2, [r3, #32]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f8c5 	bl	8005054 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d007      	beq.n	8004efc <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e032      	b.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f56:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e03d      	b.n	8005026 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr

08005042 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr

08005054 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2204      	movs	r2, #4
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a1a      	ldr	r2, [r3, #32]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	43db      	mvns	r3, r3
 8005076:	401a      	ands	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e03f      	b.n	800512e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc fe34 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2224      	movs	r2, #36	; 0x24
 80050cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f90b 	bl	80052fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b088      	sub	sp, #32
 800513a:	af02      	add	r7, sp, #8
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	4613      	mov	r3, r2
 8005144:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b20      	cmp	r3, #32
 8005154:	f040 8083 	bne.w	800525e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_UART_Transmit+0x2e>
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e07b      	b.n	8005260 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_UART_Transmit+0x40>
 8005172:	2302      	movs	r3, #2
 8005174:	e074      	b.n	8005260 <HAL_UART_Transmit+0x12a>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2221      	movs	r2, #33	; 0x21
 8005188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800518c:	f7fc ff50 	bl	8002030 <HAL_GetTick>
 8005190:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	88fa      	ldrh	r2, [r7, #6]
 8005196:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	88fa      	ldrh	r2, [r7, #6]
 800519c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800519e:	e042      	b.n	8005226 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b6:	d122      	bne.n	80051fe <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2200      	movs	r2, #0
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f850 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e046      	b.n	8005260 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d103      	bne.n	80051f6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	3302      	adds	r3, #2
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	e017      	b.n	8005226 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	3301      	adds	r3, #1
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	e013      	b.n	8005226 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f82d 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e023      	b.n	8005260 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	60ba      	str	r2, [r7, #8]
 800521e:	781a      	ldrb	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1b7      	bne.n	80051a0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	2140      	movs	r1, #64	; 0x40
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f814 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e00a      	b.n	8005260 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e000      	b.n	8005260 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800525e:	2302      	movs	r3, #2
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005278:	e02c      	b.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d028      	beq.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <UART_WaitOnFlagUntilTimeout+0x30>
 8005288:	f7fc fed2 	bl	8002030 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	429a      	cmp	r2, r3
 8005296:	d21d      	bcs.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e00f      	b.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4013      	ands	r3, r2
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d0c3      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005336:	f023 030c 	bic.w	r3, r3, #12
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	68f9      	ldr	r1, [r7, #12]
 8005340:	430b      	orrs	r3, r1
 8005342:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a52      	ldr	r2, [pc, #328]	; (80054a8 <UART_SetConfig+0x1ac>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d14e      	bne.n	8005402 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fe fb14 	bl	8003990 <HAL_RCC_GetPCLK2Freq>
 8005368:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009a      	lsls	r2, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	4a4a      	ldr	r2, [pc, #296]	; (80054ac <UART_SetConfig+0x1b0>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	0119      	lsls	r1, r3, #4
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009a      	lsls	r2, r3, #2
 8005394:	441a      	add	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a0:	4b42      	ldr	r3, [pc, #264]	; (80054ac <UART_SetConfig+0x1b0>)
 80053a2:	fba3 0302 	umull	r0, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	2064      	movs	r0, #100	; 0x64
 80053aa:	fb00 f303 	mul.w	r3, r0, r3
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	3332      	adds	r3, #50	; 0x32
 80053b4:	4a3d      	ldr	r2, [pc, #244]	; (80054ac <UART_SetConfig+0x1b0>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c0:	4419      	add	r1, r3
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009a      	lsls	r2, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053d8:	4b34      	ldr	r3, [pc, #208]	; (80054ac <UART_SetConfig+0x1b0>)
 80053da:	fba3 0302 	umull	r0, r3, r3, r2
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2064      	movs	r0, #100	; 0x64
 80053e2:	fb00 f303 	mul.w	r3, r0, r3
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	3332      	adds	r3, #50	; 0x32
 80053ec:	4a2f      	ldr	r2, [pc, #188]	; (80054ac <UART_SetConfig+0x1b0>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f003 020f 	and.w	r2, r3, #15
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	440a      	add	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005400:	e04d      	b.n	800549e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005402:	f7fe fab1 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8005406:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009a      	lsls	r2, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	fbb2 f3f3 	udiv	r3, r2, r3
 800541e:	4a23      	ldr	r2, [pc, #140]	; (80054ac <UART_SetConfig+0x1b0>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	0119      	lsls	r1, r3, #4
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009a      	lsls	r2, r3, #2
 8005432:	441a      	add	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	fbb2 f2f3 	udiv	r2, r2, r3
 800543e:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <UART_SetConfig+0x1b0>)
 8005440:	fba3 0302 	umull	r0, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	2064      	movs	r0, #100	; 0x64
 8005448:	fb00 f303 	mul.w	r3, r0, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	3332      	adds	r3, #50	; 0x32
 8005452:	4a16      	ldr	r2, [pc, #88]	; (80054ac <UART_SetConfig+0x1b0>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800545e:	4419      	add	r1, r3
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009a      	lsls	r2, r3, #2
 800546a:	441a      	add	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	fbb2 f2f3 	udiv	r2, r2, r3
 8005476:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <UART_SetConfig+0x1b0>)
 8005478:	fba3 0302 	umull	r0, r3, r3, r2
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	2064      	movs	r0, #100	; 0x64
 8005480:	fb00 f303 	mul.w	r3, r0, r3
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	3332      	adds	r3, #50	; 0x32
 800548a:	4a08      	ldr	r2, [pc, #32]	; (80054ac <UART_SetConfig+0x1b0>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	f003 020f 	and.w	r2, r3, #15
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	440a      	add	r2, r1
 800549c:	609a      	str	r2, [r3, #8]
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40013800 	.word	0x40013800
 80054ac:	51eb851f 	.word	0x51eb851f

080054b0 <__errno>:
 80054b0:	4b01      	ldr	r3, [pc, #4]	; (80054b8 <__errno+0x8>)
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20000010 	.word	0x20000010

080054bc <__libc_init_array>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	2500      	movs	r5, #0
 80054c0:	4e0c      	ldr	r6, [pc, #48]	; (80054f4 <__libc_init_array+0x38>)
 80054c2:	4c0d      	ldr	r4, [pc, #52]	; (80054f8 <__libc_init_array+0x3c>)
 80054c4:	1ba4      	subs	r4, r4, r6
 80054c6:	10a4      	asrs	r4, r4, #2
 80054c8:	42a5      	cmp	r5, r4
 80054ca:	d109      	bne.n	80054e0 <__libc_init_array+0x24>
 80054cc:	f002 f85e 	bl	800758c <_init>
 80054d0:	2500      	movs	r5, #0
 80054d2:	4e0a      	ldr	r6, [pc, #40]	; (80054fc <__libc_init_array+0x40>)
 80054d4:	4c0a      	ldr	r4, [pc, #40]	; (8005500 <__libc_init_array+0x44>)
 80054d6:	1ba4      	subs	r4, r4, r6
 80054d8:	10a4      	asrs	r4, r4, #2
 80054da:	42a5      	cmp	r5, r4
 80054dc:	d105      	bne.n	80054ea <__libc_init_array+0x2e>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054e4:	4798      	blx	r3
 80054e6:	3501      	adds	r5, #1
 80054e8:	e7ee      	b.n	80054c8 <__libc_init_array+0xc>
 80054ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054ee:	4798      	blx	r3
 80054f0:	3501      	adds	r5, #1
 80054f2:	e7f2      	b.n	80054da <__libc_init_array+0x1e>
 80054f4:	08007880 	.word	0x08007880
 80054f8:	08007880 	.word	0x08007880
 80054fc:	08007880 	.word	0x08007880
 8005500:	08007884 	.word	0x08007884

08005504 <memset>:
 8005504:	4603      	mov	r3, r0
 8005506:	4402      	add	r2, r0
 8005508:	4293      	cmp	r3, r2
 800550a:	d100      	bne.n	800550e <memset+0xa>
 800550c:	4770      	bx	lr
 800550e:	f803 1b01 	strb.w	r1, [r3], #1
 8005512:	e7f9      	b.n	8005508 <memset+0x4>

08005514 <__cvt>:
 8005514:	2b00      	cmp	r3, #0
 8005516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551a:	461e      	mov	r6, r3
 800551c:	bfbb      	ittet	lt
 800551e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005522:	461e      	movlt	r6, r3
 8005524:	2300      	movge	r3, #0
 8005526:	232d      	movlt	r3, #45	; 0x2d
 8005528:	b088      	sub	sp, #32
 800552a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800552c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005530:	f027 0720 	bic.w	r7, r7, #32
 8005534:	2f46      	cmp	r7, #70	; 0x46
 8005536:	4614      	mov	r4, r2
 8005538:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800553a:	700b      	strb	r3, [r1, #0]
 800553c:	d004      	beq.n	8005548 <__cvt+0x34>
 800553e:	2f45      	cmp	r7, #69	; 0x45
 8005540:	d100      	bne.n	8005544 <__cvt+0x30>
 8005542:	3501      	adds	r5, #1
 8005544:	2302      	movs	r3, #2
 8005546:	e000      	b.n	800554a <__cvt+0x36>
 8005548:	2303      	movs	r3, #3
 800554a:	aa07      	add	r2, sp, #28
 800554c:	9204      	str	r2, [sp, #16]
 800554e:	aa06      	add	r2, sp, #24
 8005550:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005554:	e9cd 3500 	strd	r3, r5, [sp]
 8005558:	4622      	mov	r2, r4
 800555a:	4633      	mov	r3, r6
 800555c:	f000 fcd8 	bl	8005f10 <_dtoa_r>
 8005560:	2f47      	cmp	r7, #71	; 0x47
 8005562:	4680      	mov	r8, r0
 8005564:	d102      	bne.n	800556c <__cvt+0x58>
 8005566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005568:	07db      	lsls	r3, r3, #31
 800556a:	d526      	bpl.n	80055ba <__cvt+0xa6>
 800556c:	2f46      	cmp	r7, #70	; 0x46
 800556e:	eb08 0905 	add.w	r9, r8, r5
 8005572:	d111      	bne.n	8005598 <__cvt+0x84>
 8005574:	f898 3000 	ldrb.w	r3, [r8]
 8005578:	2b30      	cmp	r3, #48	; 0x30
 800557a:	d10a      	bne.n	8005592 <__cvt+0x7e>
 800557c:	2200      	movs	r2, #0
 800557e:	2300      	movs	r3, #0
 8005580:	4620      	mov	r0, r4
 8005582:	4631      	mov	r1, r6
 8005584:	f7fb fa10 	bl	80009a8 <__aeabi_dcmpeq>
 8005588:	b918      	cbnz	r0, 8005592 <__cvt+0x7e>
 800558a:	f1c5 0501 	rsb	r5, r5, #1
 800558e:	f8ca 5000 	str.w	r5, [sl]
 8005592:	f8da 3000 	ldr.w	r3, [sl]
 8005596:	4499      	add	r9, r3
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	4620      	mov	r0, r4
 800559e:	4631      	mov	r1, r6
 80055a0:	f7fb fa02 	bl	80009a8 <__aeabi_dcmpeq>
 80055a4:	b938      	cbnz	r0, 80055b6 <__cvt+0xa2>
 80055a6:	2230      	movs	r2, #48	; 0x30
 80055a8:	9b07      	ldr	r3, [sp, #28]
 80055aa:	454b      	cmp	r3, r9
 80055ac:	d205      	bcs.n	80055ba <__cvt+0xa6>
 80055ae:	1c59      	adds	r1, r3, #1
 80055b0:	9107      	str	r1, [sp, #28]
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e7f8      	b.n	80055a8 <__cvt+0x94>
 80055b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80055ba:	4640      	mov	r0, r8
 80055bc:	9b07      	ldr	r3, [sp, #28]
 80055be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055c0:	eba3 0308 	sub.w	r3, r3, r8
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	b008      	add	sp, #32
 80055c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080055cc <__exponent>:
 80055cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ce:	2900      	cmp	r1, #0
 80055d0:	bfb4      	ite	lt
 80055d2:	232d      	movlt	r3, #45	; 0x2d
 80055d4:	232b      	movge	r3, #43	; 0x2b
 80055d6:	4604      	mov	r4, r0
 80055d8:	bfb8      	it	lt
 80055da:	4249      	neglt	r1, r1
 80055dc:	2909      	cmp	r1, #9
 80055de:	f804 2b02 	strb.w	r2, [r4], #2
 80055e2:	7043      	strb	r3, [r0, #1]
 80055e4:	dd21      	ble.n	800562a <__exponent+0x5e>
 80055e6:	f10d 0307 	add.w	r3, sp, #7
 80055ea:	461f      	mov	r7, r3
 80055ec:	260a      	movs	r6, #10
 80055ee:	fb91 f5f6 	sdiv	r5, r1, r6
 80055f2:	fb06 1115 	mls	r1, r6, r5, r1
 80055f6:	2d09      	cmp	r5, #9
 80055f8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80055fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005600:	f103 32ff 	add.w	r2, r3, #4294967295
 8005604:	4629      	mov	r1, r5
 8005606:	dc09      	bgt.n	800561c <__exponent+0x50>
 8005608:	3130      	adds	r1, #48	; 0x30
 800560a:	3b02      	subs	r3, #2
 800560c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005610:	42bb      	cmp	r3, r7
 8005612:	4622      	mov	r2, r4
 8005614:	d304      	bcc.n	8005620 <__exponent+0x54>
 8005616:	1a10      	subs	r0, r2, r0
 8005618:	b003      	add	sp, #12
 800561a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561c:	4613      	mov	r3, r2
 800561e:	e7e6      	b.n	80055ee <__exponent+0x22>
 8005620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005624:	f804 2b01 	strb.w	r2, [r4], #1
 8005628:	e7f2      	b.n	8005610 <__exponent+0x44>
 800562a:	2330      	movs	r3, #48	; 0x30
 800562c:	4419      	add	r1, r3
 800562e:	7083      	strb	r3, [r0, #2]
 8005630:	1d02      	adds	r2, r0, #4
 8005632:	70c1      	strb	r1, [r0, #3]
 8005634:	e7ef      	b.n	8005616 <__exponent+0x4a>
	...

08005638 <_printf_float>:
 8005638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	b091      	sub	sp, #68	; 0x44
 800563e:	460c      	mov	r4, r1
 8005640:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005642:	4693      	mov	fp, r2
 8005644:	461e      	mov	r6, r3
 8005646:	4605      	mov	r5, r0
 8005648:	f001 fa16 	bl	8006a78 <_localeconv_r>
 800564c:	6803      	ldr	r3, [r0, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	9309      	str	r3, [sp, #36]	; 0x24
 8005652:	f7fa fd7d 	bl	8000150 <strlen>
 8005656:	2300      	movs	r3, #0
 8005658:	930e      	str	r3, [sp, #56]	; 0x38
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	900a      	str	r0, [sp, #40]	; 0x28
 800565e:	3307      	adds	r3, #7
 8005660:	f023 0307 	bic.w	r3, r3, #7
 8005664:	f103 0208 	add.w	r2, r3, #8
 8005668:	f894 8018 	ldrb.w	r8, [r4, #24]
 800566c:	f8d4 a000 	ldr.w	sl, [r4]
 8005670:	603a      	str	r2, [r7, #0]
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800567a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800567e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005682:	930b      	str	r3, [sp, #44]	; 0x2c
 8005684:	f04f 32ff 	mov.w	r2, #4294967295
 8005688:	4ba6      	ldr	r3, [pc, #664]	; (8005924 <_printf_float+0x2ec>)
 800568a:	4638      	mov	r0, r7
 800568c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800568e:	f7fb f9bd 	bl	8000a0c <__aeabi_dcmpun>
 8005692:	bb68      	cbnz	r0, 80056f0 <_printf_float+0xb8>
 8005694:	f04f 32ff 	mov.w	r2, #4294967295
 8005698:	4ba2      	ldr	r3, [pc, #648]	; (8005924 <_printf_float+0x2ec>)
 800569a:	4638      	mov	r0, r7
 800569c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800569e:	f7fb f997 	bl	80009d0 <__aeabi_dcmple>
 80056a2:	bb28      	cbnz	r0, 80056f0 <_printf_float+0xb8>
 80056a4:	2200      	movs	r2, #0
 80056a6:	2300      	movs	r3, #0
 80056a8:	4638      	mov	r0, r7
 80056aa:	4649      	mov	r1, r9
 80056ac:	f7fb f986 	bl	80009bc <__aeabi_dcmplt>
 80056b0:	b110      	cbz	r0, 80056b8 <_printf_float+0x80>
 80056b2:	232d      	movs	r3, #45	; 0x2d
 80056b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b8:	4f9b      	ldr	r7, [pc, #620]	; (8005928 <_printf_float+0x2f0>)
 80056ba:	4b9c      	ldr	r3, [pc, #624]	; (800592c <_printf_float+0x2f4>)
 80056bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056c0:	bf98      	it	ls
 80056c2:	461f      	movls	r7, r3
 80056c4:	2303      	movs	r3, #3
 80056c6:	f04f 0900 	mov.w	r9, #0
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	f02a 0304 	bic.w	r3, sl, #4
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	9600      	str	r6, [sp, #0]
 80056d4:	465b      	mov	r3, fp
 80056d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80056d8:	4621      	mov	r1, r4
 80056da:	4628      	mov	r0, r5
 80056dc:	f000 f9e2 	bl	8005aa4 <_printf_common>
 80056e0:	3001      	adds	r0, #1
 80056e2:	f040 8090 	bne.w	8005806 <_printf_float+0x1ce>
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ea:	b011      	add	sp, #68	; 0x44
 80056ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f0:	463a      	mov	r2, r7
 80056f2:	464b      	mov	r3, r9
 80056f4:	4638      	mov	r0, r7
 80056f6:	4649      	mov	r1, r9
 80056f8:	f7fb f988 	bl	8000a0c <__aeabi_dcmpun>
 80056fc:	b110      	cbz	r0, 8005704 <_printf_float+0xcc>
 80056fe:	4f8c      	ldr	r7, [pc, #560]	; (8005930 <_printf_float+0x2f8>)
 8005700:	4b8c      	ldr	r3, [pc, #560]	; (8005934 <_printf_float+0x2fc>)
 8005702:	e7db      	b.n	80056bc <_printf_float+0x84>
 8005704:	6863      	ldr	r3, [r4, #4]
 8005706:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800570a:	1c59      	adds	r1, r3, #1
 800570c:	a80d      	add	r0, sp, #52	; 0x34
 800570e:	a90e      	add	r1, sp, #56	; 0x38
 8005710:	d140      	bne.n	8005794 <_printf_float+0x15c>
 8005712:	2306      	movs	r3, #6
 8005714:	6063      	str	r3, [r4, #4]
 8005716:	f04f 0c00 	mov.w	ip, #0
 800571a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800571e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005722:	6863      	ldr	r3, [r4, #4]
 8005724:	6022      	str	r2, [r4, #0]
 8005726:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	463a      	mov	r2, r7
 800572e:	464b      	mov	r3, r9
 8005730:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005734:	4628      	mov	r0, r5
 8005736:	f7ff feed 	bl	8005514 <__cvt>
 800573a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800573e:	2b47      	cmp	r3, #71	; 0x47
 8005740:	4607      	mov	r7, r0
 8005742:	d109      	bne.n	8005758 <_printf_float+0x120>
 8005744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005746:	1cd8      	adds	r0, r3, #3
 8005748:	db02      	blt.n	8005750 <_printf_float+0x118>
 800574a:	6862      	ldr	r2, [r4, #4]
 800574c:	4293      	cmp	r3, r2
 800574e:	dd47      	ble.n	80057e0 <_printf_float+0x1a8>
 8005750:	f1a8 0802 	sub.w	r8, r8, #2
 8005754:	fa5f f888 	uxtb.w	r8, r8
 8005758:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800575c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800575e:	d824      	bhi.n	80057aa <_printf_float+0x172>
 8005760:	3901      	subs	r1, #1
 8005762:	4642      	mov	r2, r8
 8005764:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005768:	910d      	str	r1, [sp, #52]	; 0x34
 800576a:	f7ff ff2f 	bl	80055cc <__exponent>
 800576e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005770:	4681      	mov	r9, r0
 8005772:	1813      	adds	r3, r2, r0
 8005774:	2a01      	cmp	r2, #1
 8005776:	6123      	str	r3, [r4, #16]
 8005778:	dc02      	bgt.n	8005780 <_printf_float+0x148>
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	07d1      	lsls	r1, r2, #31
 800577e:	d501      	bpl.n	8005784 <_printf_float+0x14c>
 8005780:	3301      	adds	r3, #1
 8005782:	6123      	str	r3, [r4, #16]
 8005784:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0a2      	beq.n	80056d2 <_printf_float+0x9a>
 800578c:	232d      	movs	r3, #45	; 0x2d
 800578e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005792:	e79e      	b.n	80056d2 <_printf_float+0x9a>
 8005794:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005798:	f000 816e 	beq.w	8005a78 <_printf_float+0x440>
 800579c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057a0:	d1b9      	bne.n	8005716 <_printf_float+0xde>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1b7      	bne.n	8005716 <_printf_float+0xde>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e7b4      	b.n	8005714 <_printf_float+0xdc>
 80057aa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80057ae:	d119      	bne.n	80057e4 <_printf_float+0x1ac>
 80057b0:	2900      	cmp	r1, #0
 80057b2:	6863      	ldr	r3, [r4, #4]
 80057b4:	dd0c      	ble.n	80057d0 <_printf_float+0x198>
 80057b6:	6121      	str	r1, [r4, #16]
 80057b8:	b913      	cbnz	r3, 80057c0 <_printf_float+0x188>
 80057ba:	6822      	ldr	r2, [r4, #0]
 80057bc:	07d2      	lsls	r2, r2, #31
 80057be:	d502      	bpl.n	80057c6 <_printf_float+0x18e>
 80057c0:	3301      	adds	r3, #1
 80057c2:	440b      	add	r3, r1
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057c8:	f04f 0900 	mov.w	r9, #0
 80057cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80057ce:	e7d9      	b.n	8005784 <_printf_float+0x14c>
 80057d0:	b913      	cbnz	r3, 80057d8 <_printf_float+0x1a0>
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	07d0      	lsls	r0, r2, #31
 80057d6:	d501      	bpl.n	80057dc <_printf_float+0x1a4>
 80057d8:	3302      	adds	r3, #2
 80057da:	e7f3      	b.n	80057c4 <_printf_float+0x18c>
 80057dc:	2301      	movs	r3, #1
 80057de:	e7f1      	b.n	80057c4 <_printf_float+0x18c>
 80057e0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80057e4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80057e8:	4293      	cmp	r3, r2
 80057ea:	db05      	blt.n	80057f8 <_printf_float+0x1c0>
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	6123      	str	r3, [r4, #16]
 80057f0:	07d1      	lsls	r1, r2, #31
 80057f2:	d5e8      	bpl.n	80057c6 <_printf_float+0x18e>
 80057f4:	3301      	adds	r3, #1
 80057f6:	e7e5      	b.n	80057c4 <_printf_float+0x18c>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bfcc      	ite	gt
 80057fc:	2301      	movgt	r3, #1
 80057fe:	f1c3 0302 	rsble	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	e7de      	b.n	80057c4 <_printf_float+0x18c>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	055a      	lsls	r2, r3, #21
 800580a:	d407      	bmi.n	800581c <_printf_float+0x1e4>
 800580c:	6923      	ldr	r3, [r4, #16]
 800580e:	463a      	mov	r2, r7
 8005810:	4659      	mov	r1, fp
 8005812:	4628      	mov	r0, r5
 8005814:	47b0      	blx	r6
 8005816:	3001      	adds	r0, #1
 8005818:	d129      	bne.n	800586e <_printf_float+0x236>
 800581a:	e764      	b.n	80056e6 <_printf_float+0xae>
 800581c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005820:	f240 80d7 	bls.w	80059d2 <_printf_float+0x39a>
 8005824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005828:	2200      	movs	r2, #0
 800582a:	2300      	movs	r3, #0
 800582c:	f7fb f8bc 	bl	80009a8 <__aeabi_dcmpeq>
 8005830:	b388      	cbz	r0, 8005896 <_printf_float+0x25e>
 8005832:	2301      	movs	r3, #1
 8005834:	4a40      	ldr	r2, [pc, #256]	; (8005938 <_printf_float+0x300>)
 8005836:	4659      	mov	r1, fp
 8005838:	4628      	mov	r0, r5
 800583a:	47b0      	blx	r6
 800583c:	3001      	adds	r0, #1
 800583e:	f43f af52 	beq.w	80056e6 <_printf_float+0xae>
 8005842:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005846:	429a      	cmp	r2, r3
 8005848:	db02      	blt.n	8005850 <_printf_float+0x218>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	07d8      	lsls	r0, r3, #31
 800584e:	d50e      	bpl.n	800586e <_printf_float+0x236>
 8005850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005854:	4659      	mov	r1, fp
 8005856:	4628      	mov	r0, r5
 8005858:	47b0      	blx	r6
 800585a:	3001      	adds	r0, #1
 800585c:	f43f af43 	beq.w	80056e6 <_printf_float+0xae>
 8005860:	2700      	movs	r7, #0
 8005862:	f104 081a 	add.w	r8, r4, #26
 8005866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005868:	3b01      	subs	r3, #1
 800586a:	42bb      	cmp	r3, r7
 800586c:	dc09      	bgt.n	8005882 <_printf_float+0x24a>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	079f      	lsls	r7, r3, #30
 8005872:	f100 80fd 	bmi.w	8005a70 <_printf_float+0x438>
 8005876:	68e0      	ldr	r0, [r4, #12]
 8005878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800587a:	4298      	cmp	r0, r3
 800587c:	bfb8      	it	lt
 800587e:	4618      	movlt	r0, r3
 8005880:	e733      	b.n	80056ea <_printf_float+0xb2>
 8005882:	2301      	movs	r3, #1
 8005884:	4642      	mov	r2, r8
 8005886:	4659      	mov	r1, fp
 8005888:	4628      	mov	r0, r5
 800588a:	47b0      	blx	r6
 800588c:	3001      	adds	r0, #1
 800588e:	f43f af2a 	beq.w	80056e6 <_printf_float+0xae>
 8005892:	3701      	adds	r7, #1
 8005894:	e7e7      	b.n	8005866 <_printf_float+0x22e>
 8005896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005898:	2b00      	cmp	r3, #0
 800589a:	dc2b      	bgt.n	80058f4 <_printf_float+0x2bc>
 800589c:	2301      	movs	r3, #1
 800589e:	4a26      	ldr	r2, [pc, #152]	; (8005938 <_printf_float+0x300>)
 80058a0:	4659      	mov	r1, fp
 80058a2:	4628      	mov	r0, r5
 80058a4:	47b0      	blx	r6
 80058a6:	3001      	adds	r0, #1
 80058a8:	f43f af1d 	beq.w	80056e6 <_printf_float+0xae>
 80058ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ae:	b923      	cbnz	r3, 80058ba <_printf_float+0x282>
 80058b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058b2:	b913      	cbnz	r3, 80058ba <_printf_float+0x282>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	07d9      	lsls	r1, r3, #31
 80058b8:	d5d9      	bpl.n	800586e <_printf_float+0x236>
 80058ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058be:	4659      	mov	r1, fp
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b0      	blx	r6
 80058c4:	3001      	adds	r0, #1
 80058c6:	f43f af0e 	beq.w	80056e6 <_printf_float+0xae>
 80058ca:	f04f 0800 	mov.w	r8, #0
 80058ce:	f104 091a 	add.w	r9, r4, #26
 80058d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d4:	425b      	negs	r3, r3
 80058d6:	4543      	cmp	r3, r8
 80058d8:	dc01      	bgt.n	80058de <_printf_float+0x2a6>
 80058da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058dc:	e797      	b.n	800580e <_printf_float+0x1d6>
 80058de:	2301      	movs	r3, #1
 80058e0:	464a      	mov	r2, r9
 80058e2:	4659      	mov	r1, fp
 80058e4:	4628      	mov	r0, r5
 80058e6:	47b0      	blx	r6
 80058e8:	3001      	adds	r0, #1
 80058ea:	f43f aefc 	beq.w	80056e6 <_printf_float+0xae>
 80058ee:	f108 0801 	add.w	r8, r8, #1
 80058f2:	e7ee      	b.n	80058d2 <_printf_float+0x29a>
 80058f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058f8:	429a      	cmp	r2, r3
 80058fa:	bfa8      	it	ge
 80058fc:	461a      	movge	r2, r3
 80058fe:	2a00      	cmp	r2, #0
 8005900:	4690      	mov	r8, r2
 8005902:	dd07      	ble.n	8005914 <_printf_float+0x2dc>
 8005904:	4613      	mov	r3, r2
 8005906:	4659      	mov	r1, fp
 8005908:	463a      	mov	r2, r7
 800590a:	4628      	mov	r0, r5
 800590c:	47b0      	blx	r6
 800590e:	3001      	adds	r0, #1
 8005910:	f43f aee9 	beq.w	80056e6 <_printf_float+0xae>
 8005914:	f104 031a 	add.w	r3, r4, #26
 8005918:	f04f 0a00 	mov.w	sl, #0
 800591c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005920:	930b      	str	r3, [sp, #44]	; 0x2c
 8005922:	e015      	b.n	8005950 <_printf_float+0x318>
 8005924:	7fefffff 	.word	0x7fefffff
 8005928:	08007628 	.word	0x08007628
 800592c:	08007624 	.word	0x08007624
 8005930:	08007630 	.word	0x08007630
 8005934:	0800762c 	.word	0x0800762c
 8005938:	08007634 	.word	0x08007634
 800593c:	2301      	movs	r3, #1
 800593e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005940:	4659      	mov	r1, fp
 8005942:	4628      	mov	r0, r5
 8005944:	47b0      	blx	r6
 8005946:	3001      	adds	r0, #1
 8005948:	f43f aecd 	beq.w	80056e6 <_printf_float+0xae>
 800594c:	f10a 0a01 	add.w	sl, sl, #1
 8005950:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005954:	eba9 0308 	sub.w	r3, r9, r8
 8005958:	4553      	cmp	r3, sl
 800595a:	dcef      	bgt.n	800593c <_printf_float+0x304>
 800595c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005960:	429a      	cmp	r2, r3
 8005962:	444f      	add	r7, r9
 8005964:	db14      	blt.n	8005990 <_printf_float+0x358>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	07da      	lsls	r2, r3, #31
 800596a:	d411      	bmi.n	8005990 <_printf_float+0x358>
 800596c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800596e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005970:	eba3 0209 	sub.w	r2, r3, r9
 8005974:	eba3 0901 	sub.w	r9, r3, r1
 8005978:	4591      	cmp	r9, r2
 800597a:	bfa8      	it	ge
 800597c:	4691      	movge	r9, r2
 800597e:	f1b9 0f00 	cmp.w	r9, #0
 8005982:	dc0d      	bgt.n	80059a0 <_printf_float+0x368>
 8005984:	2700      	movs	r7, #0
 8005986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800598a:	f104 081a 	add.w	r8, r4, #26
 800598e:	e018      	b.n	80059c2 <_printf_float+0x38a>
 8005990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005994:	4659      	mov	r1, fp
 8005996:	4628      	mov	r0, r5
 8005998:	47b0      	blx	r6
 800599a:	3001      	adds	r0, #1
 800599c:	d1e6      	bne.n	800596c <_printf_float+0x334>
 800599e:	e6a2      	b.n	80056e6 <_printf_float+0xae>
 80059a0:	464b      	mov	r3, r9
 80059a2:	463a      	mov	r2, r7
 80059a4:	4659      	mov	r1, fp
 80059a6:	4628      	mov	r0, r5
 80059a8:	47b0      	blx	r6
 80059aa:	3001      	adds	r0, #1
 80059ac:	d1ea      	bne.n	8005984 <_printf_float+0x34c>
 80059ae:	e69a      	b.n	80056e6 <_printf_float+0xae>
 80059b0:	2301      	movs	r3, #1
 80059b2:	4642      	mov	r2, r8
 80059b4:	4659      	mov	r1, fp
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b0      	blx	r6
 80059ba:	3001      	adds	r0, #1
 80059bc:	f43f ae93 	beq.w	80056e6 <_printf_float+0xae>
 80059c0:	3701      	adds	r7, #1
 80059c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	eba3 0309 	sub.w	r3, r3, r9
 80059cc:	42bb      	cmp	r3, r7
 80059ce:	dcef      	bgt.n	80059b0 <_printf_float+0x378>
 80059d0:	e74d      	b.n	800586e <_printf_float+0x236>
 80059d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059d4:	2a01      	cmp	r2, #1
 80059d6:	dc01      	bgt.n	80059dc <_printf_float+0x3a4>
 80059d8:	07db      	lsls	r3, r3, #31
 80059da:	d538      	bpl.n	8005a4e <_printf_float+0x416>
 80059dc:	2301      	movs	r3, #1
 80059de:	463a      	mov	r2, r7
 80059e0:	4659      	mov	r1, fp
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b0      	blx	r6
 80059e6:	3001      	adds	r0, #1
 80059e8:	f43f ae7d 	beq.w	80056e6 <_printf_float+0xae>
 80059ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059f0:	4659      	mov	r1, fp
 80059f2:	4628      	mov	r0, r5
 80059f4:	47b0      	blx	r6
 80059f6:	3001      	adds	r0, #1
 80059f8:	f107 0701 	add.w	r7, r7, #1
 80059fc:	f43f ae73 	beq.w	80056e6 <_printf_float+0xae>
 8005a00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a06:	2200      	movs	r2, #0
 8005a08:	f103 38ff 	add.w	r8, r3, #4294967295
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f7fa ffcb 	bl	80009a8 <__aeabi_dcmpeq>
 8005a12:	b9c0      	cbnz	r0, 8005a46 <_printf_float+0x40e>
 8005a14:	4643      	mov	r3, r8
 8005a16:	463a      	mov	r2, r7
 8005a18:	4659      	mov	r1, fp
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	47b0      	blx	r6
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d10d      	bne.n	8005a3e <_printf_float+0x406>
 8005a22:	e660      	b.n	80056e6 <_printf_float+0xae>
 8005a24:	2301      	movs	r3, #1
 8005a26:	4642      	mov	r2, r8
 8005a28:	4659      	mov	r1, fp
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b0      	blx	r6
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f ae59 	beq.w	80056e6 <_printf_float+0xae>
 8005a34:	3701      	adds	r7, #1
 8005a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	42bb      	cmp	r3, r7
 8005a3c:	dcf2      	bgt.n	8005a24 <_printf_float+0x3ec>
 8005a3e:	464b      	mov	r3, r9
 8005a40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a44:	e6e4      	b.n	8005810 <_printf_float+0x1d8>
 8005a46:	2700      	movs	r7, #0
 8005a48:	f104 081a 	add.w	r8, r4, #26
 8005a4c:	e7f3      	b.n	8005a36 <_printf_float+0x3fe>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e7e1      	b.n	8005a16 <_printf_float+0x3de>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4642      	mov	r2, r8
 8005a56:	4659      	mov	r1, fp
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b0      	blx	r6
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	f43f ae42 	beq.w	80056e6 <_printf_float+0xae>
 8005a62:	3701      	adds	r7, #1
 8005a64:	68e3      	ldr	r3, [r4, #12]
 8005a66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	42bb      	cmp	r3, r7
 8005a6c:	dcf1      	bgt.n	8005a52 <_printf_float+0x41a>
 8005a6e:	e702      	b.n	8005876 <_printf_float+0x23e>
 8005a70:	2700      	movs	r7, #0
 8005a72:	f104 0819 	add.w	r8, r4, #25
 8005a76:	e7f5      	b.n	8005a64 <_printf_float+0x42c>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f43f ae94 	beq.w	80057a6 <_printf_float+0x16e>
 8005a7e:	f04f 0c00 	mov.w	ip, #0
 8005a82:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005a86:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005a8a:	6022      	str	r2, [r4, #0]
 8005a8c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005a90:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	463a      	mov	r2, r7
 8005a98:	464b      	mov	r3, r9
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f7ff fd3a 	bl	8005514 <__cvt>
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	e64f      	b.n	8005744 <_printf_float+0x10c>

08005aa4 <_printf_common>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	4691      	mov	r9, r2
 8005aaa:	461f      	mov	r7, r3
 8005aac:	688a      	ldr	r2, [r1, #8]
 8005aae:	690b      	ldr	r3, [r1, #16]
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	bfb8      	it	lt
 8005ab6:	4613      	movlt	r3, r2
 8005ab8:	f8c9 3000 	str.w	r3, [r9]
 8005abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac6:	b112      	cbz	r2, 8005ace <_printf_common+0x2a>
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8c9 3000 	str.w	r3, [r9]
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	0699      	lsls	r1, r3, #26
 8005ad2:	bf42      	ittt	mi
 8005ad4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ad8:	3302      	addmi	r3, #2
 8005ada:	f8c9 3000 	strmi.w	r3, [r9]
 8005ade:	6825      	ldr	r5, [r4, #0]
 8005ae0:	f015 0506 	ands.w	r5, r5, #6
 8005ae4:	d107      	bne.n	8005af6 <_printf_common+0x52>
 8005ae6:	f104 0a19 	add.w	sl, r4, #25
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	f8d9 2000 	ldr.w	r2, [r9]
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	42ab      	cmp	r3, r5
 8005af4:	dc29      	bgt.n	8005b4a <_printf_common+0xa6>
 8005af6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	3300      	adds	r3, #0
 8005afe:	bf18      	it	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	0692      	lsls	r2, r2, #26
 8005b04:	d42e      	bmi.n	8005b64 <_printf_common+0xc0>
 8005b06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	47c0      	blx	r8
 8005b10:	3001      	adds	r0, #1
 8005b12:	d021      	beq.n	8005b58 <_printf_common+0xb4>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	68e5      	ldr	r5, [r4, #12]
 8005b18:	f003 0306 	and.w	r3, r3, #6
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	bf18      	it	ne
 8005b20:	2500      	movne	r5, #0
 8005b22:	f8d9 2000 	ldr.w	r2, [r9]
 8005b26:	f04f 0900 	mov.w	r9, #0
 8005b2a:	bf08      	it	eq
 8005b2c:	1aad      	subeq	r5, r5, r2
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	6922      	ldr	r2, [r4, #16]
 8005b32:	bf08      	it	eq
 8005b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	bfc4      	itt	gt
 8005b3c:	1a9b      	subgt	r3, r3, r2
 8005b3e:	18ed      	addgt	r5, r5, r3
 8005b40:	341a      	adds	r4, #26
 8005b42:	454d      	cmp	r5, r9
 8005b44:	d11a      	bne.n	8005b7c <_printf_common+0xd8>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e008      	b.n	8005b5c <_printf_common+0xb8>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	4639      	mov	r1, r7
 8005b50:	4630      	mov	r0, r6
 8005b52:	47c0      	blx	r8
 8005b54:	3001      	adds	r0, #1
 8005b56:	d103      	bne.n	8005b60 <_printf_common+0xbc>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b60:	3501      	adds	r5, #1
 8005b62:	e7c2      	b.n	8005aea <_printf_common+0x46>
 8005b64:	2030      	movs	r0, #48	; 0x30
 8005b66:	18e1      	adds	r1, r4, r3
 8005b68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b72:	4422      	add	r2, r4
 8005b74:	3302      	adds	r3, #2
 8005b76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b7a:	e7c4      	b.n	8005b06 <_printf_common+0x62>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4622      	mov	r2, r4
 8005b80:	4639      	mov	r1, r7
 8005b82:	4630      	mov	r0, r6
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d0e6      	beq.n	8005b58 <_printf_common+0xb4>
 8005b8a:	f109 0901 	add.w	r9, r9, #1
 8005b8e:	e7d8      	b.n	8005b42 <_printf_common+0x9e>

08005b90 <_printf_i>:
 8005b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b98:	460c      	mov	r4, r1
 8005b9a:	7e09      	ldrb	r1, [r1, #24]
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	296e      	cmp	r1, #110	; 0x6e
 8005ba0:	4617      	mov	r7, r2
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	4698      	mov	r8, r3
 8005ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ba8:	f000 80b3 	beq.w	8005d12 <_printf_i+0x182>
 8005bac:	d822      	bhi.n	8005bf4 <_printf_i+0x64>
 8005bae:	2963      	cmp	r1, #99	; 0x63
 8005bb0:	d036      	beq.n	8005c20 <_printf_i+0x90>
 8005bb2:	d80a      	bhi.n	8005bca <_printf_i+0x3a>
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	f000 80b9 	beq.w	8005d2c <_printf_i+0x19c>
 8005bba:	2958      	cmp	r1, #88	; 0x58
 8005bbc:	f000 8083 	beq.w	8005cc6 <_printf_i+0x136>
 8005bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005bc8:	e032      	b.n	8005c30 <_printf_i+0xa0>
 8005bca:	2964      	cmp	r1, #100	; 0x64
 8005bcc:	d001      	beq.n	8005bd2 <_printf_i+0x42>
 8005bce:	2969      	cmp	r1, #105	; 0x69
 8005bd0:	d1f6      	bne.n	8005bc0 <_printf_i+0x30>
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	0605      	lsls	r5, r0, #24
 8005bd8:	f103 0104 	add.w	r1, r3, #4
 8005bdc:	d52a      	bpl.n	8005c34 <_printf_i+0xa4>
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	da03      	bge.n	8005bee <_printf_i+0x5e>
 8005be6:	222d      	movs	r2, #45	; 0x2d
 8005be8:	425b      	negs	r3, r3
 8005bea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005bee:	486f      	ldr	r0, [pc, #444]	; (8005dac <_printf_i+0x21c>)
 8005bf0:	220a      	movs	r2, #10
 8005bf2:	e039      	b.n	8005c68 <_printf_i+0xd8>
 8005bf4:	2973      	cmp	r1, #115	; 0x73
 8005bf6:	f000 809d 	beq.w	8005d34 <_printf_i+0x1a4>
 8005bfa:	d808      	bhi.n	8005c0e <_printf_i+0x7e>
 8005bfc:	296f      	cmp	r1, #111	; 0x6f
 8005bfe:	d020      	beq.n	8005c42 <_printf_i+0xb2>
 8005c00:	2970      	cmp	r1, #112	; 0x70
 8005c02:	d1dd      	bne.n	8005bc0 <_printf_i+0x30>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	f043 0320 	orr.w	r3, r3, #32
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	e003      	b.n	8005c16 <_printf_i+0x86>
 8005c0e:	2975      	cmp	r1, #117	; 0x75
 8005c10:	d017      	beq.n	8005c42 <_printf_i+0xb2>
 8005c12:	2978      	cmp	r1, #120	; 0x78
 8005c14:	d1d4      	bne.n	8005bc0 <_printf_i+0x30>
 8005c16:	2378      	movs	r3, #120	; 0x78
 8005c18:	4865      	ldr	r0, [pc, #404]	; (8005db0 <_printf_i+0x220>)
 8005c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c1e:	e055      	b.n	8005ccc <_printf_i+0x13c>
 8005c20:	6813      	ldr	r3, [r2, #0]
 8005c22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c26:	1d19      	adds	r1, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6011      	str	r1, [r2, #0]
 8005c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c30:	2301      	movs	r3, #1
 8005c32:	e08c      	b.n	8005d4e <_printf_i+0x1be>
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c3a:	6011      	str	r1, [r2, #0]
 8005c3c:	bf18      	it	ne
 8005c3e:	b21b      	sxthne	r3, r3
 8005c40:	e7cf      	b.n	8005be2 <_printf_i+0x52>
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	6825      	ldr	r5, [r4, #0]
 8005c46:	1d18      	adds	r0, r3, #4
 8005c48:	6010      	str	r0, [r2, #0]
 8005c4a:	0628      	lsls	r0, r5, #24
 8005c4c:	d501      	bpl.n	8005c52 <_printf_i+0xc2>
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	e002      	b.n	8005c58 <_printf_i+0xc8>
 8005c52:	0668      	lsls	r0, r5, #25
 8005c54:	d5fb      	bpl.n	8005c4e <_printf_i+0xbe>
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	296f      	cmp	r1, #111	; 0x6f
 8005c5a:	bf14      	ite	ne
 8005c5c:	220a      	movne	r2, #10
 8005c5e:	2208      	moveq	r2, #8
 8005c60:	4852      	ldr	r0, [pc, #328]	; (8005dac <_printf_i+0x21c>)
 8005c62:	2100      	movs	r1, #0
 8005c64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c68:	6865      	ldr	r5, [r4, #4]
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	60a5      	str	r5, [r4, #8]
 8005c6e:	f2c0 8095 	blt.w	8005d9c <_printf_i+0x20c>
 8005c72:	6821      	ldr	r1, [r4, #0]
 8005c74:	f021 0104 	bic.w	r1, r1, #4
 8005c78:	6021      	str	r1, [r4, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d13d      	bne.n	8005cfa <_printf_i+0x16a>
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	f040 808e 	bne.w	8005da0 <_printf_i+0x210>
 8005c84:	4665      	mov	r5, ip
 8005c86:	2a08      	cmp	r2, #8
 8005c88:	d10b      	bne.n	8005ca2 <_printf_i+0x112>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	07db      	lsls	r3, r3, #31
 8005c8e:	d508      	bpl.n	8005ca2 <_printf_i+0x112>
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	6862      	ldr	r2, [r4, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	bfde      	ittt	le
 8005c98:	2330      	movle	r3, #48	; 0x30
 8005c9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ca2:	ebac 0305 	sub.w	r3, ip, r5
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	f8cd 8000 	str.w	r8, [sp]
 8005cac:	463b      	mov	r3, r7
 8005cae:	aa03      	add	r2, sp, #12
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f7ff fef6 	bl	8005aa4 <_printf_common>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d14d      	bne.n	8005d58 <_printf_i+0x1c8>
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc0:	b005      	add	sp, #20
 8005cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cc6:	4839      	ldr	r0, [pc, #228]	; (8005dac <_printf_i+0x21c>)
 8005cc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ccc:	6813      	ldr	r3, [r2, #0]
 8005cce:	6821      	ldr	r1, [r4, #0]
 8005cd0:	1d1d      	adds	r5, r3, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6015      	str	r5, [r2, #0]
 8005cd6:	060a      	lsls	r2, r1, #24
 8005cd8:	d50b      	bpl.n	8005cf2 <_printf_i+0x162>
 8005cda:	07ca      	lsls	r2, r1, #31
 8005cdc:	bf44      	itt	mi
 8005cde:	f041 0120 	orrmi.w	r1, r1, #32
 8005ce2:	6021      	strmi	r1, [r4, #0]
 8005ce4:	b91b      	cbnz	r3, 8005cee <_printf_i+0x15e>
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	f022 0220 	bic.w	r2, r2, #32
 8005cec:	6022      	str	r2, [r4, #0]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	e7b7      	b.n	8005c62 <_printf_i+0xd2>
 8005cf2:	064d      	lsls	r5, r1, #25
 8005cf4:	bf48      	it	mi
 8005cf6:	b29b      	uxthmi	r3, r3
 8005cf8:	e7ef      	b.n	8005cda <_printf_i+0x14a>
 8005cfa:	4665      	mov	r5, ip
 8005cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d00:	fb02 3311 	mls	r3, r2, r1, r3
 8005d04:	5cc3      	ldrb	r3, [r0, r3]
 8005d06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d1f5      	bne.n	8005cfc <_printf_i+0x16c>
 8005d10:	e7b9      	b.n	8005c86 <_printf_i+0xf6>
 8005d12:	6813      	ldr	r3, [r2, #0]
 8005d14:	6825      	ldr	r5, [r4, #0]
 8005d16:	1d18      	adds	r0, r3, #4
 8005d18:	6961      	ldr	r1, [r4, #20]
 8005d1a:	6010      	str	r0, [r2, #0]
 8005d1c:	0628      	lsls	r0, r5, #24
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	d501      	bpl.n	8005d26 <_printf_i+0x196>
 8005d22:	6019      	str	r1, [r3, #0]
 8005d24:	e002      	b.n	8005d2c <_printf_i+0x19c>
 8005d26:	066a      	lsls	r2, r5, #25
 8005d28:	d5fb      	bpl.n	8005d22 <_printf_i+0x192>
 8005d2a:	8019      	strh	r1, [r3, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4665      	mov	r5, ip
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	e7b9      	b.n	8005ca8 <_printf_i+0x118>
 8005d34:	6813      	ldr	r3, [r2, #0]
 8005d36:	1d19      	adds	r1, r3, #4
 8005d38:	6011      	str	r1, [r2, #0]
 8005d3a:	681d      	ldr	r5, [r3, #0]
 8005d3c:	6862      	ldr	r2, [r4, #4]
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 feaf 	bl	8006aa4 <memchr>
 8005d46:	b108      	cbz	r0, 8005d4c <_printf_i+0x1bc>
 8005d48:	1b40      	subs	r0, r0, r5
 8005d4a:	6060      	str	r0, [r4, #4]
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	2300      	movs	r3, #0
 8005d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d56:	e7a7      	b.n	8005ca8 <_printf_i+0x118>
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	4630      	mov	r0, r6
 8005d60:	47c0      	blx	r8
 8005d62:	3001      	adds	r0, #1
 8005d64:	d0aa      	beq.n	8005cbc <_printf_i+0x12c>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	079b      	lsls	r3, r3, #30
 8005d6a:	d413      	bmi.n	8005d94 <_printf_i+0x204>
 8005d6c:	68e0      	ldr	r0, [r4, #12]
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	4298      	cmp	r0, r3
 8005d72:	bfb8      	it	lt
 8005d74:	4618      	movlt	r0, r3
 8005d76:	e7a3      	b.n	8005cc0 <_printf_i+0x130>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	464a      	mov	r2, r9
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	4630      	mov	r0, r6
 8005d80:	47c0      	blx	r8
 8005d82:	3001      	adds	r0, #1
 8005d84:	d09a      	beq.n	8005cbc <_printf_i+0x12c>
 8005d86:	3501      	adds	r5, #1
 8005d88:	68e3      	ldr	r3, [r4, #12]
 8005d8a:	9a03      	ldr	r2, [sp, #12]
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	42ab      	cmp	r3, r5
 8005d90:	dcf2      	bgt.n	8005d78 <_printf_i+0x1e8>
 8005d92:	e7eb      	b.n	8005d6c <_printf_i+0x1dc>
 8005d94:	2500      	movs	r5, #0
 8005d96:	f104 0919 	add.w	r9, r4, #25
 8005d9a:	e7f5      	b.n	8005d88 <_printf_i+0x1f8>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1ac      	bne.n	8005cfa <_printf_i+0x16a>
 8005da0:	7803      	ldrb	r3, [r0, #0]
 8005da2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005da6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005daa:	e76c      	b.n	8005c86 <_printf_i+0xf6>
 8005dac:	08007636 	.word	0x08007636
 8005db0:	08007647 	.word	0x08007647

08005db4 <siprintf>:
 8005db4:	b40e      	push	{r1, r2, r3}
 8005db6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dba:	b500      	push	{lr}
 8005dbc:	b09c      	sub	sp, #112	; 0x70
 8005dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8005dc0:	9002      	str	r0, [sp, #8]
 8005dc2:	9006      	str	r0, [sp, #24]
 8005dc4:	9107      	str	r1, [sp, #28]
 8005dc6:	9104      	str	r1, [sp, #16]
 8005dc8:	4808      	ldr	r0, [pc, #32]	; (8005dec <siprintf+0x38>)
 8005dca:	4909      	ldr	r1, [pc, #36]	; (8005df0 <siprintf+0x3c>)
 8005dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd0:	9105      	str	r1, [sp, #20]
 8005dd2:	6800      	ldr	r0, [r0, #0]
 8005dd4:	a902      	add	r1, sp, #8
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	f001 fa68 	bl	80072ac <_svfiprintf_r>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	9b02      	ldr	r3, [sp, #8]
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	b01c      	add	sp, #112	; 0x70
 8005de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005de8:	b003      	add	sp, #12
 8005dea:	4770      	bx	lr
 8005dec:	20000010 	.word	0x20000010
 8005df0:	ffff0208 	.word	0xffff0208

08005df4 <quorem>:
 8005df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	6903      	ldr	r3, [r0, #16]
 8005dfa:	690c      	ldr	r4, [r1, #16]
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	42a3      	cmp	r3, r4
 8005e00:	f2c0 8084 	blt.w	8005f0c <quorem+0x118>
 8005e04:	3c01      	subs	r4, #1
 8005e06:	f101 0714 	add.w	r7, r1, #20
 8005e0a:	f100 0614 	add.w	r6, r0, #20
 8005e0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005e16:	3501      	adds	r5, #1
 8005e18:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e1c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005e20:	eb06 030c 	add.w	r3, r6, ip
 8005e24:	eb07 090c 	add.w	r9, r7, ip
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	b39d      	cbz	r5, 8005e94 <quorem+0xa0>
 8005e2c:	f04f 0a00 	mov.w	sl, #0
 8005e30:	4638      	mov	r0, r7
 8005e32:	46b6      	mov	lr, r6
 8005e34:	46d3      	mov	fp, sl
 8005e36:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e3a:	b293      	uxth	r3, r2
 8005e3c:	fb05 a303 	mla	r3, r5, r3, sl
 8005e40:	0c12      	lsrs	r2, r2, #16
 8005e42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e46:	fb05 a202 	mla	r2, r5, r2, sl
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	ebab 0303 	sub.w	r3, fp, r3
 8005e50:	f8de b000 	ldr.w	fp, [lr]
 8005e54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005e58:	fa1f fb8b 	uxth.w	fp, fp
 8005e5c:	445b      	add	r3, fp
 8005e5e:	fa1f fb82 	uxth.w	fp, r2
 8005e62:	f8de 2000 	ldr.w	r2, [lr]
 8005e66:	4581      	cmp	r9, r0
 8005e68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e76:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005e7a:	f84e 3b04 	str.w	r3, [lr], #4
 8005e7e:	d2da      	bcs.n	8005e36 <quorem+0x42>
 8005e80:	f856 300c 	ldr.w	r3, [r6, ip]
 8005e84:	b933      	cbnz	r3, 8005e94 <quorem+0xa0>
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	429e      	cmp	r6, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	d331      	bcc.n	8005ef4 <quorem+0x100>
 8005e90:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e94:	4640      	mov	r0, r8
 8005e96:	f001 f833 	bl	8006f00 <__mcmp>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	db26      	blt.n	8005eec <quorem+0xf8>
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f04f 0c00 	mov.w	ip, #0
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	f857 1b04 	ldr.w	r1, [r7], #4
 8005eaa:	f8d0 e000 	ldr.w	lr, [r0]
 8005eae:	b28b      	uxth	r3, r1
 8005eb0:	ebac 0303 	sub.w	r3, ip, r3
 8005eb4:	fa1f f28e 	uxth.w	r2, lr
 8005eb8:	4413      	add	r3, r2
 8005eba:	0c0a      	lsrs	r2, r1, #16
 8005ebc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ec0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eca:	45b9      	cmp	r9, r7
 8005ecc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ed0:	f840 3b04 	str.w	r3, [r0], #4
 8005ed4:	d2e7      	bcs.n	8005ea6 <quorem+0xb2>
 8005ed6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005eda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ede:	b92a      	cbnz	r2, 8005eec <quorem+0xf8>
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	429e      	cmp	r6, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	d30b      	bcc.n	8005f00 <quorem+0x10c>
 8005ee8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005eec:	4628      	mov	r0, r5
 8005eee:	b003      	add	sp, #12
 8005ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	3b04      	subs	r3, #4
 8005ef8:	2a00      	cmp	r2, #0
 8005efa:	d1c9      	bne.n	8005e90 <quorem+0x9c>
 8005efc:	3c01      	subs	r4, #1
 8005efe:	e7c4      	b.n	8005e8a <quorem+0x96>
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	3b04      	subs	r3, #4
 8005f04:	2a00      	cmp	r2, #0
 8005f06:	d1ef      	bne.n	8005ee8 <quorem+0xf4>
 8005f08:	3c01      	subs	r4, #1
 8005f0a:	e7ea      	b.n	8005ee2 <quorem+0xee>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	e7ee      	b.n	8005eee <quorem+0xfa>

08005f10 <_dtoa_r>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	4616      	mov	r6, r2
 8005f16:	461f      	mov	r7, r3
 8005f18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f1a:	b095      	sub	sp, #84	; 0x54
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005f22:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f26:	b93d      	cbnz	r5, 8005f38 <_dtoa_r+0x28>
 8005f28:	2010      	movs	r0, #16
 8005f2a:	f000 fdb3 	bl	8006a94 <malloc>
 8005f2e:	6260      	str	r0, [r4, #36]	; 0x24
 8005f30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f34:	6005      	str	r5, [r0, #0]
 8005f36:	60c5      	str	r5, [r0, #12]
 8005f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f3a:	6819      	ldr	r1, [r3, #0]
 8005f3c:	b151      	cbz	r1, 8005f54 <_dtoa_r+0x44>
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	2301      	movs	r3, #1
 8005f42:	4093      	lsls	r3, r2
 8005f44:	604a      	str	r2, [r1, #4]
 8005f46:	608b      	str	r3, [r1, #8]
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fdf8 	bl	8006b3e <_Bfree>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	1e3b      	subs	r3, r7, #0
 8005f56:	bfaf      	iteee	ge
 8005f58:	2300      	movge	r3, #0
 8005f5a:	2201      	movlt	r2, #1
 8005f5c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f60:	9303      	strlt	r3, [sp, #12]
 8005f62:	bfac      	ite	ge
 8005f64:	f8c8 3000 	strge.w	r3, [r8]
 8005f68:	f8c8 2000 	strlt.w	r2, [r8]
 8005f6c:	4bae      	ldr	r3, [pc, #696]	; (8006228 <_dtoa_r+0x318>)
 8005f6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f72:	ea33 0308 	bics.w	r3, r3, r8
 8005f76:	d11b      	bne.n	8005fb0 <_dtoa_r+0xa0>
 8005f78:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	9b02      	ldr	r3, [sp, #8]
 8005f82:	b923      	cbnz	r3, 8005f8e <_dtoa_r+0x7e>
 8005f84:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f000 8545 	beq.w	8006a18 <_dtoa_r+0xb08>
 8005f8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f90:	b953      	cbnz	r3, 8005fa8 <_dtoa_r+0x98>
 8005f92:	4ba6      	ldr	r3, [pc, #664]	; (800622c <_dtoa_r+0x31c>)
 8005f94:	e021      	b.n	8005fda <_dtoa_r+0xca>
 8005f96:	4ba6      	ldr	r3, [pc, #664]	; (8006230 <_dtoa_r+0x320>)
 8005f98:	9306      	str	r3, [sp, #24]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	9806      	ldr	r0, [sp, #24]
 8005fa2:	b015      	add	sp, #84	; 0x54
 8005fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa8:	4ba0      	ldr	r3, [pc, #640]	; (800622c <_dtoa_r+0x31c>)
 8005faa:	9306      	str	r3, [sp, #24]
 8005fac:	3303      	adds	r3, #3
 8005fae:	e7f5      	b.n	8005f9c <_dtoa_r+0x8c>
 8005fb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	4630      	mov	r0, r6
 8005fba:	4639      	mov	r1, r7
 8005fbc:	f7fa fcf4 	bl	80009a8 <__aeabi_dcmpeq>
 8005fc0:	4682      	mov	sl, r0
 8005fc2:	b160      	cbz	r0, 8005fde <_dtoa_r+0xce>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8520 	beq.w	8006a12 <_dtoa_r+0xb02>
 8005fd2:	4b98      	ldr	r3, [pc, #608]	; (8006234 <_dtoa_r+0x324>)
 8005fd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	9306      	str	r3, [sp, #24]
 8005fdc:	e7e0      	b.n	8005fa0 <_dtoa_r+0x90>
 8005fde:	ab12      	add	r3, sp, #72	; 0x48
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	ab13      	add	r3, sp, #76	; 0x4c
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	463b      	mov	r3, r7
 8005fea:	4620      	mov	r0, r4
 8005fec:	f001 f800 	bl	8006ff0 <__d2b>
 8005ff0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ff4:	4683      	mov	fp, r0
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	d07d      	beq.n	80060f6 <_dtoa_r+0x1e6>
 8005ffa:	46b0      	mov	r8, r6
 8005ffc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006000:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006004:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006008:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800600c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006010:	2200      	movs	r2, #0
 8006012:	4b89      	ldr	r3, [pc, #548]	; (8006238 <_dtoa_r+0x328>)
 8006014:	4640      	mov	r0, r8
 8006016:	4649      	mov	r1, r9
 8006018:	f7fa f8a6 	bl	8000168 <__aeabi_dsub>
 800601c:	a37c      	add	r3, pc, #496	; (adr r3, 8006210 <_dtoa_r+0x300>)
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f7fa fa59 	bl	80004d8 <__aeabi_dmul>
 8006026:	a37c      	add	r3, pc, #496	; (adr r3, 8006218 <_dtoa_r+0x308>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa f89e 	bl	800016c <__adddf3>
 8006030:	4606      	mov	r6, r0
 8006032:	4628      	mov	r0, r5
 8006034:	460f      	mov	r7, r1
 8006036:	f7fa f9e5 	bl	8000404 <__aeabi_i2d>
 800603a:	a379      	add	r3, pc, #484	; (adr r3, 8006220 <_dtoa_r+0x310>)
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f7fa fa4a 	bl	80004d8 <__aeabi_dmul>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f7fa f88e 	bl	800016c <__adddf3>
 8006050:	4606      	mov	r6, r0
 8006052:	460f      	mov	r7, r1
 8006054:	f7fa fcf0 	bl	8000a38 <__aeabi_d2iz>
 8006058:	2200      	movs	r2, #0
 800605a:	4682      	mov	sl, r0
 800605c:	2300      	movs	r3, #0
 800605e:	4630      	mov	r0, r6
 8006060:	4639      	mov	r1, r7
 8006062:	f7fa fcab 	bl	80009bc <__aeabi_dcmplt>
 8006066:	b148      	cbz	r0, 800607c <_dtoa_r+0x16c>
 8006068:	4650      	mov	r0, sl
 800606a:	f7fa f9cb 	bl	8000404 <__aeabi_i2d>
 800606e:	4632      	mov	r2, r6
 8006070:	463b      	mov	r3, r7
 8006072:	f7fa fc99 	bl	80009a8 <__aeabi_dcmpeq>
 8006076:	b908      	cbnz	r0, 800607c <_dtoa_r+0x16c>
 8006078:	f10a 3aff 	add.w	sl, sl, #4294967295
 800607c:	f1ba 0f16 	cmp.w	sl, #22
 8006080:	d85a      	bhi.n	8006138 <_dtoa_r+0x228>
 8006082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006086:	496d      	ldr	r1, [pc, #436]	; (800623c <_dtoa_r+0x32c>)
 8006088:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800608c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006090:	f7fa fcb2 	bl	80009f8 <__aeabi_dcmpgt>
 8006094:	2800      	cmp	r0, #0
 8006096:	d051      	beq.n	800613c <_dtoa_r+0x22c>
 8006098:	2300      	movs	r3, #0
 800609a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800609e:	930d      	str	r3, [sp, #52]	; 0x34
 80060a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060a2:	1b5d      	subs	r5, r3, r5
 80060a4:	1e6b      	subs	r3, r5, #1
 80060a6:	9307      	str	r3, [sp, #28]
 80060a8:	bf43      	ittte	mi
 80060aa:	2300      	movmi	r3, #0
 80060ac:	f1c5 0901 	rsbmi	r9, r5, #1
 80060b0:	9307      	strmi	r3, [sp, #28]
 80060b2:	f04f 0900 	movpl.w	r9, #0
 80060b6:	f1ba 0f00 	cmp.w	sl, #0
 80060ba:	db41      	blt.n	8006140 <_dtoa_r+0x230>
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80060c2:	4453      	add	r3, sl
 80060c4:	9307      	str	r3, [sp, #28]
 80060c6:	2300      	movs	r3, #0
 80060c8:	9308      	str	r3, [sp, #32]
 80060ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060cc:	2b09      	cmp	r3, #9
 80060ce:	f200 808f 	bhi.w	80061f0 <_dtoa_r+0x2e0>
 80060d2:	2b05      	cmp	r3, #5
 80060d4:	bfc4      	itt	gt
 80060d6:	3b04      	subgt	r3, #4
 80060d8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80060da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060dc:	bfc8      	it	gt
 80060de:	2500      	movgt	r5, #0
 80060e0:	f1a3 0302 	sub.w	r3, r3, #2
 80060e4:	bfd8      	it	le
 80060e6:	2501      	movle	r5, #1
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	f200 808d 	bhi.w	8006208 <_dtoa_r+0x2f8>
 80060ee:	e8df f003 	tbb	[pc, r3]
 80060f2:	7d7b      	.short	0x7d7b
 80060f4:	6f2f      	.short	0x6f2f
 80060f6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80060fa:	441d      	add	r5, r3
 80060fc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006100:	2820      	cmp	r0, #32
 8006102:	dd13      	ble.n	800612c <_dtoa_r+0x21c>
 8006104:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006108:	9b02      	ldr	r3, [sp, #8]
 800610a:	fa08 f800 	lsl.w	r8, r8, r0
 800610e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006112:	fa23 f000 	lsr.w	r0, r3, r0
 8006116:	ea48 0000 	orr.w	r0, r8, r0
 800611a:	f7fa f963 	bl	80003e4 <__aeabi_ui2d>
 800611e:	2301      	movs	r3, #1
 8006120:	4680      	mov	r8, r0
 8006122:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006126:	3d01      	subs	r5, #1
 8006128:	9310      	str	r3, [sp, #64]	; 0x40
 800612a:	e771      	b.n	8006010 <_dtoa_r+0x100>
 800612c:	9b02      	ldr	r3, [sp, #8]
 800612e:	f1c0 0020 	rsb	r0, r0, #32
 8006132:	fa03 f000 	lsl.w	r0, r3, r0
 8006136:	e7f0      	b.n	800611a <_dtoa_r+0x20a>
 8006138:	2301      	movs	r3, #1
 800613a:	e7b0      	b.n	800609e <_dtoa_r+0x18e>
 800613c:	900d      	str	r0, [sp, #52]	; 0x34
 800613e:	e7af      	b.n	80060a0 <_dtoa_r+0x190>
 8006140:	f1ca 0300 	rsb	r3, sl, #0
 8006144:	9308      	str	r3, [sp, #32]
 8006146:	2300      	movs	r3, #0
 8006148:	eba9 090a 	sub.w	r9, r9, sl
 800614c:	930c      	str	r3, [sp, #48]	; 0x30
 800614e:	e7bc      	b.n	80060ca <_dtoa_r+0x1ba>
 8006150:	2301      	movs	r3, #1
 8006152:	9309      	str	r3, [sp, #36]	; 0x24
 8006154:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006156:	2b00      	cmp	r3, #0
 8006158:	dd74      	ble.n	8006244 <_dtoa_r+0x334>
 800615a:	4698      	mov	r8, r3
 800615c:	9304      	str	r3, [sp, #16]
 800615e:	2200      	movs	r2, #0
 8006160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006162:	6072      	str	r2, [r6, #4]
 8006164:	2204      	movs	r2, #4
 8006166:	f102 0014 	add.w	r0, r2, #20
 800616a:	4298      	cmp	r0, r3
 800616c:	6871      	ldr	r1, [r6, #4]
 800616e:	d96e      	bls.n	800624e <_dtoa_r+0x33e>
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fcb0 	bl	8006ad6 <_Balloc>
 8006176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006178:	6030      	str	r0, [r6, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f1b8 0f0e 	cmp.w	r8, #14
 8006180:	9306      	str	r3, [sp, #24]
 8006182:	f200 80ed 	bhi.w	8006360 <_dtoa_r+0x450>
 8006186:	2d00      	cmp	r5, #0
 8006188:	f000 80ea 	beq.w	8006360 <_dtoa_r+0x450>
 800618c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006190:	f1ba 0f00 	cmp.w	sl, #0
 8006194:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006198:	dd77      	ble.n	800628a <_dtoa_r+0x37a>
 800619a:	4a28      	ldr	r2, [pc, #160]	; (800623c <_dtoa_r+0x32c>)
 800619c:	f00a 030f 	and.w	r3, sl, #15
 80061a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80061a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061a8:	06f0      	lsls	r0, r6, #27
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80061b2:	d568      	bpl.n	8006286 <_dtoa_r+0x376>
 80061b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80061b8:	4b21      	ldr	r3, [pc, #132]	; (8006240 <_dtoa_r+0x330>)
 80061ba:	2503      	movs	r5, #3
 80061bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061c0:	f7fa fab4 	bl	800072c <__aeabi_ddiv>
 80061c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c8:	f006 060f 	and.w	r6, r6, #15
 80061cc:	4f1c      	ldr	r7, [pc, #112]	; (8006240 <_dtoa_r+0x330>)
 80061ce:	e04f      	b.n	8006270 <_dtoa_r+0x360>
 80061d0:	2301      	movs	r3, #1
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
 80061d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80061d6:	4453      	add	r3, sl
 80061d8:	f103 0801 	add.w	r8, r3, #1
 80061dc:	9304      	str	r3, [sp, #16]
 80061de:	4643      	mov	r3, r8
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	bfb8      	it	lt
 80061e4:	2301      	movlt	r3, #1
 80061e6:	e7ba      	b.n	800615e <_dtoa_r+0x24e>
 80061e8:	2300      	movs	r3, #0
 80061ea:	e7b2      	b.n	8006152 <_dtoa_r+0x242>
 80061ec:	2300      	movs	r3, #0
 80061ee:	e7f0      	b.n	80061d2 <_dtoa_r+0x2c2>
 80061f0:	2501      	movs	r5, #1
 80061f2:	2300      	movs	r3, #0
 80061f4:	9509      	str	r5, [sp, #36]	; 0x24
 80061f6:	931e      	str	r3, [sp, #120]	; 0x78
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295
 80061fc:	2200      	movs	r2, #0
 80061fe:	9304      	str	r3, [sp, #16]
 8006200:	4698      	mov	r8, r3
 8006202:	2312      	movs	r3, #18
 8006204:	921f      	str	r2, [sp, #124]	; 0x7c
 8006206:	e7aa      	b.n	800615e <_dtoa_r+0x24e>
 8006208:	2301      	movs	r3, #1
 800620a:	9309      	str	r3, [sp, #36]	; 0x24
 800620c:	e7f4      	b.n	80061f8 <_dtoa_r+0x2e8>
 800620e:	bf00      	nop
 8006210:	636f4361 	.word	0x636f4361
 8006214:	3fd287a7 	.word	0x3fd287a7
 8006218:	8b60c8b3 	.word	0x8b60c8b3
 800621c:	3fc68a28 	.word	0x3fc68a28
 8006220:	509f79fb 	.word	0x509f79fb
 8006224:	3fd34413 	.word	0x3fd34413
 8006228:	7ff00000 	.word	0x7ff00000
 800622c:	08007661 	.word	0x08007661
 8006230:	08007658 	.word	0x08007658
 8006234:	08007635 	.word	0x08007635
 8006238:	3ff80000 	.word	0x3ff80000
 800623c:	08007690 	.word	0x08007690
 8006240:	08007668 	.word	0x08007668
 8006244:	2301      	movs	r3, #1
 8006246:	9304      	str	r3, [sp, #16]
 8006248:	4698      	mov	r8, r3
 800624a:	461a      	mov	r2, r3
 800624c:	e7da      	b.n	8006204 <_dtoa_r+0x2f4>
 800624e:	3101      	adds	r1, #1
 8006250:	6071      	str	r1, [r6, #4]
 8006252:	0052      	lsls	r2, r2, #1
 8006254:	e787      	b.n	8006166 <_dtoa_r+0x256>
 8006256:	07f1      	lsls	r1, r6, #31
 8006258:	d508      	bpl.n	800626c <_dtoa_r+0x35c>
 800625a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800625e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006262:	f7fa f939 	bl	80004d8 <__aeabi_dmul>
 8006266:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800626a:	3501      	adds	r5, #1
 800626c:	1076      	asrs	r6, r6, #1
 800626e:	3708      	adds	r7, #8
 8006270:	2e00      	cmp	r6, #0
 8006272:	d1f0      	bne.n	8006256 <_dtoa_r+0x346>
 8006274:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800627c:	f7fa fa56 	bl	800072c <__aeabi_ddiv>
 8006280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006284:	e01b      	b.n	80062be <_dtoa_r+0x3ae>
 8006286:	2502      	movs	r5, #2
 8006288:	e7a0      	b.n	80061cc <_dtoa_r+0x2bc>
 800628a:	f000 80a4 	beq.w	80063d6 <_dtoa_r+0x4c6>
 800628e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006292:	f1ca 0600 	rsb	r6, sl, #0
 8006296:	4ba0      	ldr	r3, [pc, #640]	; (8006518 <_dtoa_r+0x608>)
 8006298:	f006 020f 	and.w	r2, r6, #15
 800629c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7fa f918 	bl	80004d8 <__aeabi_dmul>
 80062a8:	2502      	movs	r5, #2
 80062aa:	2300      	movs	r3, #0
 80062ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b0:	4f9a      	ldr	r7, [pc, #616]	; (800651c <_dtoa_r+0x60c>)
 80062b2:	1136      	asrs	r6, r6, #4
 80062b4:	2e00      	cmp	r6, #0
 80062b6:	f040 8083 	bne.w	80063c0 <_dtoa_r+0x4b0>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e0      	bne.n	8006280 <_dtoa_r+0x370>
 80062be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 808a 	beq.w	80063da <_dtoa_r+0x4ca>
 80062c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80062ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062d2:	2200      	movs	r2, #0
 80062d4:	4b92      	ldr	r3, [pc, #584]	; (8006520 <_dtoa_r+0x610>)
 80062d6:	f7fa fb71 	bl	80009bc <__aeabi_dcmplt>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d07d      	beq.n	80063da <_dtoa_r+0x4ca>
 80062de:	f1b8 0f00 	cmp.w	r8, #0
 80062e2:	d07a      	beq.n	80063da <_dtoa_r+0x4ca>
 80062e4:	9b04      	ldr	r3, [sp, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	dd36      	ble.n	8006358 <_dtoa_r+0x448>
 80062ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062ee:	2200      	movs	r2, #0
 80062f0:	4b8c      	ldr	r3, [pc, #560]	; (8006524 <_dtoa_r+0x614>)
 80062f2:	f7fa f8f1 	bl	80004d8 <__aeabi_dmul>
 80062f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062fa:	9e04      	ldr	r6, [sp, #16]
 80062fc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006300:	3501      	adds	r5, #1
 8006302:	4628      	mov	r0, r5
 8006304:	f7fa f87e 	bl	8000404 <__aeabi_i2d>
 8006308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800630c:	f7fa f8e4 	bl	80004d8 <__aeabi_dmul>
 8006310:	2200      	movs	r2, #0
 8006312:	4b85      	ldr	r3, [pc, #532]	; (8006528 <_dtoa_r+0x618>)
 8006314:	f7f9 ff2a 	bl	800016c <__adddf3>
 8006318:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800631c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006320:	950b      	str	r5, [sp, #44]	; 0x2c
 8006322:	2e00      	cmp	r6, #0
 8006324:	d15c      	bne.n	80063e0 <_dtoa_r+0x4d0>
 8006326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800632a:	2200      	movs	r2, #0
 800632c:	4b7f      	ldr	r3, [pc, #508]	; (800652c <_dtoa_r+0x61c>)
 800632e:	f7f9 ff1b 	bl	8000168 <__aeabi_dsub>
 8006332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006334:	462b      	mov	r3, r5
 8006336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800633a:	f7fa fb5d 	bl	80009f8 <__aeabi_dcmpgt>
 800633e:	2800      	cmp	r0, #0
 8006340:	f040 8281 	bne.w	8006846 <_dtoa_r+0x936>
 8006344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800634a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800634e:	f7fa fb35 	bl	80009bc <__aeabi_dcmplt>
 8006352:	2800      	cmp	r0, #0
 8006354:	f040 8275 	bne.w	8006842 <_dtoa_r+0x932>
 8006358:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800635c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006360:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006362:	2b00      	cmp	r3, #0
 8006364:	f2c0 814b 	blt.w	80065fe <_dtoa_r+0x6ee>
 8006368:	f1ba 0f0e 	cmp.w	sl, #14
 800636c:	f300 8147 	bgt.w	80065fe <_dtoa_r+0x6ee>
 8006370:	4b69      	ldr	r3, [pc, #420]	; (8006518 <_dtoa_r+0x608>)
 8006372:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800637e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006380:	2b00      	cmp	r3, #0
 8006382:	f280 80d7 	bge.w	8006534 <_dtoa_r+0x624>
 8006386:	f1b8 0f00 	cmp.w	r8, #0
 800638a:	f300 80d3 	bgt.w	8006534 <_dtoa_r+0x624>
 800638e:	f040 8257 	bne.w	8006840 <_dtoa_r+0x930>
 8006392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006396:	2200      	movs	r2, #0
 8006398:	4b64      	ldr	r3, [pc, #400]	; (800652c <_dtoa_r+0x61c>)
 800639a:	f7fa f89d 	bl	80004d8 <__aeabi_dmul>
 800639e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063a2:	f7fa fb1f 	bl	80009e4 <__aeabi_dcmpge>
 80063a6:	4646      	mov	r6, r8
 80063a8:	4647      	mov	r7, r8
 80063aa:	2800      	cmp	r0, #0
 80063ac:	f040 822d 	bne.w	800680a <_dtoa_r+0x8fa>
 80063b0:	9b06      	ldr	r3, [sp, #24]
 80063b2:	9a06      	ldr	r2, [sp, #24]
 80063b4:	1c5d      	adds	r5, r3, #1
 80063b6:	2331      	movs	r3, #49	; 0x31
 80063b8:	f10a 0a01 	add.w	sl, sl, #1
 80063bc:	7013      	strb	r3, [r2, #0]
 80063be:	e228      	b.n	8006812 <_dtoa_r+0x902>
 80063c0:	07f2      	lsls	r2, r6, #31
 80063c2:	d505      	bpl.n	80063d0 <_dtoa_r+0x4c0>
 80063c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c8:	f7fa f886 	bl	80004d8 <__aeabi_dmul>
 80063cc:	2301      	movs	r3, #1
 80063ce:	3501      	adds	r5, #1
 80063d0:	1076      	asrs	r6, r6, #1
 80063d2:	3708      	adds	r7, #8
 80063d4:	e76e      	b.n	80062b4 <_dtoa_r+0x3a4>
 80063d6:	2502      	movs	r5, #2
 80063d8:	e771      	b.n	80062be <_dtoa_r+0x3ae>
 80063da:	4657      	mov	r7, sl
 80063dc:	4646      	mov	r6, r8
 80063de:	e790      	b.n	8006302 <_dtoa_r+0x3f2>
 80063e0:	4b4d      	ldr	r3, [pc, #308]	; (8006518 <_dtoa_r+0x608>)
 80063e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80063ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d048      	beq.n	8006482 <_dtoa_r+0x572>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	2000      	movs	r0, #0
 80063f6:	494e      	ldr	r1, [pc, #312]	; (8006530 <_dtoa_r+0x620>)
 80063f8:	f7fa f998 	bl	800072c <__aeabi_ddiv>
 80063fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006400:	f7f9 feb2 	bl	8000168 <__aeabi_dsub>
 8006404:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006408:	9d06      	ldr	r5, [sp, #24]
 800640a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800640e:	f7fa fb13 	bl	8000a38 <__aeabi_d2iz>
 8006412:	9011      	str	r0, [sp, #68]	; 0x44
 8006414:	f7f9 fff6 	bl	8000404 <__aeabi_i2d>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006420:	f7f9 fea2 	bl	8000168 <__aeabi_dsub>
 8006424:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800642a:	3330      	adds	r3, #48	; 0x30
 800642c:	f805 3b01 	strb.w	r3, [r5], #1
 8006430:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006434:	f7fa fac2 	bl	80009bc <__aeabi_dcmplt>
 8006438:	2800      	cmp	r0, #0
 800643a:	d163      	bne.n	8006504 <_dtoa_r+0x5f4>
 800643c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006440:	2000      	movs	r0, #0
 8006442:	4937      	ldr	r1, [pc, #220]	; (8006520 <_dtoa_r+0x610>)
 8006444:	f7f9 fe90 	bl	8000168 <__aeabi_dsub>
 8006448:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800644c:	f7fa fab6 	bl	80009bc <__aeabi_dcmplt>
 8006450:	2800      	cmp	r0, #0
 8006452:	f040 80b5 	bne.w	80065c0 <_dtoa_r+0x6b0>
 8006456:	9b06      	ldr	r3, [sp, #24]
 8006458:	1aeb      	subs	r3, r5, r3
 800645a:	429e      	cmp	r6, r3
 800645c:	f77f af7c 	ble.w	8006358 <_dtoa_r+0x448>
 8006460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006464:	2200      	movs	r2, #0
 8006466:	4b2f      	ldr	r3, [pc, #188]	; (8006524 <_dtoa_r+0x614>)
 8006468:	f7fa f836 	bl	80004d8 <__aeabi_dmul>
 800646c:	2200      	movs	r2, #0
 800646e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006476:	4b2b      	ldr	r3, [pc, #172]	; (8006524 <_dtoa_r+0x614>)
 8006478:	f7fa f82e 	bl	80004d8 <__aeabi_dmul>
 800647c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006480:	e7c3      	b.n	800640a <_dtoa_r+0x4fa>
 8006482:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006486:	f7fa f827 	bl	80004d8 <__aeabi_dmul>
 800648a:	9b06      	ldr	r3, [sp, #24]
 800648c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006490:	199d      	adds	r5, r3, r6
 8006492:	461e      	mov	r6, r3
 8006494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006498:	f7fa face 	bl	8000a38 <__aeabi_d2iz>
 800649c:	9011      	str	r0, [sp, #68]	; 0x44
 800649e:	f7f9 ffb1 	bl	8000404 <__aeabi_i2d>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064aa:	f7f9 fe5d 	bl	8000168 <__aeabi_dsub>
 80064ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b4:	3330      	adds	r3, #48	; 0x30
 80064b6:	f806 3b01 	strb.w	r3, [r6], #1
 80064ba:	42ae      	cmp	r6, r5
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	d124      	bne.n	800650c <_dtoa_r+0x5fc>
 80064c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064c6:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <_dtoa_r+0x620>)
 80064c8:	f7f9 fe50 	bl	800016c <__adddf3>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d4:	f7fa fa90 	bl	80009f8 <__aeabi_dcmpgt>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d171      	bne.n	80065c0 <_dtoa_r+0x6b0>
 80064dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064e0:	2000      	movs	r0, #0
 80064e2:	4913      	ldr	r1, [pc, #76]	; (8006530 <_dtoa_r+0x620>)
 80064e4:	f7f9 fe40 	bl	8000168 <__aeabi_dsub>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064f0:	f7fa fa64 	bl	80009bc <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f43f af2f 	beq.w	8006358 <_dtoa_r+0x448>
 80064fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064fe:	1e6a      	subs	r2, r5, #1
 8006500:	2b30      	cmp	r3, #48	; 0x30
 8006502:	d001      	beq.n	8006508 <_dtoa_r+0x5f8>
 8006504:	46ba      	mov	sl, r7
 8006506:	e04a      	b.n	800659e <_dtoa_r+0x68e>
 8006508:	4615      	mov	r5, r2
 800650a:	e7f6      	b.n	80064fa <_dtoa_r+0x5ea>
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <_dtoa_r+0x614>)
 800650e:	f7f9 ffe3 	bl	80004d8 <__aeabi_dmul>
 8006512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006516:	e7bd      	b.n	8006494 <_dtoa_r+0x584>
 8006518:	08007690 	.word	0x08007690
 800651c:	08007668 	.word	0x08007668
 8006520:	3ff00000 	.word	0x3ff00000
 8006524:	40240000 	.word	0x40240000
 8006528:	401c0000 	.word	0x401c0000
 800652c:	40140000 	.word	0x40140000
 8006530:	3fe00000 	.word	0x3fe00000
 8006534:	9d06      	ldr	r5, [sp, #24]
 8006536:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800653a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7fa f8f3 	bl	800072c <__aeabi_ddiv>
 8006546:	f7fa fa77 	bl	8000a38 <__aeabi_d2iz>
 800654a:	4681      	mov	r9, r0
 800654c:	f7f9 ff5a 	bl	8000404 <__aeabi_i2d>
 8006550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006554:	f7f9 ffc0 	bl	80004d8 <__aeabi_dmul>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4630      	mov	r0, r6
 800655e:	4639      	mov	r1, r7
 8006560:	f7f9 fe02 	bl	8000168 <__aeabi_dsub>
 8006564:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006568:	f805 6b01 	strb.w	r6, [r5], #1
 800656c:	9e06      	ldr	r6, [sp, #24]
 800656e:	4602      	mov	r2, r0
 8006570:	1bae      	subs	r6, r5, r6
 8006572:	45b0      	cmp	r8, r6
 8006574:	460b      	mov	r3, r1
 8006576:	d135      	bne.n	80065e4 <_dtoa_r+0x6d4>
 8006578:	f7f9 fdf8 	bl	800016c <__adddf3>
 800657c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006580:	4606      	mov	r6, r0
 8006582:	460f      	mov	r7, r1
 8006584:	f7fa fa38 	bl	80009f8 <__aeabi_dcmpgt>
 8006588:	b9c8      	cbnz	r0, 80065be <_dtoa_r+0x6ae>
 800658a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800658e:	4630      	mov	r0, r6
 8006590:	4639      	mov	r1, r7
 8006592:	f7fa fa09 	bl	80009a8 <__aeabi_dcmpeq>
 8006596:	b110      	cbz	r0, 800659e <_dtoa_r+0x68e>
 8006598:	f019 0f01 	tst.w	r9, #1
 800659c:	d10f      	bne.n	80065be <_dtoa_r+0x6ae>
 800659e:	4659      	mov	r1, fp
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 facc 	bl	8006b3e <_Bfree>
 80065a6:	2300      	movs	r3, #0
 80065a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065aa:	702b      	strb	r3, [r5, #0]
 80065ac:	f10a 0301 	add.w	r3, sl, #1
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f43f acf3 	beq.w	8005fa0 <_dtoa_r+0x90>
 80065ba:	601d      	str	r5, [r3, #0]
 80065bc:	e4f0      	b.n	8005fa0 <_dtoa_r+0x90>
 80065be:	4657      	mov	r7, sl
 80065c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065c4:	1e6b      	subs	r3, r5, #1
 80065c6:	2a39      	cmp	r2, #57	; 0x39
 80065c8:	d106      	bne.n	80065d8 <_dtoa_r+0x6c8>
 80065ca:	9a06      	ldr	r2, [sp, #24]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d107      	bne.n	80065e0 <_dtoa_r+0x6d0>
 80065d0:	2330      	movs	r3, #48	; 0x30
 80065d2:	7013      	strb	r3, [r2, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	3701      	adds	r7, #1
 80065d8:	781a      	ldrb	r2, [r3, #0]
 80065da:	3201      	adds	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e791      	b.n	8006504 <_dtoa_r+0x5f4>
 80065e0:	461d      	mov	r5, r3
 80065e2:	e7ed      	b.n	80065c0 <_dtoa_r+0x6b0>
 80065e4:	2200      	movs	r2, #0
 80065e6:	4b99      	ldr	r3, [pc, #612]	; (800684c <_dtoa_r+0x93c>)
 80065e8:	f7f9 ff76 	bl	80004d8 <__aeabi_dmul>
 80065ec:	2200      	movs	r2, #0
 80065ee:	2300      	movs	r3, #0
 80065f0:	4606      	mov	r6, r0
 80065f2:	460f      	mov	r7, r1
 80065f4:	f7fa f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d09e      	beq.n	800653a <_dtoa_r+0x62a>
 80065fc:	e7cf      	b.n	800659e <_dtoa_r+0x68e>
 80065fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006600:	2a00      	cmp	r2, #0
 8006602:	f000 8088 	beq.w	8006716 <_dtoa_r+0x806>
 8006606:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006608:	2a01      	cmp	r2, #1
 800660a:	dc6d      	bgt.n	80066e8 <_dtoa_r+0x7d8>
 800660c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800660e:	2a00      	cmp	r2, #0
 8006610:	d066      	beq.n	80066e0 <_dtoa_r+0x7d0>
 8006612:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006616:	464d      	mov	r5, r9
 8006618:	9e08      	ldr	r6, [sp, #32]
 800661a:	9a07      	ldr	r2, [sp, #28]
 800661c:	2101      	movs	r1, #1
 800661e:	441a      	add	r2, r3
 8006620:	4620      	mov	r0, r4
 8006622:	4499      	add	r9, r3
 8006624:	9207      	str	r2, [sp, #28]
 8006626:	f000 fb2a 	bl	8006c7e <__i2b>
 800662a:	4607      	mov	r7, r0
 800662c:	2d00      	cmp	r5, #0
 800662e:	dd0b      	ble.n	8006648 <_dtoa_r+0x738>
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	2b00      	cmp	r3, #0
 8006634:	dd08      	ble.n	8006648 <_dtoa_r+0x738>
 8006636:	42ab      	cmp	r3, r5
 8006638:	bfa8      	it	ge
 800663a:	462b      	movge	r3, r5
 800663c:	9a07      	ldr	r2, [sp, #28]
 800663e:	eba9 0903 	sub.w	r9, r9, r3
 8006642:	1aed      	subs	r5, r5, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	9307      	str	r3, [sp, #28]
 8006648:	9b08      	ldr	r3, [sp, #32]
 800664a:	b1eb      	cbz	r3, 8006688 <_dtoa_r+0x778>
 800664c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d065      	beq.n	800671e <_dtoa_r+0x80e>
 8006652:	b18e      	cbz	r6, 8006678 <_dtoa_r+0x768>
 8006654:	4639      	mov	r1, r7
 8006656:	4632      	mov	r2, r6
 8006658:	4620      	mov	r0, r4
 800665a:	f000 fbaf 	bl	8006dbc <__pow5mult>
 800665e:	465a      	mov	r2, fp
 8006660:	4601      	mov	r1, r0
 8006662:	4607      	mov	r7, r0
 8006664:	4620      	mov	r0, r4
 8006666:	f000 fb13 	bl	8006c90 <__multiply>
 800666a:	4659      	mov	r1, fp
 800666c:	900a      	str	r0, [sp, #40]	; 0x28
 800666e:	4620      	mov	r0, r4
 8006670:	f000 fa65 	bl	8006b3e <_Bfree>
 8006674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006676:	469b      	mov	fp, r3
 8006678:	9b08      	ldr	r3, [sp, #32]
 800667a:	1b9a      	subs	r2, r3, r6
 800667c:	d004      	beq.n	8006688 <_dtoa_r+0x778>
 800667e:	4659      	mov	r1, fp
 8006680:	4620      	mov	r0, r4
 8006682:	f000 fb9b 	bl	8006dbc <__pow5mult>
 8006686:	4683      	mov	fp, r0
 8006688:	2101      	movs	r1, #1
 800668a:	4620      	mov	r0, r4
 800668c:	f000 faf7 	bl	8006c7e <__i2b>
 8006690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006692:	4606      	mov	r6, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 81c6 	beq.w	8006a26 <_dtoa_r+0xb16>
 800669a:	461a      	mov	r2, r3
 800669c:	4601      	mov	r1, r0
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fb8c 	bl	8006dbc <__pow5mult>
 80066a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80066a6:	4606      	mov	r6, r0
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	dc3e      	bgt.n	800672a <_dtoa_r+0x81a>
 80066ac:	9b02      	ldr	r3, [sp, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d137      	bne.n	8006722 <_dtoa_r+0x812>
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d134      	bne.n	8006726 <_dtoa_r+0x816>
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066c2:	0d1b      	lsrs	r3, r3, #20
 80066c4:	051b      	lsls	r3, r3, #20
 80066c6:	b12b      	cbz	r3, 80066d4 <_dtoa_r+0x7c4>
 80066c8:	9b07      	ldr	r3, [sp, #28]
 80066ca:	f109 0901 	add.w	r9, r9, #1
 80066ce:	3301      	adds	r3, #1
 80066d0:	9307      	str	r3, [sp, #28]
 80066d2:	2301      	movs	r3, #1
 80066d4:	9308      	str	r3, [sp, #32]
 80066d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d128      	bne.n	800672e <_dtoa_r+0x81e>
 80066dc:	2001      	movs	r0, #1
 80066de:	e02e      	b.n	800673e <_dtoa_r+0x82e>
 80066e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066e6:	e796      	b.n	8006616 <_dtoa_r+0x706>
 80066e8:	9b08      	ldr	r3, [sp, #32]
 80066ea:	f108 36ff 	add.w	r6, r8, #4294967295
 80066ee:	42b3      	cmp	r3, r6
 80066f0:	bfb7      	itett	lt
 80066f2:	9b08      	ldrlt	r3, [sp, #32]
 80066f4:	1b9e      	subge	r6, r3, r6
 80066f6:	1af2      	sublt	r2, r6, r3
 80066f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80066fa:	bfbf      	itttt	lt
 80066fc:	9608      	strlt	r6, [sp, #32]
 80066fe:	189b      	addlt	r3, r3, r2
 8006700:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006702:	2600      	movlt	r6, #0
 8006704:	f1b8 0f00 	cmp.w	r8, #0
 8006708:	bfb9      	ittee	lt
 800670a:	eba9 0508 	sublt.w	r5, r9, r8
 800670e:	2300      	movlt	r3, #0
 8006710:	464d      	movge	r5, r9
 8006712:	4643      	movge	r3, r8
 8006714:	e781      	b.n	800661a <_dtoa_r+0x70a>
 8006716:	9e08      	ldr	r6, [sp, #32]
 8006718:	464d      	mov	r5, r9
 800671a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800671c:	e786      	b.n	800662c <_dtoa_r+0x71c>
 800671e:	9a08      	ldr	r2, [sp, #32]
 8006720:	e7ad      	b.n	800667e <_dtoa_r+0x76e>
 8006722:	2300      	movs	r3, #0
 8006724:	e7d6      	b.n	80066d4 <_dtoa_r+0x7c4>
 8006726:	9b02      	ldr	r3, [sp, #8]
 8006728:	e7d4      	b.n	80066d4 <_dtoa_r+0x7c4>
 800672a:	2300      	movs	r3, #0
 800672c:	9308      	str	r3, [sp, #32]
 800672e:	6933      	ldr	r3, [r6, #16]
 8006730:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006734:	6918      	ldr	r0, [r3, #16]
 8006736:	f000 fa54 	bl	8006be2 <__hi0bits>
 800673a:	f1c0 0020 	rsb	r0, r0, #32
 800673e:	9b07      	ldr	r3, [sp, #28]
 8006740:	4418      	add	r0, r3
 8006742:	f010 001f 	ands.w	r0, r0, #31
 8006746:	d047      	beq.n	80067d8 <_dtoa_r+0x8c8>
 8006748:	f1c0 0320 	rsb	r3, r0, #32
 800674c:	2b04      	cmp	r3, #4
 800674e:	dd3b      	ble.n	80067c8 <_dtoa_r+0x8b8>
 8006750:	9b07      	ldr	r3, [sp, #28]
 8006752:	f1c0 001c 	rsb	r0, r0, #28
 8006756:	4481      	add	r9, r0
 8006758:	4405      	add	r5, r0
 800675a:	4403      	add	r3, r0
 800675c:	9307      	str	r3, [sp, #28]
 800675e:	f1b9 0f00 	cmp.w	r9, #0
 8006762:	dd05      	ble.n	8006770 <_dtoa_r+0x860>
 8006764:	4659      	mov	r1, fp
 8006766:	464a      	mov	r2, r9
 8006768:	4620      	mov	r0, r4
 800676a:	f000 fb75 	bl	8006e58 <__lshift>
 800676e:	4683      	mov	fp, r0
 8006770:	9b07      	ldr	r3, [sp, #28]
 8006772:	2b00      	cmp	r3, #0
 8006774:	dd05      	ble.n	8006782 <_dtoa_r+0x872>
 8006776:	4631      	mov	r1, r6
 8006778:	461a      	mov	r2, r3
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fb6c 	bl	8006e58 <__lshift>
 8006780:	4606      	mov	r6, r0
 8006782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006784:	b353      	cbz	r3, 80067dc <_dtoa_r+0x8cc>
 8006786:	4631      	mov	r1, r6
 8006788:	4658      	mov	r0, fp
 800678a:	f000 fbb9 	bl	8006f00 <__mcmp>
 800678e:	2800      	cmp	r0, #0
 8006790:	da24      	bge.n	80067dc <_dtoa_r+0x8cc>
 8006792:	2300      	movs	r3, #0
 8006794:	4659      	mov	r1, fp
 8006796:	220a      	movs	r2, #10
 8006798:	4620      	mov	r0, r4
 800679a:	f000 f9e7 	bl	8006b6c <__multadd>
 800679e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067a4:	4683      	mov	fp, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 8144 	beq.w	8006a34 <_dtoa_r+0xb24>
 80067ac:	2300      	movs	r3, #0
 80067ae:	4639      	mov	r1, r7
 80067b0:	220a      	movs	r2, #10
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 f9da 	bl	8006b6c <__multadd>
 80067b8:	9b04      	ldr	r3, [sp, #16]
 80067ba:	4607      	mov	r7, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dc4d      	bgt.n	800685c <_dtoa_r+0x94c>
 80067c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	dd4a      	ble.n	800685c <_dtoa_r+0x94c>
 80067c6:	e011      	b.n	80067ec <_dtoa_r+0x8dc>
 80067c8:	d0c9      	beq.n	800675e <_dtoa_r+0x84e>
 80067ca:	9a07      	ldr	r2, [sp, #28]
 80067cc:	331c      	adds	r3, #28
 80067ce:	441a      	add	r2, r3
 80067d0:	4499      	add	r9, r3
 80067d2:	441d      	add	r5, r3
 80067d4:	4613      	mov	r3, r2
 80067d6:	e7c1      	b.n	800675c <_dtoa_r+0x84c>
 80067d8:	4603      	mov	r3, r0
 80067da:	e7f6      	b.n	80067ca <_dtoa_r+0x8ba>
 80067dc:	f1b8 0f00 	cmp.w	r8, #0
 80067e0:	dc36      	bgt.n	8006850 <_dtoa_r+0x940>
 80067e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	dd33      	ble.n	8006850 <_dtoa_r+0x940>
 80067e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80067ec:	9b04      	ldr	r3, [sp, #16]
 80067ee:	b963      	cbnz	r3, 800680a <_dtoa_r+0x8fa>
 80067f0:	4631      	mov	r1, r6
 80067f2:	2205      	movs	r2, #5
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 f9b9 	bl	8006b6c <__multadd>
 80067fa:	4601      	mov	r1, r0
 80067fc:	4606      	mov	r6, r0
 80067fe:	4658      	mov	r0, fp
 8006800:	f000 fb7e 	bl	8006f00 <__mcmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	f73f add3 	bgt.w	80063b0 <_dtoa_r+0x4a0>
 800680a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800680c:	9d06      	ldr	r5, [sp, #24]
 800680e:	ea6f 0a03 	mvn.w	sl, r3
 8006812:	f04f 0900 	mov.w	r9, #0
 8006816:	4631      	mov	r1, r6
 8006818:	4620      	mov	r0, r4
 800681a:	f000 f990 	bl	8006b3e <_Bfree>
 800681e:	2f00      	cmp	r7, #0
 8006820:	f43f aebd 	beq.w	800659e <_dtoa_r+0x68e>
 8006824:	f1b9 0f00 	cmp.w	r9, #0
 8006828:	d005      	beq.n	8006836 <_dtoa_r+0x926>
 800682a:	45b9      	cmp	r9, r7
 800682c:	d003      	beq.n	8006836 <_dtoa_r+0x926>
 800682e:	4649      	mov	r1, r9
 8006830:	4620      	mov	r0, r4
 8006832:	f000 f984 	bl	8006b3e <_Bfree>
 8006836:	4639      	mov	r1, r7
 8006838:	4620      	mov	r0, r4
 800683a:	f000 f980 	bl	8006b3e <_Bfree>
 800683e:	e6ae      	b.n	800659e <_dtoa_r+0x68e>
 8006840:	2600      	movs	r6, #0
 8006842:	4637      	mov	r7, r6
 8006844:	e7e1      	b.n	800680a <_dtoa_r+0x8fa>
 8006846:	46ba      	mov	sl, r7
 8006848:	4637      	mov	r7, r6
 800684a:	e5b1      	b.n	80063b0 <_dtoa_r+0x4a0>
 800684c:	40240000 	.word	0x40240000
 8006850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006852:	f8cd 8010 	str.w	r8, [sp, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 80f3 	beq.w	8006a42 <_dtoa_r+0xb32>
 800685c:	2d00      	cmp	r5, #0
 800685e:	dd05      	ble.n	800686c <_dtoa_r+0x95c>
 8006860:	4639      	mov	r1, r7
 8006862:	462a      	mov	r2, r5
 8006864:	4620      	mov	r0, r4
 8006866:	f000 faf7 	bl	8006e58 <__lshift>
 800686a:	4607      	mov	r7, r0
 800686c:	9b08      	ldr	r3, [sp, #32]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d04c      	beq.n	800690c <_dtoa_r+0x9fc>
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	4620      	mov	r0, r4
 8006876:	f000 f92e 	bl	8006ad6 <_Balloc>
 800687a:	4605      	mov	r5, r0
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	f107 010c 	add.w	r1, r7, #12
 8006882:	3202      	adds	r2, #2
 8006884:	0092      	lsls	r2, r2, #2
 8006886:	300c      	adds	r0, #12
 8006888:	f000 f91a 	bl	8006ac0 <memcpy>
 800688c:	2201      	movs	r2, #1
 800688e:	4629      	mov	r1, r5
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fae1 	bl	8006e58 <__lshift>
 8006896:	46b9      	mov	r9, r7
 8006898:	4607      	mov	r7, r0
 800689a:	9b06      	ldr	r3, [sp, #24]
 800689c:	9307      	str	r3, [sp, #28]
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	9308      	str	r3, [sp, #32]
 80068a6:	4631      	mov	r1, r6
 80068a8:	4658      	mov	r0, fp
 80068aa:	f7ff faa3 	bl	8005df4 <quorem>
 80068ae:	4649      	mov	r1, r9
 80068b0:	4605      	mov	r5, r0
 80068b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80068b6:	4658      	mov	r0, fp
 80068b8:	f000 fb22 	bl	8006f00 <__mcmp>
 80068bc:	463a      	mov	r2, r7
 80068be:	9002      	str	r0, [sp, #8]
 80068c0:	4631      	mov	r1, r6
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 fb36 	bl	8006f34 <__mdiff>
 80068c8:	68c3      	ldr	r3, [r0, #12]
 80068ca:	4602      	mov	r2, r0
 80068cc:	bb03      	cbnz	r3, 8006910 <_dtoa_r+0xa00>
 80068ce:	4601      	mov	r1, r0
 80068d0:	9009      	str	r0, [sp, #36]	; 0x24
 80068d2:	4658      	mov	r0, fp
 80068d4:	f000 fb14 	bl	8006f00 <__mcmp>
 80068d8:	4603      	mov	r3, r0
 80068da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068dc:	4611      	mov	r1, r2
 80068de:	4620      	mov	r0, r4
 80068e0:	9309      	str	r3, [sp, #36]	; 0x24
 80068e2:	f000 f92c 	bl	8006b3e <_Bfree>
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	b9a3      	cbnz	r3, 8006914 <_dtoa_r+0xa04>
 80068ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068ec:	b992      	cbnz	r2, 8006914 <_dtoa_r+0xa04>
 80068ee:	9a08      	ldr	r2, [sp, #32]
 80068f0:	b982      	cbnz	r2, 8006914 <_dtoa_r+0xa04>
 80068f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068f6:	d029      	beq.n	800694c <_dtoa_r+0xa3c>
 80068f8:	9b02      	ldr	r3, [sp, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dd01      	ble.n	8006902 <_dtoa_r+0x9f2>
 80068fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006902:	9b07      	ldr	r3, [sp, #28]
 8006904:	1c5d      	adds	r5, r3, #1
 8006906:	f883 8000 	strb.w	r8, [r3]
 800690a:	e784      	b.n	8006816 <_dtoa_r+0x906>
 800690c:	4638      	mov	r0, r7
 800690e:	e7c2      	b.n	8006896 <_dtoa_r+0x986>
 8006910:	2301      	movs	r3, #1
 8006912:	e7e3      	b.n	80068dc <_dtoa_r+0x9cc>
 8006914:	9a02      	ldr	r2, [sp, #8]
 8006916:	2a00      	cmp	r2, #0
 8006918:	db04      	blt.n	8006924 <_dtoa_r+0xa14>
 800691a:	d123      	bne.n	8006964 <_dtoa_r+0xa54>
 800691c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800691e:	bb0a      	cbnz	r2, 8006964 <_dtoa_r+0xa54>
 8006920:	9a08      	ldr	r2, [sp, #32]
 8006922:	b9fa      	cbnz	r2, 8006964 <_dtoa_r+0xa54>
 8006924:	2b00      	cmp	r3, #0
 8006926:	ddec      	ble.n	8006902 <_dtoa_r+0x9f2>
 8006928:	4659      	mov	r1, fp
 800692a:	2201      	movs	r2, #1
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fa93 	bl	8006e58 <__lshift>
 8006932:	4631      	mov	r1, r6
 8006934:	4683      	mov	fp, r0
 8006936:	f000 fae3 	bl	8006f00 <__mcmp>
 800693a:	2800      	cmp	r0, #0
 800693c:	dc03      	bgt.n	8006946 <_dtoa_r+0xa36>
 800693e:	d1e0      	bne.n	8006902 <_dtoa_r+0x9f2>
 8006940:	f018 0f01 	tst.w	r8, #1
 8006944:	d0dd      	beq.n	8006902 <_dtoa_r+0x9f2>
 8006946:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800694a:	d1d8      	bne.n	80068fe <_dtoa_r+0x9ee>
 800694c:	9b07      	ldr	r3, [sp, #28]
 800694e:	9a07      	ldr	r2, [sp, #28]
 8006950:	1c5d      	adds	r5, r3, #1
 8006952:	2339      	movs	r3, #57	; 0x39
 8006954:	7013      	strb	r3, [r2, #0]
 8006956:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800695a:	1e6a      	subs	r2, r5, #1
 800695c:	2b39      	cmp	r3, #57	; 0x39
 800695e:	d04d      	beq.n	80069fc <_dtoa_r+0xaec>
 8006960:	3301      	adds	r3, #1
 8006962:	e052      	b.n	8006a0a <_dtoa_r+0xafa>
 8006964:	9a07      	ldr	r2, [sp, #28]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f102 0501 	add.w	r5, r2, #1
 800696c:	dd06      	ble.n	800697c <_dtoa_r+0xa6c>
 800696e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006972:	d0eb      	beq.n	800694c <_dtoa_r+0xa3c>
 8006974:	f108 0801 	add.w	r8, r8, #1
 8006978:	9b07      	ldr	r3, [sp, #28]
 800697a:	e7c4      	b.n	8006906 <_dtoa_r+0x9f6>
 800697c:	9b06      	ldr	r3, [sp, #24]
 800697e:	9a04      	ldr	r2, [sp, #16]
 8006980:	1aeb      	subs	r3, r5, r3
 8006982:	4293      	cmp	r3, r2
 8006984:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006988:	d021      	beq.n	80069ce <_dtoa_r+0xabe>
 800698a:	4659      	mov	r1, fp
 800698c:	2300      	movs	r3, #0
 800698e:	220a      	movs	r2, #10
 8006990:	4620      	mov	r0, r4
 8006992:	f000 f8eb 	bl	8006b6c <__multadd>
 8006996:	45b9      	cmp	r9, r7
 8006998:	4683      	mov	fp, r0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	f04f 020a 	mov.w	r2, #10
 80069a2:	4649      	mov	r1, r9
 80069a4:	4620      	mov	r0, r4
 80069a6:	d105      	bne.n	80069b4 <_dtoa_r+0xaa4>
 80069a8:	f000 f8e0 	bl	8006b6c <__multadd>
 80069ac:	4681      	mov	r9, r0
 80069ae:	4607      	mov	r7, r0
 80069b0:	9507      	str	r5, [sp, #28]
 80069b2:	e778      	b.n	80068a6 <_dtoa_r+0x996>
 80069b4:	f000 f8da 	bl	8006b6c <__multadd>
 80069b8:	4639      	mov	r1, r7
 80069ba:	4681      	mov	r9, r0
 80069bc:	2300      	movs	r3, #0
 80069be:	220a      	movs	r2, #10
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 f8d3 	bl	8006b6c <__multadd>
 80069c6:	4607      	mov	r7, r0
 80069c8:	e7f2      	b.n	80069b0 <_dtoa_r+0xaa0>
 80069ca:	f04f 0900 	mov.w	r9, #0
 80069ce:	4659      	mov	r1, fp
 80069d0:	2201      	movs	r2, #1
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 fa40 	bl	8006e58 <__lshift>
 80069d8:	4631      	mov	r1, r6
 80069da:	4683      	mov	fp, r0
 80069dc:	f000 fa90 	bl	8006f00 <__mcmp>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	dcb8      	bgt.n	8006956 <_dtoa_r+0xa46>
 80069e4:	d102      	bne.n	80069ec <_dtoa_r+0xadc>
 80069e6:	f018 0f01 	tst.w	r8, #1
 80069ea:	d1b4      	bne.n	8006956 <_dtoa_r+0xa46>
 80069ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069f0:	1e6a      	subs	r2, r5, #1
 80069f2:	2b30      	cmp	r3, #48	; 0x30
 80069f4:	f47f af0f 	bne.w	8006816 <_dtoa_r+0x906>
 80069f8:	4615      	mov	r5, r2
 80069fa:	e7f7      	b.n	80069ec <_dtoa_r+0xadc>
 80069fc:	9b06      	ldr	r3, [sp, #24]
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d105      	bne.n	8006a0e <_dtoa_r+0xafe>
 8006a02:	2331      	movs	r3, #49	; 0x31
 8006a04:	9a06      	ldr	r2, [sp, #24]
 8006a06:	f10a 0a01 	add.w	sl, sl, #1
 8006a0a:	7013      	strb	r3, [r2, #0]
 8006a0c:	e703      	b.n	8006816 <_dtoa_r+0x906>
 8006a0e:	4615      	mov	r5, r2
 8006a10:	e7a1      	b.n	8006956 <_dtoa_r+0xa46>
 8006a12:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <_dtoa_r+0xb60>)
 8006a14:	f7ff bae1 	b.w	8005fda <_dtoa_r+0xca>
 8006a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f47f aabb 	bne.w	8005f96 <_dtoa_r+0x86>
 8006a20:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <_dtoa_r+0xb64>)
 8006a22:	f7ff bada 	b.w	8005fda <_dtoa_r+0xca>
 8006a26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	f77f ae3f 	ble.w	80066ac <_dtoa_r+0x79c>
 8006a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a30:	9308      	str	r3, [sp, #32]
 8006a32:	e653      	b.n	80066dc <_dtoa_r+0x7cc>
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	dc03      	bgt.n	8006a42 <_dtoa_r+0xb32>
 8006a3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	f73f aed5 	bgt.w	80067ec <_dtoa_r+0x8dc>
 8006a42:	9d06      	ldr	r5, [sp, #24]
 8006a44:	4631      	mov	r1, r6
 8006a46:	4658      	mov	r0, fp
 8006a48:	f7ff f9d4 	bl	8005df4 <quorem>
 8006a4c:	9b06      	ldr	r3, [sp, #24]
 8006a4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a52:	f805 8b01 	strb.w	r8, [r5], #1
 8006a56:	9a04      	ldr	r2, [sp, #16]
 8006a58:	1aeb      	subs	r3, r5, r3
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	ddb5      	ble.n	80069ca <_dtoa_r+0xaba>
 8006a5e:	4659      	mov	r1, fp
 8006a60:	2300      	movs	r3, #0
 8006a62:	220a      	movs	r2, #10
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 f881 	bl	8006b6c <__multadd>
 8006a6a:	4683      	mov	fp, r0
 8006a6c:	e7ea      	b.n	8006a44 <_dtoa_r+0xb34>
 8006a6e:	bf00      	nop
 8006a70:	08007634 	.word	0x08007634
 8006a74:	08007658 	.word	0x08007658

08006a78 <_localeconv_r>:
 8006a78:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <_localeconv_r+0x14>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6a18      	ldr	r0, [r3, #32]
 8006a7e:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <_localeconv_r+0x18>)
 8006a80:	2800      	cmp	r0, #0
 8006a82:	bf08      	it	eq
 8006a84:	4618      	moveq	r0, r3
 8006a86:	30f0      	adds	r0, #240	; 0xf0
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20000010 	.word	0x20000010
 8006a90:	20000074 	.word	0x20000074

08006a94 <malloc>:
 8006a94:	4b02      	ldr	r3, [pc, #8]	; (8006aa0 <malloc+0xc>)
 8006a96:	4601      	mov	r1, r0
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	f000 bb53 	b.w	8007144 <_malloc_r>
 8006a9e:	bf00      	nop
 8006aa0:	20000010 	.word	0x20000010

08006aa4 <memchr>:
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	b2c9      	uxtb	r1, r1
 8006aa8:	4402      	add	r2, r0
 8006aaa:	4290      	cmp	r0, r2
 8006aac:	4603      	mov	r3, r0
 8006aae:	d101      	bne.n	8006ab4 <memchr+0x10>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e003      	b.n	8006abc <memchr+0x18>
 8006ab4:	781c      	ldrb	r4, [r3, #0]
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	428c      	cmp	r4, r1
 8006aba:	d1f6      	bne.n	8006aaa <memchr+0x6>
 8006abc:	4618      	mov	r0, r3
 8006abe:	bd10      	pop	{r4, pc}

08006ac0 <memcpy>:
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	1e43      	subs	r3, r0, #1
 8006ac4:	440a      	add	r2, r1
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	d100      	bne.n	8006acc <memcpy+0xc>
 8006aca:	bd10      	pop	{r4, pc}
 8006acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ad4:	e7f7      	b.n	8006ac6 <memcpy+0x6>

08006ad6 <_Balloc>:
 8006ad6:	b570      	push	{r4, r5, r6, lr}
 8006ad8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ada:	4604      	mov	r4, r0
 8006adc:	460e      	mov	r6, r1
 8006ade:	b93d      	cbnz	r5, 8006af0 <_Balloc+0x1a>
 8006ae0:	2010      	movs	r0, #16
 8006ae2:	f7ff ffd7 	bl	8006a94 <malloc>
 8006ae6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ae8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006aec:	6005      	str	r5, [r0, #0]
 8006aee:	60c5      	str	r5, [r0, #12]
 8006af0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006af2:	68eb      	ldr	r3, [r5, #12]
 8006af4:	b183      	cbz	r3, 8006b18 <_Balloc+0x42>
 8006af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006afe:	b9b8      	cbnz	r0, 8006b30 <_Balloc+0x5a>
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f506 	lsl.w	r5, r1, r6
 8006b06:	1d6a      	adds	r2, r5, #5
 8006b08:	0092      	lsls	r2, r2, #2
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 fabf 	bl	800708e <_calloc_r>
 8006b10:	b160      	cbz	r0, 8006b2c <_Balloc+0x56>
 8006b12:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006b16:	e00e      	b.n	8006b36 <_Balloc+0x60>
 8006b18:	2221      	movs	r2, #33	; 0x21
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 fab6 	bl	800708e <_calloc_r>
 8006b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b24:	60e8      	str	r0, [r5, #12]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e4      	bne.n	8006af6 <_Balloc+0x20>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	6802      	ldr	r2, [r0, #0]
 8006b32:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006b36:	2300      	movs	r3, #0
 8006b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b3c:	e7f7      	b.n	8006b2e <_Balloc+0x58>

08006b3e <_Bfree>:
 8006b3e:	b570      	push	{r4, r5, r6, lr}
 8006b40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006b42:	4606      	mov	r6, r0
 8006b44:	460d      	mov	r5, r1
 8006b46:	b93c      	cbnz	r4, 8006b58 <_Bfree+0x1a>
 8006b48:	2010      	movs	r0, #16
 8006b4a:	f7ff ffa3 	bl	8006a94 <malloc>
 8006b4e:	6270      	str	r0, [r6, #36]	; 0x24
 8006b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b54:	6004      	str	r4, [r0, #0]
 8006b56:	60c4      	str	r4, [r0, #12]
 8006b58:	b13d      	cbz	r5, 8006b6a <_Bfree+0x2c>
 8006b5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b5c:	686a      	ldr	r2, [r5, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b64:	6029      	str	r1, [r5, #0]
 8006b66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}

08006b6c <__multadd>:
 8006b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b70:	461f      	mov	r7, r3
 8006b72:	4606      	mov	r6, r0
 8006b74:	460c      	mov	r4, r1
 8006b76:	2300      	movs	r3, #0
 8006b78:	690d      	ldr	r5, [r1, #16]
 8006b7a:	f101 0c14 	add.w	ip, r1, #20
 8006b7e:	f8dc 0000 	ldr.w	r0, [ip]
 8006b82:	3301      	adds	r3, #1
 8006b84:	b281      	uxth	r1, r0
 8006b86:	fb02 7101 	mla	r1, r2, r1, r7
 8006b8a:	0c00      	lsrs	r0, r0, #16
 8006b8c:	0c0f      	lsrs	r7, r1, #16
 8006b8e:	fb02 7000 	mla	r0, r2, r0, r7
 8006b92:	b289      	uxth	r1, r1
 8006b94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006b98:	429d      	cmp	r5, r3
 8006b9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006b9e:	f84c 1b04 	str.w	r1, [ip], #4
 8006ba2:	dcec      	bgt.n	8006b7e <__multadd+0x12>
 8006ba4:	b1d7      	cbz	r7, 8006bdc <__multadd+0x70>
 8006ba6:	68a3      	ldr	r3, [r4, #8]
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	dc12      	bgt.n	8006bd2 <__multadd+0x66>
 8006bac:	6861      	ldr	r1, [r4, #4]
 8006bae:	4630      	mov	r0, r6
 8006bb0:	3101      	adds	r1, #1
 8006bb2:	f7ff ff90 	bl	8006ad6 <_Balloc>
 8006bb6:	4680      	mov	r8, r0
 8006bb8:	6922      	ldr	r2, [r4, #16]
 8006bba:	f104 010c 	add.w	r1, r4, #12
 8006bbe:	3202      	adds	r2, #2
 8006bc0:	0092      	lsls	r2, r2, #2
 8006bc2:	300c      	adds	r0, #12
 8006bc4:	f7ff ff7c 	bl	8006ac0 <memcpy>
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7ff ffb7 	bl	8006b3e <_Bfree>
 8006bd0:	4644      	mov	r4, r8
 8006bd2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bd6:	3501      	adds	r5, #1
 8006bd8:	615f      	str	r7, [r3, #20]
 8006bda:	6125      	str	r5, [r4, #16]
 8006bdc:	4620      	mov	r0, r4
 8006bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006be2 <__hi0bits>:
 8006be2:	0c02      	lsrs	r2, r0, #16
 8006be4:	0412      	lsls	r2, r2, #16
 8006be6:	4603      	mov	r3, r0
 8006be8:	b9b2      	cbnz	r2, 8006c18 <__hi0bits+0x36>
 8006bea:	0403      	lsls	r3, r0, #16
 8006bec:	2010      	movs	r0, #16
 8006bee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006bf2:	bf04      	itt	eq
 8006bf4:	021b      	lsleq	r3, r3, #8
 8006bf6:	3008      	addeq	r0, #8
 8006bf8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006bfc:	bf04      	itt	eq
 8006bfe:	011b      	lsleq	r3, r3, #4
 8006c00:	3004      	addeq	r0, #4
 8006c02:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c06:	bf04      	itt	eq
 8006c08:	009b      	lsleq	r3, r3, #2
 8006c0a:	3002      	addeq	r0, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	db06      	blt.n	8006c1e <__hi0bits+0x3c>
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	d503      	bpl.n	8006c1c <__hi0bits+0x3a>
 8006c14:	3001      	adds	r0, #1
 8006c16:	4770      	bx	lr
 8006c18:	2000      	movs	r0, #0
 8006c1a:	e7e8      	b.n	8006bee <__hi0bits+0xc>
 8006c1c:	2020      	movs	r0, #32
 8006c1e:	4770      	bx	lr

08006c20 <__lo0bits>:
 8006c20:	6803      	ldr	r3, [r0, #0]
 8006c22:	4601      	mov	r1, r0
 8006c24:	f013 0207 	ands.w	r2, r3, #7
 8006c28:	d00b      	beq.n	8006c42 <__lo0bits+0x22>
 8006c2a:	07da      	lsls	r2, r3, #31
 8006c2c:	d423      	bmi.n	8006c76 <__lo0bits+0x56>
 8006c2e:	0798      	lsls	r0, r3, #30
 8006c30:	bf49      	itett	mi
 8006c32:	085b      	lsrmi	r3, r3, #1
 8006c34:	089b      	lsrpl	r3, r3, #2
 8006c36:	2001      	movmi	r0, #1
 8006c38:	600b      	strmi	r3, [r1, #0]
 8006c3a:	bf5c      	itt	pl
 8006c3c:	600b      	strpl	r3, [r1, #0]
 8006c3e:	2002      	movpl	r0, #2
 8006c40:	4770      	bx	lr
 8006c42:	b298      	uxth	r0, r3
 8006c44:	b9a8      	cbnz	r0, 8006c72 <__lo0bits+0x52>
 8006c46:	2010      	movs	r0, #16
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c4e:	bf04      	itt	eq
 8006c50:	0a1b      	lsreq	r3, r3, #8
 8006c52:	3008      	addeq	r0, #8
 8006c54:	071a      	lsls	r2, r3, #28
 8006c56:	bf04      	itt	eq
 8006c58:	091b      	lsreq	r3, r3, #4
 8006c5a:	3004      	addeq	r0, #4
 8006c5c:	079a      	lsls	r2, r3, #30
 8006c5e:	bf04      	itt	eq
 8006c60:	089b      	lsreq	r3, r3, #2
 8006c62:	3002      	addeq	r0, #2
 8006c64:	07da      	lsls	r2, r3, #31
 8006c66:	d402      	bmi.n	8006c6e <__lo0bits+0x4e>
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	d006      	beq.n	8006c7a <__lo0bits+0x5a>
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	600b      	str	r3, [r1, #0]
 8006c70:	4770      	bx	lr
 8006c72:	4610      	mov	r0, r2
 8006c74:	e7e9      	b.n	8006c4a <__lo0bits+0x2a>
 8006c76:	2000      	movs	r0, #0
 8006c78:	4770      	bx	lr
 8006c7a:	2020      	movs	r0, #32
 8006c7c:	4770      	bx	lr

08006c7e <__i2b>:
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	460c      	mov	r4, r1
 8006c82:	2101      	movs	r1, #1
 8006c84:	f7ff ff27 	bl	8006ad6 <_Balloc>
 8006c88:	2201      	movs	r2, #1
 8006c8a:	6144      	str	r4, [r0, #20]
 8006c8c:	6102      	str	r2, [r0, #16]
 8006c8e:	bd10      	pop	{r4, pc}

08006c90 <__multiply>:
 8006c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	4614      	mov	r4, r2
 8006c96:	690a      	ldr	r2, [r1, #16]
 8006c98:	6923      	ldr	r3, [r4, #16]
 8006c9a:	4688      	mov	r8, r1
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	bfbe      	ittt	lt
 8006ca0:	460b      	movlt	r3, r1
 8006ca2:	46a0      	movlt	r8, r4
 8006ca4:	461c      	movlt	r4, r3
 8006ca6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006caa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006cae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006cb2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006cb6:	eb07 0609 	add.w	r6, r7, r9
 8006cba:	42b3      	cmp	r3, r6
 8006cbc:	bfb8      	it	lt
 8006cbe:	3101      	addlt	r1, #1
 8006cc0:	f7ff ff09 	bl	8006ad6 <_Balloc>
 8006cc4:	f100 0514 	add.w	r5, r0, #20
 8006cc8:	462b      	mov	r3, r5
 8006cca:	2200      	movs	r2, #0
 8006ccc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006cd0:	4573      	cmp	r3, lr
 8006cd2:	d316      	bcc.n	8006d02 <__multiply+0x72>
 8006cd4:	f104 0214 	add.w	r2, r4, #20
 8006cd8:	f108 0114 	add.w	r1, r8, #20
 8006cdc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006ce0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	9201      	str	r2, [sp, #4]
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d80c      	bhi.n	8006d08 <__multiply+0x78>
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	dd03      	ble.n	8006cfa <__multiply+0x6a>
 8006cf2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d05d      	beq.n	8006db6 <__multiply+0x126>
 8006cfa:	6106      	str	r6, [r0, #16]
 8006cfc:	b003      	add	sp, #12
 8006cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d02:	f843 2b04 	str.w	r2, [r3], #4
 8006d06:	e7e3      	b.n	8006cd0 <__multiply+0x40>
 8006d08:	f8b2 b000 	ldrh.w	fp, [r2]
 8006d0c:	f1bb 0f00 	cmp.w	fp, #0
 8006d10:	d023      	beq.n	8006d5a <__multiply+0xca>
 8006d12:	4689      	mov	r9, r1
 8006d14:	46ac      	mov	ip, r5
 8006d16:	f04f 0800 	mov.w	r8, #0
 8006d1a:	f859 4b04 	ldr.w	r4, [r9], #4
 8006d1e:	f8dc a000 	ldr.w	sl, [ip]
 8006d22:	b2a3      	uxth	r3, r4
 8006d24:	fa1f fa8a 	uxth.w	sl, sl
 8006d28:	fb0b a303 	mla	r3, fp, r3, sl
 8006d2c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006d30:	f8dc 4000 	ldr.w	r4, [ip]
 8006d34:	4443      	add	r3, r8
 8006d36:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006d3a:	fb0b 840a 	mla	r4, fp, sl, r8
 8006d3e:	46e2      	mov	sl, ip
 8006d40:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d4a:	454f      	cmp	r7, r9
 8006d4c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006d50:	f84a 3b04 	str.w	r3, [sl], #4
 8006d54:	d82b      	bhi.n	8006dae <__multiply+0x11e>
 8006d56:	f8cc 8004 	str.w	r8, [ip, #4]
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	3204      	adds	r2, #4
 8006d5e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006d62:	f1ba 0f00 	cmp.w	sl, #0
 8006d66:	d020      	beq.n	8006daa <__multiply+0x11a>
 8006d68:	4689      	mov	r9, r1
 8006d6a:	46a8      	mov	r8, r5
 8006d6c:	f04f 0b00 	mov.w	fp, #0
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	f8b9 c000 	ldrh.w	ip, [r9]
 8006d76:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006d80:	46c4      	mov	ip, r8
 8006d82:	445c      	add	r4, fp
 8006d84:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d88:	f84c 3b04 	str.w	r3, [ip], #4
 8006d8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d90:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	fb0a b303 	mla	r3, sl, r3, fp
 8006d9a:	454f      	cmp	r7, r9
 8006d9c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006da0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006da4:	d805      	bhi.n	8006db2 <__multiply+0x122>
 8006da6:	f8c8 3004 	str.w	r3, [r8, #4]
 8006daa:	3504      	adds	r5, #4
 8006dac:	e79b      	b.n	8006ce6 <__multiply+0x56>
 8006dae:	46d4      	mov	ip, sl
 8006db0:	e7b3      	b.n	8006d1a <__multiply+0x8a>
 8006db2:	46e0      	mov	r8, ip
 8006db4:	e7dd      	b.n	8006d72 <__multiply+0xe2>
 8006db6:	3e01      	subs	r6, #1
 8006db8:	e799      	b.n	8006cee <__multiply+0x5e>
	...

08006dbc <__pow5mult>:
 8006dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc0:	4615      	mov	r5, r2
 8006dc2:	f012 0203 	ands.w	r2, r2, #3
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	d007      	beq.n	8006ddc <__pow5mult+0x20>
 8006dcc:	4c21      	ldr	r4, [pc, #132]	; (8006e54 <__pow5mult+0x98>)
 8006dce:	3a01      	subs	r2, #1
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dd6:	f7ff fec9 	bl	8006b6c <__multadd>
 8006dda:	4607      	mov	r7, r0
 8006ddc:	10ad      	asrs	r5, r5, #2
 8006dde:	d035      	beq.n	8006e4c <__pow5mult+0x90>
 8006de0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006de2:	b93c      	cbnz	r4, 8006df4 <__pow5mult+0x38>
 8006de4:	2010      	movs	r0, #16
 8006de6:	f7ff fe55 	bl	8006a94 <malloc>
 8006dea:	6270      	str	r0, [r6, #36]	; 0x24
 8006dec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006df0:	6004      	str	r4, [r0, #0]
 8006df2:	60c4      	str	r4, [r0, #12]
 8006df4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006df8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dfc:	b94c      	cbnz	r4, 8006e12 <__pow5mult+0x56>
 8006dfe:	f240 2171 	movw	r1, #625	; 0x271
 8006e02:	4630      	mov	r0, r6
 8006e04:	f7ff ff3b 	bl	8006c7e <__i2b>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e10:	6003      	str	r3, [r0, #0]
 8006e12:	f04f 0800 	mov.w	r8, #0
 8006e16:	07eb      	lsls	r3, r5, #31
 8006e18:	d50a      	bpl.n	8006e30 <__pow5mult+0x74>
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f7ff ff36 	bl	8006c90 <__multiply>
 8006e24:	4681      	mov	r9, r0
 8006e26:	4639      	mov	r1, r7
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f7ff fe88 	bl	8006b3e <_Bfree>
 8006e2e:	464f      	mov	r7, r9
 8006e30:	106d      	asrs	r5, r5, #1
 8006e32:	d00b      	beq.n	8006e4c <__pow5mult+0x90>
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	b938      	cbnz	r0, 8006e48 <__pow5mult+0x8c>
 8006e38:	4622      	mov	r2, r4
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f7ff ff27 	bl	8006c90 <__multiply>
 8006e42:	6020      	str	r0, [r4, #0]
 8006e44:	f8c0 8000 	str.w	r8, [r0]
 8006e48:	4604      	mov	r4, r0
 8006e4a:	e7e4      	b.n	8006e16 <__pow5mult+0x5a>
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e52:	bf00      	nop
 8006e54:	08007758 	.word	0x08007758

08006e58 <__lshift>:
 8006e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	4607      	mov	r7, r0
 8006e60:	4616      	mov	r6, r2
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e68:	eb0a 0903 	add.w	r9, sl, r3
 8006e6c:	6849      	ldr	r1, [r1, #4]
 8006e6e:	68a3      	ldr	r3, [r4, #8]
 8006e70:	f109 0501 	add.w	r5, r9, #1
 8006e74:	42ab      	cmp	r3, r5
 8006e76:	db32      	blt.n	8006ede <__lshift+0x86>
 8006e78:	4638      	mov	r0, r7
 8006e7a:	f7ff fe2c 	bl	8006ad6 <_Balloc>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4680      	mov	r8, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	f100 0114 	add.w	r1, r0, #20
 8006e88:	4553      	cmp	r3, sl
 8006e8a:	db2b      	blt.n	8006ee4 <__lshift+0x8c>
 8006e8c:	6920      	ldr	r0, [r4, #16]
 8006e8e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e92:	f104 0314 	add.w	r3, r4, #20
 8006e96:	f016 021f 	ands.w	r2, r6, #31
 8006e9a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e9e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ea2:	d025      	beq.n	8006ef0 <__lshift+0x98>
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	f1c2 0e20 	rsb	lr, r2, #32
 8006eaa:	468a      	mov	sl, r1
 8006eac:	681e      	ldr	r6, [r3, #0]
 8006eae:	4096      	lsls	r6, r2
 8006eb0:	4330      	orrs	r0, r6
 8006eb2:	f84a 0b04 	str.w	r0, [sl], #4
 8006eb6:	f853 0b04 	ldr.w	r0, [r3], #4
 8006eba:	459c      	cmp	ip, r3
 8006ebc:	fa20 f00e 	lsr.w	r0, r0, lr
 8006ec0:	d814      	bhi.n	8006eec <__lshift+0x94>
 8006ec2:	6048      	str	r0, [r1, #4]
 8006ec4:	b108      	cbz	r0, 8006eca <__lshift+0x72>
 8006ec6:	f109 0502 	add.w	r5, r9, #2
 8006eca:	3d01      	subs	r5, #1
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f8c8 5010 	str.w	r5, [r8, #16]
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	f7ff fe33 	bl	8006b3e <_Bfree>
 8006ed8:	4640      	mov	r0, r8
 8006eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ede:	3101      	adds	r1, #1
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	e7c7      	b.n	8006e74 <__lshift+0x1c>
 8006ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	e7cd      	b.n	8006e88 <__lshift+0x30>
 8006eec:	4651      	mov	r1, sl
 8006eee:	e7dc      	b.n	8006eaa <__lshift+0x52>
 8006ef0:	3904      	subs	r1, #4
 8006ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef6:	459c      	cmp	ip, r3
 8006ef8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006efc:	d8f9      	bhi.n	8006ef2 <__lshift+0x9a>
 8006efe:	e7e4      	b.n	8006eca <__lshift+0x72>

08006f00 <__mcmp>:
 8006f00:	6903      	ldr	r3, [r0, #16]
 8006f02:	690a      	ldr	r2, [r1, #16]
 8006f04:	b530      	push	{r4, r5, lr}
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	d10c      	bne.n	8006f24 <__mcmp+0x24>
 8006f0a:	0092      	lsls	r2, r2, #2
 8006f0c:	3014      	adds	r0, #20
 8006f0e:	3114      	adds	r1, #20
 8006f10:	1884      	adds	r4, r0, r2
 8006f12:	4411      	add	r1, r2
 8006f14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f1c:	4295      	cmp	r5, r2
 8006f1e:	d003      	beq.n	8006f28 <__mcmp+0x28>
 8006f20:	d305      	bcc.n	8006f2e <__mcmp+0x2e>
 8006f22:	2301      	movs	r3, #1
 8006f24:	4618      	mov	r0, r3
 8006f26:	bd30      	pop	{r4, r5, pc}
 8006f28:	42a0      	cmp	r0, r4
 8006f2a:	d3f3      	bcc.n	8006f14 <__mcmp+0x14>
 8006f2c:	e7fa      	b.n	8006f24 <__mcmp+0x24>
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f32:	e7f7      	b.n	8006f24 <__mcmp+0x24>

08006f34 <__mdiff>:
 8006f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f38:	460d      	mov	r5, r1
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	4628      	mov	r0, r5
 8006f40:	4614      	mov	r4, r2
 8006f42:	f7ff ffdd 	bl	8006f00 <__mcmp>
 8006f46:	1e06      	subs	r6, r0, #0
 8006f48:	d108      	bne.n	8006f5c <__mdiff+0x28>
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	f7ff fdc2 	bl	8006ad6 <_Balloc>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5c:	bfa4      	itt	ge
 8006f5e:	4623      	movge	r3, r4
 8006f60:	462c      	movge	r4, r5
 8006f62:	4638      	mov	r0, r7
 8006f64:	6861      	ldr	r1, [r4, #4]
 8006f66:	bfa6      	itte	ge
 8006f68:	461d      	movge	r5, r3
 8006f6a:	2600      	movge	r6, #0
 8006f6c:	2601      	movlt	r6, #1
 8006f6e:	f7ff fdb2 	bl	8006ad6 <_Balloc>
 8006f72:	f04f 0e00 	mov.w	lr, #0
 8006f76:	60c6      	str	r6, [r0, #12]
 8006f78:	692b      	ldr	r3, [r5, #16]
 8006f7a:	6926      	ldr	r6, [r4, #16]
 8006f7c:	f104 0214 	add.w	r2, r4, #20
 8006f80:	f105 0914 	add.w	r9, r5, #20
 8006f84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006f88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006f8c:	f100 0114 	add.w	r1, r0, #20
 8006f90:	f852 ab04 	ldr.w	sl, [r2], #4
 8006f94:	f859 5b04 	ldr.w	r5, [r9], #4
 8006f98:	fa1f f38a 	uxth.w	r3, sl
 8006f9c:	4473      	add	r3, lr
 8006f9e:	b2ac      	uxth	r4, r5
 8006fa0:	1b1b      	subs	r3, r3, r4
 8006fa2:	0c2c      	lsrs	r4, r5, #16
 8006fa4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006fa8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006fb2:	45c8      	cmp	r8, r9
 8006fb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006fb8:	4694      	mov	ip, r2
 8006fba:	f841 4b04 	str.w	r4, [r1], #4
 8006fbe:	d8e7      	bhi.n	8006f90 <__mdiff+0x5c>
 8006fc0:	45bc      	cmp	ip, r7
 8006fc2:	d304      	bcc.n	8006fce <__mdiff+0x9a>
 8006fc4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006fc8:	b183      	cbz	r3, 8006fec <__mdiff+0xb8>
 8006fca:	6106      	str	r6, [r0, #16]
 8006fcc:	e7c4      	b.n	8006f58 <__mdiff+0x24>
 8006fce:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006fd2:	b2a2      	uxth	r2, r4
 8006fd4:	4472      	add	r2, lr
 8006fd6:	1413      	asrs	r3, r2, #16
 8006fd8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006fdc:	b292      	uxth	r2, r2
 8006fde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fe2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006fe6:	f841 2b04 	str.w	r2, [r1], #4
 8006fea:	e7e9      	b.n	8006fc0 <__mdiff+0x8c>
 8006fec:	3e01      	subs	r6, #1
 8006fee:	e7e9      	b.n	8006fc4 <__mdiff+0x90>

08006ff0 <__d2b>:
 8006ff0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006ff4:	461c      	mov	r4, r3
 8006ff6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	4690      	mov	r8, r2
 8006ffe:	f7ff fd6a 	bl	8006ad6 <_Balloc>
 8007002:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007006:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800700a:	4607      	mov	r7, r0
 800700c:	bb34      	cbnz	r4, 800705c <__d2b+0x6c>
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	f1b8 0200 	subs.w	r2, r8, #0
 8007014:	d027      	beq.n	8007066 <__d2b+0x76>
 8007016:	a802      	add	r0, sp, #8
 8007018:	f840 2d08 	str.w	r2, [r0, #-8]!
 800701c:	f7ff fe00 	bl	8006c20 <__lo0bits>
 8007020:	9900      	ldr	r1, [sp, #0]
 8007022:	b1f0      	cbz	r0, 8007062 <__d2b+0x72>
 8007024:	9a01      	ldr	r2, [sp, #4]
 8007026:	f1c0 0320 	rsb	r3, r0, #32
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	430b      	orrs	r3, r1
 8007030:	40c2      	lsrs	r2, r0
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	9201      	str	r2, [sp, #4]
 8007036:	9b01      	ldr	r3, [sp, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	bf14      	ite	ne
 800703c:	2102      	movne	r1, #2
 800703e:	2101      	moveq	r1, #1
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	6139      	str	r1, [r7, #16]
 8007044:	b1c4      	cbz	r4, 8007078 <__d2b+0x88>
 8007046:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800704a:	4404      	add	r4, r0
 800704c:	6034      	str	r4, [r6, #0]
 800704e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007052:	6028      	str	r0, [r5, #0]
 8007054:	4638      	mov	r0, r7
 8007056:	b002      	add	sp, #8
 8007058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800705c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007060:	e7d5      	b.n	800700e <__d2b+0x1e>
 8007062:	6179      	str	r1, [r7, #20]
 8007064:	e7e7      	b.n	8007036 <__d2b+0x46>
 8007066:	a801      	add	r0, sp, #4
 8007068:	f7ff fdda 	bl	8006c20 <__lo0bits>
 800706c:	2101      	movs	r1, #1
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	6139      	str	r1, [r7, #16]
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	3020      	adds	r0, #32
 8007076:	e7e5      	b.n	8007044 <__d2b+0x54>
 8007078:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800707c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007080:	6030      	str	r0, [r6, #0]
 8007082:	6918      	ldr	r0, [r3, #16]
 8007084:	f7ff fdad 	bl	8006be2 <__hi0bits>
 8007088:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800708c:	e7e1      	b.n	8007052 <__d2b+0x62>

0800708e <_calloc_r>:
 800708e:	b538      	push	{r3, r4, r5, lr}
 8007090:	fb02 f401 	mul.w	r4, r2, r1
 8007094:	4621      	mov	r1, r4
 8007096:	f000 f855 	bl	8007144 <_malloc_r>
 800709a:	4605      	mov	r5, r0
 800709c:	b118      	cbz	r0, 80070a6 <_calloc_r+0x18>
 800709e:	4622      	mov	r2, r4
 80070a0:	2100      	movs	r1, #0
 80070a2:	f7fe fa2f 	bl	8005504 <memset>
 80070a6:	4628      	mov	r0, r5
 80070a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080070ac <_free_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4605      	mov	r5, r0
 80070b0:	2900      	cmp	r1, #0
 80070b2:	d043      	beq.n	800713c <_free_r+0x90>
 80070b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070b8:	1f0c      	subs	r4, r1, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	bfb8      	it	lt
 80070be:	18e4      	addlt	r4, r4, r3
 80070c0:	f000 fa27 	bl	8007512 <__malloc_lock>
 80070c4:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <_free_r+0x94>)
 80070c6:	6813      	ldr	r3, [r2, #0]
 80070c8:	4610      	mov	r0, r2
 80070ca:	b933      	cbnz	r3, 80070da <_free_r+0x2e>
 80070cc:	6063      	str	r3, [r4, #4]
 80070ce:	6014      	str	r4, [r2, #0]
 80070d0:	4628      	mov	r0, r5
 80070d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070d6:	f000 ba1d 	b.w	8007514 <__malloc_unlock>
 80070da:	42a3      	cmp	r3, r4
 80070dc:	d90b      	bls.n	80070f6 <_free_r+0x4a>
 80070de:	6821      	ldr	r1, [r4, #0]
 80070e0:	1862      	adds	r2, r4, r1
 80070e2:	4293      	cmp	r3, r2
 80070e4:	bf01      	itttt	eq
 80070e6:	681a      	ldreq	r2, [r3, #0]
 80070e8:	685b      	ldreq	r3, [r3, #4]
 80070ea:	1852      	addeq	r2, r2, r1
 80070ec:	6022      	streq	r2, [r4, #0]
 80070ee:	6063      	str	r3, [r4, #4]
 80070f0:	6004      	str	r4, [r0, #0]
 80070f2:	e7ed      	b.n	80070d0 <_free_r+0x24>
 80070f4:	4613      	mov	r3, r2
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	b10a      	cbz	r2, 80070fe <_free_r+0x52>
 80070fa:	42a2      	cmp	r2, r4
 80070fc:	d9fa      	bls.n	80070f4 <_free_r+0x48>
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	1858      	adds	r0, r3, r1
 8007102:	42a0      	cmp	r0, r4
 8007104:	d10b      	bne.n	800711e <_free_r+0x72>
 8007106:	6820      	ldr	r0, [r4, #0]
 8007108:	4401      	add	r1, r0
 800710a:	1858      	adds	r0, r3, r1
 800710c:	4282      	cmp	r2, r0
 800710e:	6019      	str	r1, [r3, #0]
 8007110:	d1de      	bne.n	80070d0 <_free_r+0x24>
 8007112:	6810      	ldr	r0, [r2, #0]
 8007114:	6852      	ldr	r2, [r2, #4]
 8007116:	4401      	add	r1, r0
 8007118:	6019      	str	r1, [r3, #0]
 800711a:	605a      	str	r2, [r3, #4]
 800711c:	e7d8      	b.n	80070d0 <_free_r+0x24>
 800711e:	d902      	bls.n	8007126 <_free_r+0x7a>
 8007120:	230c      	movs	r3, #12
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	e7d4      	b.n	80070d0 <_free_r+0x24>
 8007126:	6820      	ldr	r0, [r4, #0]
 8007128:	1821      	adds	r1, r4, r0
 800712a:	428a      	cmp	r2, r1
 800712c:	bf01      	itttt	eq
 800712e:	6811      	ldreq	r1, [r2, #0]
 8007130:	6852      	ldreq	r2, [r2, #4]
 8007132:	1809      	addeq	r1, r1, r0
 8007134:	6021      	streq	r1, [r4, #0]
 8007136:	6062      	str	r2, [r4, #4]
 8007138:	605c      	str	r4, [r3, #4]
 800713a:	e7c9      	b.n	80070d0 <_free_r+0x24>
 800713c:	bd38      	pop	{r3, r4, r5, pc}
 800713e:	bf00      	nop
 8007140:	200002e8 	.word	0x200002e8

08007144 <_malloc_r>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	1ccd      	adds	r5, r1, #3
 8007148:	f025 0503 	bic.w	r5, r5, #3
 800714c:	3508      	adds	r5, #8
 800714e:	2d0c      	cmp	r5, #12
 8007150:	bf38      	it	cc
 8007152:	250c      	movcc	r5, #12
 8007154:	2d00      	cmp	r5, #0
 8007156:	4606      	mov	r6, r0
 8007158:	db01      	blt.n	800715e <_malloc_r+0x1a>
 800715a:	42a9      	cmp	r1, r5
 800715c:	d903      	bls.n	8007166 <_malloc_r+0x22>
 800715e:	230c      	movs	r3, #12
 8007160:	6033      	str	r3, [r6, #0]
 8007162:	2000      	movs	r0, #0
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	f000 f9d4 	bl	8007512 <__malloc_lock>
 800716a:	4a21      	ldr	r2, [pc, #132]	; (80071f0 <_malloc_r+0xac>)
 800716c:	6814      	ldr	r4, [r2, #0]
 800716e:	4621      	mov	r1, r4
 8007170:	b991      	cbnz	r1, 8007198 <_malloc_r+0x54>
 8007172:	4c20      	ldr	r4, [pc, #128]	; (80071f4 <_malloc_r+0xb0>)
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	b91b      	cbnz	r3, 8007180 <_malloc_r+0x3c>
 8007178:	4630      	mov	r0, r6
 800717a:	f000 f98f 	bl	800749c <_sbrk_r>
 800717e:	6020      	str	r0, [r4, #0]
 8007180:	4629      	mov	r1, r5
 8007182:	4630      	mov	r0, r6
 8007184:	f000 f98a 	bl	800749c <_sbrk_r>
 8007188:	1c43      	adds	r3, r0, #1
 800718a:	d124      	bne.n	80071d6 <_malloc_r+0x92>
 800718c:	230c      	movs	r3, #12
 800718e:	4630      	mov	r0, r6
 8007190:	6033      	str	r3, [r6, #0]
 8007192:	f000 f9bf 	bl	8007514 <__malloc_unlock>
 8007196:	e7e4      	b.n	8007162 <_malloc_r+0x1e>
 8007198:	680b      	ldr	r3, [r1, #0]
 800719a:	1b5b      	subs	r3, r3, r5
 800719c:	d418      	bmi.n	80071d0 <_malloc_r+0x8c>
 800719e:	2b0b      	cmp	r3, #11
 80071a0:	d90f      	bls.n	80071c2 <_malloc_r+0x7e>
 80071a2:	600b      	str	r3, [r1, #0]
 80071a4:	18cc      	adds	r4, r1, r3
 80071a6:	50cd      	str	r5, [r1, r3]
 80071a8:	4630      	mov	r0, r6
 80071aa:	f000 f9b3 	bl	8007514 <__malloc_unlock>
 80071ae:	f104 000b 	add.w	r0, r4, #11
 80071b2:	1d23      	adds	r3, r4, #4
 80071b4:	f020 0007 	bic.w	r0, r0, #7
 80071b8:	1ac3      	subs	r3, r0, r3
 80071ba:	d0d3      	beq.n	8007164 <_malloc_r+0x20>
 80071bc:	425a      	negs	r2, r3
 80071be:	50e2      	str	r2, [r4, r3]
 80071c0:	e7d0      	b.n	8007164 <_malloc_r+0x20>
 80071c2:	684b      	ldr	r3, [r1, #4]
 80071c4:	428c      	cmp	r4, r1
 80071c6:	bf16      	itet	ne
 80071c8:	6063      	strne	r3, [r4, #4]
 80071ca:	6013      	streq	r3, [r2, #0]
 80071cc:	460c      	movne	r4, r1
 80071ce:	e7eb      	b.n	80071a8 <_malloc_r+0x64>
 80071d0:	460c      	mov	r4, r1
 80071d2:	6849      	ldr	r1, [r1, #4]
 80071d4:	e7cc      	b.n	8007170 <_malloc_r+0x2c>
 80071d6:	1cc4      	adds	r4, r0, #3
 80071d8:	f024 0403 	bic.w	r4, r4, #3
 80071dc:	42a0      	cmp	r0, r4
 80071de:	d005      	beq.n	80071ec <_malloc_r+0xa8>
 80071e0:	1a21      	subs	r1, r4, r0
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 f95a 	bl	800749c <_sbrk_r>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d0cf      	beq.n	800718c <_malloc_r+0x48>
 80071ec:	6025      	str	r5, [r4, #0]
 80071ee:	e7db      	b.n	80071a8 <_malloc_r+0x64>
 80071f0:	200002e8 	.word	0x200002e8
 80071f4:	200002ec 	.word	0x200002ec

080071f8 <__ssputs_r>:
 80071f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071fc:	688e      	ldr	r6, [r1, #8]
 80071fe:	4682      	mov	sl, r0
 8007200:	429e      	cmp	r6, r3
 8007202:	460c      	mov	r4, r1
 8007204:	4690      	mov	r8, r2
 8007206:	4699      	mov	r9, r3
 8007208:	d837      	bhi.n	800727a <__ssputs_r+0x82>
 800720a:	898a      	ldrh	r2, [r1, #12]
 800720c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007210:	d031      	beq.n	8007276 <__ssputs_r+0x7e>
 8007212:	2302      	movs	r3, #2
 8007214:	6825      	ldr	r5, [r4, #0]
 8007216:	6909      	ldr	r1, [r1, #16]
 8007218:	1a6f      	subs	r7, r5, r1
 800721a:	6965      	ldr	r5, [r4, #20]
 800721c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007220:	fb95 f5f3 	sdiv	r5, r5, r3
 8007224:	f109 0301 	add.w	r3, r9, #1
 8007228:	443b      	add	r3, r7
 800722a:	429d      	cmp	r5, r3
 800722c:	bf38      	it	cc
 800722e:	461d      	movcc	r5, r3
 8007230:	0553      	lsls	r3, r2, #21
 8007232:	d530      	bpl.n	8007296 <__ssputs_r+0x9e>
 8007234:	4629      	mov	r1, r5
 8007236:	f7ff ff85 	bl	8007144 <_malloc_r>
 800723a:	4606      	mov	r6, r0
 800723c:	b950      	cbnz	r0, 8007254 <__ssputs_r+0x5c>
 800723e:	230c      	movs	r3, #12
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	f8ca 3000 	str.w	r3, [sl]
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007254:	463a      	mov	r2, r7
 8007256:	6921      	ldr	r1, [r4, #16]
 8007258:	f7ff fc32 	bl	8006ac0 <memcpy>
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007266:	81a3      	strh	r3, [r4, #12]
 8007268:	6126      	str	r6, [r4, #16]
 800726a:	443e      	add	r6, r7
 800726c:	6026      	str	r6, [r4, #0]
 800726e:	464e      	mov	r6, r9
 8007270:	6165      	str	r5, [r4, #20]
 8007272:	1bed      	subs	r5, r5, r7
 8007274:	60a5      	str	r5, [r4, #8]
 8007276:	454e      	cmp	r6, r9
 8007278:	d900      	bls.n	800727c <__ssputs_r+0x84>
 800727a:	464e      	mov	r6, r9
 800727c:	4632      	mov	r2, r6
 800727e:	4641      	mov	r1, r8
 8007280:	6820      	ldr	r0, [r4, #0]
 8007282:	f000 f92d 	bl	80074e0 <memmove>
 8007286:	68a3      	ldr	r3, [r4, #8]
 8007288:	2000      	movs	r0, #0
 800728a:	1b9b      	subs	r3, r3, r6
 800728c:	60a3      	str	r3, [r4, #8]
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	441e      	add	r6, r3
 8007292:	6026      	str	r6, [r4, #0]
 8007294:	e7dc      	b.n	8007250 <__ssputs_r+0x58>
 8007296:	462a      	mov	r2, r5
 8007298:	f000 f93d 	bl	8007516 <_realloc_r>
 800729c:	4606      	mov	r6, r0
 800729e:	2800      	cmp	r0, #0
 80072a0:	d1e2      	bne.n	8007268 <__ssputs_r+0x70>
 80072a2:	6921      	ldr	r1, [r4, #16]
 80072a4:	4650      	mov	r0, sl
 80072a6:	f7ff ff01 	bl	80070ac <_free_r>
 80072aa:	e7c8      	b.n	800723e <__ssputs_r+0x46>

080072ac <_svfiprintf_r>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	461d      	mov	r5, r3
 80072b2:	898b      	ldrh	r3, [r1, #12]
 80072b4:	b09d      	sub	sp, #116	; 0x74
 80072b6:	061f      	lsls	r7, r3, #24
 80072b8:	4680      	mov	r8, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	4616      	mov	r6, r2
 80072be:	d50f      	bpl.n	80072e0 <_svfiprintf_r+0x34>
 80072c0:	690b      	ldr	r3, [r1, #16]
 80072c2:	b96b      	cbnz	r3, 80072e0 <_svfiprintf_r+0x34>
 80072c4:	2140      	movs	r1, #64	; 0x40
 80072c6:	f7ff ff3d 	bl	8007144 <_malloc_r>
 80072ca:	6020      	str	r0, [r4, #0]
 80072cc:	6120      	str	r0, [r4, #16]
 80072ce:	b928      	cbnz	r0, 80072dc <_svfiprintf_r+0x30>
 80072d0:	230c      	movs	r3, #12
 80072d2:	f8c8 3000 	str.w	r3, [r8]
 80072d6:	f04f 30ff 	mov.w	r0, #4294967295
 80072da:	e0c8      	b.n	800746e <_svfiprintf_r+0x1c2>
 80072dc:	2340      	movs	r3, #64	; 0x40
 80072de:	6163      	str	r3, [r4, #20]
 80072e0:	2300      	movs	r3, #0
 80072e2:	9309      	str	r3, [sp, #36]	; 0x24
 80072e4:	2320      	movs	r3, #32
 80072e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072ea:	2330      	movs	r3, #48	; 0x30
 80072ec:	f04f 0b01 	mov.w	fp, #1
 80072f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072f4:	9503      	str	r5, [sp, #12]
 80072f6:	4637      	mov	r7, r6
 80072f8:	463d      	mov	r5, r7
 80072fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80072fe:	b10b      	cbz	r3, 8007304 <_svfiprintf_r+0x58>
 8007300:	2b25      	cmp	r3, #37	; 0x25
 8007302:	d13e      	bne.n	8007382 <_svfiprintf_r+0xd6>
 8007304:	ebb7 0a06 	subs.w	sl, r7, r6
 8007308:	d00b      	beq.n	8007322 <_svfiprintf_r+0x76>
 800730a:	4653      	mov	r3, sl
 800730c:	4632      	mov	r2, r6
 800730e:	4621      	mov	r1, r4
 8007310:	4640      	mov	r0, r8
 8007312:	f7ff ff71 	bl	80071f8 <__ssputs_r>
 8007316:	3001      	adds	r0, #1
 8007318:	f000 80a4 	beq.w	8007464 <_svfiprintf_r+0x1b8>
 800731c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731e:	4453      	add	r3, sl
 8007320:	9309      	str	r3, [sp, #36]	; 0x24
 8007322:	783b      	ldrb	r3, [r7, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 809d 	beq.w	8007464 <_svfiprintf_r+0x1b8>
 800732a:	2300      	movs	r3, #0
 800732c:	f04f 32ff 	mov.w	r2, #4294967295
 8007330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	9307      	str	r3, [sp, #28]
 8007338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800733c:	931a      	str	r3, [sp, #104]	; 0x68
 800733e:	462f      	mov	r7, r5
 8007340:	2205      	movs	r2, #5
 8007342:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007346:	4850      	ldr	r0, [pc, #320]	; (8007488 <_svfiprintf_r+0x1dc>)
 8007348:	f7ff fbac 	bl	8006aa4 <memchr>
 800734c:	9b04      	ldr	r3, [sp, #16]
 800734e:	b9d0      	cbnz	r0, 8007386 <_svfiprintf_r+0xda>
 8007350:	06d9      	lsls	r1, r3, #27
 8007352:	bf44      	itt	mi
 8007354:	2220      	movmi	r2, #32
 8007356:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800735a:	071a      	lsls	r2, r3, #28
 800735c:	bf44      	itt	mi
 800735e:	222b      	movmi	r2, #43	; 0x2b
 8007360:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007364:	782a      	ldrb	r2, [r5, #0]
 8007366:	2a2a      	cmp	r2, #42	; 0x2a
 8007368:	d015      	beq.n	8007396 <_svfiprintf_r+0xea>
 800736a:	462f      	mov	r7, r5
 800736c:	2000      	movs	r0, #0
 800736e:	250a      	movs	r5, #10
 8007370:	9a07      	ldr	r2, [sp, #28]
 8007372:	4639      	mov	r1, r7
 8007374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007378:	3b30      	subs	r3, #48	; 0x30
 800737a:	2b09      	cmp	r3, #9
 800737c:	d94d      	bls.n	800741a <_svfiprintf_r+0x16e>
 800737e:	b1b8      	cbz	r0, 80073b0 <_svfiprintf_r+0x104>
 8007380:	e00f      	b.n	80073a2 <_svfiprintf_r+0xf6>
 8007382:	462f      	mov	r7, r5
 8007384:	e7b8      	b.n	80072f8 <_svfiprintf_r+0x4c>
 8007386:	4a40      	ldr	r2, [pc, #256]	; (8007488 <_svfiprintf_r+0x1dc>)
 8007388:	463d      	mov	r5, r7
 800738a:	1a80      	subs	r0, r0, r2
 800738c:	fa0b f000 	lsl.w	r0, fp, r0
 8007390:	4318      	orrs	r0, r3
 8007392:	9004      	str	r0, [sp, #16]
 8007394:	e7d3      	b.n	800733e <_svfiprintf_r+0x92>
 8007396:	9a03      	ldr	r2, [sp, #12]
 8007398:	1d11      	adds	r1, r2, #4
 800739a:	6812      	ldr	r2, [r2, #0]
 800739c:	9103      	str	r1, [sp, #12]
 800739e:	2a00      	cmp	r2, #0
 80073a0:	db01      	blt.n	80073a6 <_svfiprintf_r+0xfa>
 80073a2:	9207      	str	r2, [sp, #28]
 80073a4:	e004      	b.n	80073b0 <_svfiprintf_r+0x104>
 80073a6:	4252      	negs	r2, r2
 80073a8:	f043 0302 	orr.w	r3, r3, #2
 80073ac:	9207      	str	r2, [sp, #28]
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	783b      	ldrb	r3, [r7, #0]
 80073b2:	2b2e      	cmp	r3, #46	; 0x2e
 80073b4:	d10c      	bne.n	80073d0 <_svfiprintf_r+0x124>
 80073b6:	787b      	ldrb	r3, [r7, #1]
 80073b8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ba:	d133      	bne.n	8007424 <_svfiprintf_r+0x178>
 80073bc:	9b03      	ldr	r3, [sp, #12]
 80073be:	3702      	adds	r7, #2
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	9203      	str	r2, [sp, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfb8      	it	lt
 80073ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80073ce:	9305      	str	r3, [sp, #20]
 80073d0:	4d2e      	ldr	r5, [pc, #184]	; (800748c <_svfiprintf_r+0x1e0>)
 80073d2:	2203      	movs	r2, #3
 80073d4:	7839      	ldrb	r1, [r7, #0]
 80073d6:	4628      	mov	r0, r5
 80073d8:	f7ff fb64 	bl	8006aa4 <memchr>
 80073dc:	b138      	cbz	r0, 80073ee <_svfiprintf_r+0x142>
 80073de:	2340      	movs	r3, #64	; 0x40
 80073e0:	1b40      	subs	r0, r0, r5
 80073e2:	fa03 f000 	lsl.w	r0, r3, r0
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	3701      	adds	r7, #1
 80073ea:	4303      	orrs	r3, r0
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	7839      	ldrb	r1, [r7, #0]
 80073f0:	2206      	movs	r2, #6
 80073f2:	4827      	ldr	r0, [pc, #156]	; (8007490 <_svfiprintf_r+0x1e4>)
 80073f4:	1c7e      	adds	r6, r7, #1
 80073f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073fa:	f7ff fb53 	bl	8006aa4 <memchr>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d038      	beq.n	8007474 <_svfiprintf_r+0x1c8>
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <_svfiprintf_r+0x1e8>)
 8007404:	bb13      	cbnz	r3, 800744c <_svfiprintf_r+0x1a0>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	3307      	adds	r3, #7
 800740a:	f023 0307 	bic.w	r3, r3, #7
 800740e:	3308      	adds	r3, #8
 8007410:	9303      	str	r3, [sp, #12]
 8007412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007414:	444b      	add	r3, r9
 8007416:	9309      	str	r3, [sp, #36]	; 0x24
 8007418:	e76d      	b.n	80072f6 <_svfiprintf_r+0x4a>
 800741a:	fb05 3202 	mla	r2, r5, r2, r3
 800741e:	2001      	movs	r0, #1
 8007420:	460f      	mov	r7, r1
 8007422:	e7a6      	b.n	8007372 <_svfiprintf_r+0xc6>
 8007424:	2300      	movs	r3, #0
 8007426:	250a      	movs	r5, #10
 8007428:	4619      	mov	r1, r3
 800742a:	3701      	adds	r7, #1
 800742c:	9305      	str	r3, [sp, #20]
 800742e:	4638      	mov	r0, r7
 8007430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007434:	3a30      	subs	r2, #48	; 0x30
 8007436:	2a09      	cmp	r2, #9
 8007438:	d903      	bls.n	8007442 <_svfiprintf_r+0x196>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0c8      	beq.n	80073d0 <_svfiprintf_r+0x124>
 800743e:	9105      	str	r1, [sp, #20]
 8007440:	e7c6      	b.n	80073d0 <_svfiprintf_r+0x124>
 8007442:	fb05 2101 	mla	r1, r5, r1, r2
 8007446:	2301      	movs	r3, #1
 8007448:	4607      	mov	r7, r0
 800744a:	e7f0      	b.n	800742e <_svfiprintf_r+0x182>
 800744c:	ab03      	add	r3, sp, #12
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	4622      	mov	r2, r4
 8007452:	4b11      	ldr	r3, [pc, #68]	; (8007498 <_svfiprintf_r+0x1ec>)
 8007454:	a904      	add	r1, sp, #16
 8007456:	4640      	mov	r0, r8
 8007458:	f7fe f8ee 	bl	8005638 <_printf_float>
 800745c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007460:	4681      	mov	r9, r0
 8007462:	d1d6      	bne.n	8007412 <_svfiprintf_r+0x166>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	065b      	lsls	r3, r3, #25
 8007468:	f53f af35 	bmi.w	80072d6 <_svfiprintf_r+0x2a>
 800746c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800746e:	b01d      	add	sp, #116	; 0x74
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	ab03      	add	r3, sp, #12
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	4622      	mov	r2, r4
 800747a:	4b07      	ldr	r3, [pc, #28]	; (8007498 <_svfiprintf_r+0x1ec>)
 800747c:	a904      	add	r1, sp, #16
 800747e:	4640      	mov	r0, r8
 8007480:	f7fe fb86 	bl	8005b90 <_printf_i>
 8007484:	e7ea      	b.n	800745c <_svfiprintf_r+0x1b0>
 8007486:	bf00      	nop
 8007488:	08007764 	.word	0x08007764
 800748c:	0800776a 	.word	0x0800776a
 8007490:	0800776e 	.word	0x0800776e
 8007494:	08005639 	.word	0x08005639
 8007498:	080071f9 	.word	0x080071f9

0800749c <_sbrk_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	2300      	movs	r3, #0
 80074a0:	4c05      	ldr	r4, [pc, #20]	; (80074b8 <_sbrk_r+0x1c>)
 80074a2:	4605      	mov	r5, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	f7fa fcda 	bl	8001e60 <_sbrk>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_sbrk_r+0x1a>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_sbrk_r+0x1a>
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	2000044c 	.word	0x2000044c

080074bc <__ascii_mbtowc>:
 80074bc:	b082      	sub	sp, #8
 80074be:	b901      	cbnz	r1, 80074c2 <__ascii_mbtowc+0x6>
 80074c0:	a901      	add	r1, sp, #4
 80074c2:	b142      	cbz	r2, 80074d6 <__ascii_mbtowc+0x1a>
 80074c4:	b14b      	cbz	r3, 80074da <__ascii_mbtowc+0x1e>
 80074c6:	7813      	ldrb	r3, [r2, #0]
 80074c8:	600b      	str	r3, [r1, #0]
 80074ca:	7812      	ldrb	r2, [r2, #0]
 80074cc:	1c10      	adds	r0, r2, #0
 80074ce:	bf18      	it	ne
 80074d0:	2001      	movne	r0, #1
 80074d2:	b002      	add	sp, #8
 80074d4:	4770      	bx	lr
 80074d6:	4610      	mov	r0, r2
 80074d8:	e7fb      	b.n	80074d2 <__ascii_mbtowc+0x16>
 80074da:	f06f 0001 	mvn.w	r0, #1
 80074de:	e7f8      	b.n	80074d2 <__ascii_mbtowc+0x16>

080074e0 <memmove>:
 80074e0:	4288      	cmp	r0, r1
 80074e2:	b510      	push	{r4, lr}
 80074e4:	eb01 0302 	add.w	r3, r1, r2
 80074e8:	d807      	bhi.n	80074fa <memmove+0x1a>
 80074ea:	1e42      	subs	r2, r0, #1
 80074ec:	4299      	cmp	r1, r3
 80074ee:	d00a      	beq.n	8007506 <memmove+0x26>
 80074f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80074f8:	e7f8      	b.n	80074ec <memmove+0xc>
 80074fa:	4283      	cmp	r3, r0
 80074fc:	d9f5      	bls.n	80074ea <memmove+0xa>
 80074fe:	1881      	adds	r1, r0, r2
 8007500:	1ad2      	subs	r2, r2, r3
 8007502:	42d3      	cmn	r3, r2
 8007504:	d100      	bne.n	8007508 <memmove+0x28>
 8007506:	bd10      	pop	{r4, pc}
 8007508:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800750c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007510:	e7f7      	b.n	8007502 <memmove+0x22>

08007512 <__malloc_lock>:
 8007512:	4770      	bx	lr

08007514 <__malloc_unlock>:
 8007514:	4770      	bx	lr

08007516 <_realloc_r>:
 8007516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007518:	4607      	mov	r7, r0
 800751a:	4614      	mov	r4, r2
 800751c:	460e      	mov	r6, r1
 800751e:	b921      	cbnz	r1, 800752a <_realloc_r+0x14>
 8007520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007524:	4611      	mov	r1, r2
 8007526:	f7ff be0d 	b.w	8007144 <_malloc_r>
 800752a:	b922      	cbnz	r2, 8007536 <_realloc_r+0x20>
 800752c:	f7ff fdbe 	bl	80070ac <_free_r>
 8007530:	4625      	mov	r5, r4
 8007532:	4628      	mov	r0, r5
 8007534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007536:	f000 f821 	bl	800757c <_malloc_usable_size_r>
 800753a:	42a0      	cmp	r0, r4
 800753c:	d20f      	bcs.n	800755e <_realloc_r+0x48>
 800753e:	4621      	mov	r1, r4
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff fdff 	bl	8007144 <_malloc_r>
 8007546:	4605      	mov	r5, r0
 8007548:	2800      	cmp	r0, #0
 800754a:	d0f2      	beq.n	8007532 <_realloc_r+0x1c>
 800754c:	4631      	mov	r1, r6
 800754e:	4622      	mov	r2, r4
 8007550:	f7ff fab6 	bl	8006ac0 <memcpy>
 8007554:	4631      	mov	r1, r6
 8007556:	4638      	mov	r0, r7
 8007558:	f7ff fda8 	bl	80070ac <_free_r>
 800755c:	e7e9      	b.n	8007532 <_realloc_r+0x1c>
 800755e:	4635      	mov	r5, r6
 8007560:	e7e7      	b.n	8007532 <_realloc_r+0x1c>

08007562 <__ascii_wctomb>:
 8007562:	b149      	cbz	r1, 8007578 <__ascii_wctomb+0x16>
 8007564:	2aff      	cmp	r2, #255	; 0xff
 8007566:	bf8b      	itete	hi
 8007568:	238a      	movhi	r3, #138	; 0x8a
 800756a:	700a      	strbls	r2, [r1, #0]
 800756c:	6003      	strhi	r3, [r0, #0]
 800756e:	2001      	movls	r0, #1
 8007570:	bf88      	it	hi
 8007572:	f04f 30ff 	movhi.w	r0, #4294967295
 8007576:	4770      	bx	lr
 8007578:	4608      	mov	r0, r1
 800757a:	4770      	bx	lr

0800757c <_malloc_usable_size_r>:
 800757c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007580:	1f18      	subs	r0, r3, #4
 8007582:	2b00      	cmp	r3, #0
 8007584:	bfbc      	itt	lt
 8007586:	580b      	ldrlt	r3, [r1, r0]
 8007588:	18c0      	addlt	r0, r0, r3
 800758a:	4770      	bx	lr

0800758c <_init>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr

08007598 <_fini>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr
