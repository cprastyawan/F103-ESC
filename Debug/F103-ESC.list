
F103-ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef8  08004ef8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004ef8  08004ef8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ef8  08004ef8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000074  08004f74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004f74  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf14  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002070  00000000  00000000  0002cfb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  0002f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  0002fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000153b3  00000000  00000000  00030a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7b5  00000000  00000000  00045e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007756d  00000000  00000000  000505d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7b45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb8  00000000  00000000  000c7bc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004df4 	.word	0x08004df4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004df4 	.word	0x08004df4

0800014c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000150:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <DWT_Init+0x38>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000158:	2b00      	cmp	r3, #0
 800015a:	d10e      	bne.n	800017a <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800015c:	4b09      	ldr	r3, [pc, #36]	; (8000184 <DWT_Init+0x38>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a08      	ldr	r2, [pc, #32]	; (8000184 <DWT_Init+0x38>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000168:	4b07      	ldr	r3, [pc, #28]	; (8000188 <DWT_Init+0x3c>)
 800016a:	2200      	movs	r2, #0
 800016c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800016e:	4b06      	ldr	r3, [pc, #24]	; (8000188 <DWT_Init+0x3c>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	4a05      	ldr	r2, [pc, #20]	; (8000188 <DWT_Init+0x3c>)
 8000174:	f043 0301 	orr.w	r3, r3, #1
 8000178:	6013      	str	r3, [r2, #0]
    }
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	e000edf0 	.word	0xe000edf0
 8000188:	e0001000 	.word	0xe0001000

0800018c <outPWM>:
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void sound(uint32_t Frequency, uint32_t milliseconds);
void phase(int step, uint16_t speed);
void outPWM(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t dutyCycle){
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	4613      	mov	r3, r2
 8000198:	80fb      	strh	r3, [r7, #6]
	dutyCycle = map(dutyCycle, 0, 0xFFFF, 0, 7200);
 800019a:	88fb      	ldrh	r3, [r7, #6]
 800019c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80001a0:	fb02 f303 	mul.w	r3, r2, r3
 80001a4:	4a14      	ldr	r2, [pc, #80]	; (80001f8 <outPWM+0x6c>)
 80001a6:	fb82 1203 	smull	r1, r2, r2, r3
 80001aa:	441a      	add	r2, r3
 80001ac:	13d2      	asrs	r2, r2, #15
 80001ae:	17db      	asrs	r3, r3, #31
 80001b0:	1ad3      	subs	r3, r2, r3
 80001b2:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d104      	bne.n	80001c4 <outPWM+0x38>
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	88fa      	ldrh	r2, [r7, #6]
 80001c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80001c2:	e013      	b.n	80001ec <outPWM+0x60>
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	2b04      	cmp	r3, #4
 80001c8:	d104      	bne.n	80001d4 <outPWM+0x48>
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	88fa      	ldrh	r2, [r7, #6]
 80001d0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80001d2:	e00b      	b.n	80001ec <outPWM+0x60>
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	2b08      	cmp	r3, #8
 80001d8:	d104      	bne.n	80001e4 <outPWM+0x58>
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	88fa      	ldrh	r2, [r7, #6]
 80001e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80001e2:	e003      	b.n	80001ec <outPWM+0x60>
	__HAL_TIM_SET_COMPARE(htim, channel, dutyCycle);
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	88fa      	ldrh	r2, [r7, #6]
 80001ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	80008001 	.word	0x80008001

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 ff48 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f858 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 fa70 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 800020c:	f000 fa50 	bl	80006b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000210:	f000 f8ae 	bl	8000370 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000214:	f000 f908 	bl	8000428 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000218:	f000 fa20 	bl	800065c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800021c:	f000 f9bc 	bl	8000598 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000220:	481e      	ldr	r0, [pc, #120]	; (800029c <main+0xa0>)
 8000222:	f001 fbf9 	bl	8001a18 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000226:	481d      	ldr	r0, [pc, #116]	; (800029c <main+0xa0>)
 8000228:	f001 f86e 	bl	8001308 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc1, adcValue, 3);
 800022c:	2203      	movs	r2, #3
 800022e:	491c      	ldr	r1, [pc, #112]	; (80002a0 <main+0xa4>)
 8000230:	481a      	ldr	r0, [pc, #104]	; (800029c <main+0xa0>)
 8000232:	f001 f917 	bl	8001464 <HAL_ADC_Start_DMA>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000236:	2100      	movs	r1, #0
 8000238:	481a      	ldr	r0, [pc, #104]	; (80002a4 <main+0xa8>)
 800023a:	f002 ff43 	bl	80030c4 <HAL_TIM_IC_Start_IT>
  DWT_Init();
 800023e:	f7ff ff85 	bl	800014c <DWT_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000242:	2100      	movs	r1, #0
 8000244:	4818      	ldr	r0, [pc, #96]	; (80002a8 <main+0xac>)
 8000246:	f002 fedf 	bl	8003008 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800024a:	2104      	movs	r1, #4
 800024c:	4816      	ldr	r0, [pc, #88]	; (80002a8 <main+0xac>)
 800024e:	f002 fedb 	bl	8003008 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000252:	2108      	movs	r1, #8
 8000254:	4814      	ldr	r0, [pc, #80]	; (80002a8 <main+0xac>)
 8000256:	f002 fed7 	bl	8003008 <HAL_TIM_PWM_Start>

  if(Input_DutyCycle > ESC_PWM_MIN + 100){
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <main+0xb0>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f240 424c 	movw	r2, #1100	; 0x44c
 8000262:	4293      	cmp	r3, r2
 8000264:	d903      	bls.n	800026e <main+0x72>
	  esc_mode = ESC_CALIBRATE;
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <main+0xb4>)
 8000268:	2202      	movs	r2, #2
 800026a:	701a      	strb	r2, [r3, #0]
 800026c:	e002      	b.n	8000274 <main+0x78>
  } else esc_mode = ESC_DISARMED;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <main+0xb4>)
 8000270:	2201      	movs	r2, #1
 8000272:	701a      	strb	r2, [r3, #0]
				  lastDelta = delta;
				  step = step + 1;
				  if(step > 6) step = 1;
			  }
		  }*/
	  	  phase(step, 0xFFFF / 0x2);
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <main+0xb8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fa7f 	bl	8000780 <phase>
		  step++;
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <main+0xb8>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <main+0xb8>)
 800028a:	6013      	str	r3, [r2, #0]
		  if(step > 6) step = 1;
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <main+0xb8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b06      	cmp	r3, #6
 8000292:	ddef      	ble.n	8000274 <main+0x78>
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <main+0xb8>)
 8000296:	2201      	movs	r2, #1
 8000298:	601a      	str	r2, [r3, #0]
	  	  phase(step, 0xFFFF / 0x2);
 800029a:	e7eb      	b.n	8000274 <main+0x78>
 800029c:	200001a0 	.word	0x200001a0
 80002a0:	200002d8 	.word	0x200002d8
 80002a4:	20000298 	.word	0x20000298
 80002a8:	20000254 	.word	0x20000254
 80002ac:	20000090 	.word	0x20000090
 80002b0:	2000019c 	.word	0x2000019c
 80002b4:	20000000 	.word	0x20000000

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b094      	sub	sp, #80	; 0x50
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 f97a 	bl	80045c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000304:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000308:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030e:	4618      	mov	r0, r3
 8000310:	f002 f88c 	bl	800242c <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800031a:	f000 fc33 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	2102      	movs	r1, #2
 800033a:	4618      	mov	r0, r3
 800033c:	f002 faf6 	bl	800292c <HAL_RCC_ClockConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000346:	f000 fc1d 	bl	8000b84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800034a:	2302      	movs	r3, #2
 800034c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800034e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000352:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fc84 	bl	8002c64 <HAL_RCCEx_PeriphCLKConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000362:	f000 fc0f 	bl	8000b84 <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3750      	adds	r7, #80	; 0x50
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000380:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_ADC1_Init+0xb0>)
 8000382:	4a28      	ldr	r2, [pc, #160]	; (8000424 <MX_ADC1_Init+0xb4>)
 8000384:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000386:	4b26      	ldr	r3, [pc, #152]	; (8000420 <MX_ADC1_Init+0xb0>)
 8000388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800038c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800038e:	4b24      	ldr	r3, [pc, #144]	; (8000420 <MX_ADC1_Init+0xb0>)
 8000390:	2201      	movs	r2, #1
 8000392:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_ADC1_Init+0xb0>)
 8000396:	2200      	movs	r2, #0
 8000398:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <MX_ADC1_Init+0xb0>)
 800039c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <MX_ADC1_Init+0xb0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80003a8:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <MX_ADC1_Init+0xb0>)
 80003aa:	2203      	movs	r2, #3
 80003ac:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ae:	481c      	ldr	r0, [pc, #112]	; (8000420 <MX_ADC1_Init+0xb0>)
 80003b0:	f000 fed2 	bl	8001158 <HAL_ADC_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003ba:	f000 fbe3 	bl	8000b84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003be:	2300      	movs	r3, #0
 80003c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c2:	2301      	movs	r3, #1
 80003c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80003c6:	2302      	movs	r3, #2
 80003c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4814      	ldr	r0, [pc, #80]	; (8000420 <MX_ADC1_Init+0xb0>)
 80003d0:	f001 f938 	bl	8001644 <HAL_ADC_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003da:	f000 fbd3 	bl	8000b84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003de:	2301      	movs	r3, #1
 80003e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	480d      	ldr	r0, [pc, #52]	; (8000420 <MX_ADC1_Init+0xb0>)
 80003ec:	f001 f92a 	bl	8001644 <HAL_ADC_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003f6:	f000 fbc5 	bl	8000b84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003fa:	2302      	movs	r3, #2
 80003fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003fe:	2303      	movs	r3, #3
 8000400:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <MX_ADC1_Init+0xb0>)
 8000408:	f001 f91c 	bl	8001644 <HAL_ADC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000412:	f000 fbb7 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200001a0 	.word	0x200001a0
 8000424:	40012400 	.word	0x40012400

08000428 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b096      	sub	sp, #88	; 0x58
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2220      	movs	r2, #32
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f004 f8ad 	bl	80045c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000466:	4b4a      	ldr	r3, [pc, #296]	; (8000590 <MX_TIM1_Init+0x168>)
 8000468:	4a4a      	ldr	r2, [pc, #296]	; (8000594 <MX_TIM1_Init+0x16c>)
 800046a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800046c:	4b48      	ldr	r3, [pc, #288]	; (8000590 <MX_TIM1_Init+0x168>)
 800046e:	2200      	movs	r2, #0
 8000470:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b47      	ldr	r3, [pc, #284]	; (8000590 <MX_TIM1_Init+0x168>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7200 - 1;
 8000478:	4b45      	ldr	r3, [pc, #276]	; (8000590 <MX_TIM1_Init+0x168>)
 800047a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800047e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b43      	ldr	r3, [pc, #268]	; (8000590 <MX_TIM1_Init+0x168>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000486:	4b42      	ldr	r3, [pc, #264]	; (8000590 <MX_TIM1_Init+0x168>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048c:	4b40      	ldr	r3, [pc, #256]	; (8000590 <MX_TIM1_Init+0x168>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000492:	483f      	ldr	r0, [pc, #252]	; (8000590 <MX_TIM1_Init+0x168>)
 8000494:	f002 fd58 	bl	8002f48 <HAL_TIM_Base_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800049e:	f000 fb71 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004ac:	4619      	mov	r1, r3
 80004ae:	4838      	ldr	r0, [pc, #224]	; (8000590 <MX_TIM1_Init+0x168>)
 80004b0:	f003 f8da 	bl	8003668 <HAL_TIM_ConfigClockSource>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004ba:	f000 fb63 	bl	8000b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004be:	4834      	ldr	r0, [pc, #208]	; (8000590 <MX_TIM1_Init+0x168>)
 80004c0:	f002 fd6d 	bl	8002f9e <HAL_TIM_PWM_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80004ca:	f000 fb5b 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ce:	2300      	movs	r3, #0
 80004d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004da:	4619      	mov	r1, r3
 80004dc:	482c      	ldr	r0, [pc, #176]	; (8000590 <MX_TIM1_Init+0x168>)
 80004de:	f003 fd94 	bl	800400a <HAL_TIMEx_MasterConfigSynchronization>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004e8:	f000 fb4c 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ec:	2360      	movs	r3, #96	; 0x60
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f4:	2300      	movs	r3, #0
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004f8:	2300      	movs	r3, #0
 80004fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000500:	2300      	movs	r3, #0
 8000502:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000504:	2300      	movs	r3, #0
 8000506:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050c:	2200      	movs	r2, #0
 800050e:	4619      	mov	r1, r3
 8000510:	481f      	ldr	r0, [pc, #124]	; (8000590 <MX_TIM1_Init+0x168>)
 8000512:	f002 ffe3 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800051c:	f000 fb32 	bl	8000b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000524:	2204      	movs	r2, #4
 8000526:	4619      	mov	r1, r3
 8000528:	4819      	ldr	r0, [pc, #100]	; (8000590 <MX_TIM1_Init+0x168>)
 800052a:	f002 ffd7 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000534:	f000 fb26 	bl	8000b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053c:	2208      	movs	r2, #8
 800053e:	4619      	mov	r1, r3
 8000540:	4813      	ldr	r0, [pc, #76]	; (8000590 <MX_TIM1_Init+0x168>)
 8000542:	f002 ffcb 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800054c:	f000 fb1a 	bl	8000b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000568:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4619      	mov	r1, r3
 8000572:	4807      	ldr	r0, [pc, #28]	; (8000590 <MX_TIM1_Init+0x168>)
 8000574:	f003 fd8d 	bl	8004092 <HAL_TIMEx_ConfigBreakDeadTime>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800057e:	f000 fb01 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <MX_TIM1_Init+0x168>)
 8000584:	f000 fc20 	bl	8000dc8 <HAL_TIM_MspPostInit>

}
 8000588:	bf00      	nop
 800058a:	3758      	adds	r7, #88	; 0x58
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000254 	.word	0x20000254
 8000594:	40012c00 	.word	0x40012c00

08000598 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_TIM2_Init+0xc0>)
 80005b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_TIM2_Init+0xc0>)
 80005be:	2247      	movs	r2, #71	; 0x47
 80005c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_TIM2_Init+0xc0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_TIM2_Init+0xc0>)
 80005ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_TIM2_Init+0xc0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_TIM2_Init+0xc0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80005dc:	481e      	ldr	r0, [pc, #120]	; (8000658 <MX_TIM2_Init+0xc0>)
 80005de:	f002 fd45 	bl	800306c <HAL_TIM_IC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005e8:	f000 facc 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4817      	ldr	r0, [pc, #92]	; (8000658 <MX_TIM2_Init+0xc0>)
 80005fc:	f003 fd05 	bl	800400a <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000606:	f000 fabd 	bl	8000b84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800060e:	2301      	movs	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_TIM2_Init+0xc0>)
 8000622:	f002 febf 	bl	80033a4 <HAL_TIM_IC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800062c:	f000 faaa 	bl	8000b84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000630:	2302      	movs	r3, #2
 8000632:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000634:	2302      	movs	r3, #2
 8000636:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	2204      	movs	r2, #4
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_TIM2_Init+0xc0>)
 8000640:	f002 feb0 	bl	80033a4 <HAL_TIM_IC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800064a:	f000 fa9b 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000298 	.word	0x20000298

0800065c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_USART1_UART_Init+0x50>)
 8000664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000694:	f003 fd60 	bl	8004158 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800069e:	f000 fa71 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200001d0 	.word	0x200001d0
 80006ac:	40013800 	.word	0x40013800

080006b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_DMA_Init+0x38>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <MX_DMA_Init+0x38>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_DMA_Init+0x38>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	200b      	movs	r0, #11
 80006d4:	f001 fb13 	bl	8001cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006d8:	200b      	movs	r0, #11
 80006da:	f001 fb2c 	bl	8001d36 <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000706:	f043 0320 	orr.w	r3, r3, #32
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_GPIO_Init+0x8c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0320 	and.w	r3, r3, #32
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_GPIO_Init+0x8c>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_GPIO_Init+0x8c>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_GPIO_Init+0x8c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|AL_Pin|BL_Pin|CL_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	21e8      	movs	r1, #232	; 0xe8
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <MX_GPIO_Init+0x90>)
 800074e:	f001 fe55 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin AL_Pin BL_Pin CL_Pin */
  GPIO_InitStruct.Pin = LED_Pin|AL_Pin|BL_Pin|CL_Pin;
 8000752:	23e8      	movs	r3, #232	; 0xe8
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	4619      	mov	r1, r3
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0x90>)
 800076a:	f001 fced 	bl	8002148 <HAL_GPIO_Init>

}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <phase>:

/* USER CODE BEGIN 4 */

void phase(int step, uint16_t speed){
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
	uint32_t bemfSum = (bemfA + bemfB + bemfC) / 3;
 800078c:	4ba5      	ldr	r3, [pc, #660]	; (8000a24 <phase+0x2a4>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4ba5      	ldr	r3, [pc, #660]	; (8000a28 <phase+0x2a8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	441a      	add	r2, r3
 8000796:	4ba5      	ldr	r3, [pc, #660]	; (8000a2c <phase+0x2ac>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4aa4      	ldr	r2, [pc, #656]	; (8000a30 <phase+0x2b0>)
 800079e:	fba2 2303 	umull	r2, r3, r2, r3
 80007a2:	085b      	lsrs	r3, r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]

	//strSize = sprintf((char*)buffer, "bemfA: %lu, bemfB: %lu, bemfC: %lu, bemfSum: %lu\t",bemfA, bemfB, bemfC, bemfSum);
	//HAL_UART_Transmit(&huart1, buffer, strSize, 100);

	switch(step){
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	2b05      	cmp	r3, #5
 80007ac:	f200 8136 	bhi.w	8000a1c <phase+0x29c>
 80007b0:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <phase+0x38>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007d1 	.word	0x080007d1
 80007bc:	08000833 	.word	0x08000833
 80007c0:	08000895 	.word	0x08000895
 80007c4:	080008f7 	.word	0x080008f7
 80007c8:	08000959 	.word	0x08000959
 80007cc:	080009bb 	.word	0x080009bb
	case 1:

		outPWM(&htim1, CHANNEL_BH, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	4897      	ldr	r0, [pc, #604]	; (8000a34 <phase+0x2b4>)
 80007d6:	f7ff fcd9 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_CH, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4895      	ldr	r0, [pc, #596]	; (8000a34 <phase+0x2b4>)
 80007e0:	f7ff fcd4 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, AL_Pin | CL_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	21a0      	movs	r1, #160	; 0xa0
 80007e8:	4893      	ldr	r0, [pc, #588]	; (8000a38 <phase+0x2b8>)
 80007ea:	f001 fe07 	bl	80023fc <HAL_GPIO_WritePin>

		outPWM(&htim1, CHANNEL_AH, speed);
 80007ee:	887b      	ldrh	r3, [r7, #2]
 80007f0:	461a      	mov	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	488f      	ldr	r0, [pc, #572]	; (8000a34 <phase+0x2b4>)
 80007f6:	f7ff fcc9 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, BL_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	488e      	ldr	r0, [pc, #568]	; (8000a38 <phase+0x2b8>)
 8000800:	f001 fdfc 	bl	80023fc <HAL_GPIO_WritePin>

		delta = bemfA - bemfSum;
 8000804:	4b87      	ldr	r3, [pc, #540]	; (8000a24 <phase+0x2a4>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	4a8b      	ldr	r2, [pc, #556]	; (8000a3c <phase+0x2bc>)
 800080e:	6013      	str	r3, [r2, #0]
		strSize = sprintf((char*)buffer, "STEP: %d AH-BL\r\n", step);
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	498b      	ldr	r1, [pc, #556]	; (8000a40 <phase+0x2c0>)
 8000814:	488b      	ldr	r0, [pc, #556]	; (8000a44 <phase+0x2c4>)
 8000816:	f003 fedb 	bl	80045d0 <siprintf>
 800081a:	4602      	mov	r2, r0
 800081c:	4b8a      	ldr	r3, [pc, #552]	; (8000a48 <phase+0x2c8>)
 800081e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8000820:	4b89      	ldr	r3, [pc, #548]	; (8000a48 <phase+0x2c8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b29a      	uxth	r2, r3
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	4986      	ldr	r1, [pc, #536]	; (8000a44 <phase+0x2c4>)
 800082a:	4888      	ldr	r0, [pc, #544]	; (8000a4c <phase+0x2cc>)
 800082c:	f003 fce1 	bl	80041f2 <HAL_UART_Transmit>
		break;
 8000830:	e0f4      	b.n	8000a1c <phase+0x29c>

	case 2:
		outPWM(&htim1, CHANNEL_BH, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2104      	movs	r1, #4
 8000836:	487f      	ldr	r0, [pc, #508]	; (8000a34 <phase+0x2b4>)
 8000838:	f7ff fca8 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_CH, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2108      	movs	r1, #8
 8000840:	487c      	ldr	r0, [pc, #496]	; (8000a34 <phase+0x2b4>)
 8000842:	f7ff fca3 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, AL_Pin | BL_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2160      	movs	r1, #96	; 0x60
 800084a:	487b      	ldr	r0, [pc, #492]	; (8000a38 <phase+0x2b8>)
 800084c:	f001 fdd6 	bl	80023fc <HAL_GPIO_WritePin>


		outPWM(&htim1, CHANNEL_AH, speed);
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	461a      	mov	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	4877      	ldr	r0, [pc, #476]	; (8000a34 <phase+0x2b4>)
 8000858:	f7ff fc98 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, CL_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	4875      	ldr	r0, [pc, #468]	; (8000a38 <phase+0x2b8>)
 8000862:	f001 fdcb 	bl	80023fc <HAL_GPIO_WritePin>

		delta = bemfC - bemfSum;
 8000866:	4b71      	ldr	r3, [pc, #452]	; (8000a2c <phase+0x2ac>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	4a73      	ldr	r2, [pc, #460]	; (8000a3c <phase+0x2bc>)
 8000870:	6013      	str	r3, [r2, #0]
		strSize = sprintf((char*)buffer, "STEP: %d AH-CL\r\n", step);
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4976      	ldr	r1, [pc, #472]	; (8000a50 <phase+0x2d0>)
 8000876:	4873      	ldr	r0, [pc, #460]	; (8000a44 <phase+0x2c4>)
 8000878:	f003 feaa 	bl	80045d0 <siprintf>
 800087c:	4602      	mov	r2, r0
 800087e:	4b72      	ldr	r3, [pc, #456]	; (8000a48 <phase+0x2c8>)
 8000880:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 8000882:	4b71      	ldr	r3, [pc, #452]	; (8000a48 <phase+0x2c8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	b29a      	uxth	r2, r3
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	496e      	ldr	r1, [pc, #440]	; (8000a44 <phase+0x2c4>)
 800088c:	486f      	ldr	r0, [pc, #444]	; (8000a4c <phase+0x2cc>)
 800088e:	f003 fcb0 	bl	80041f2 <HAL_UART_Transmit>
		break;
 8000892:	e0c3      	b.n	8000a1c <phase+0x29c>

	case 3:
		outPWM(&htim1, CHANNEL_CH, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2108      	movs	r1, #8
 8000898:	4866      	ldr	r0, [pc, #408]	; (8000a34 <phase+0x2b4>)
 800089a:	f7ff fc77 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_AH, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	4864      	ldr	r0, [pc, #400]	; (8000a34 <phase+0x2b4>)
 80008a4:	f7ff fc72 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, AL_Pin | BL_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2160      	movs	r1, #96	; 0x60
 80008ac:	4862      	ldr	r0, [pc, #392]	; (8000a38 <phase+0x2b8>)
 80008ae:	f001 fda5 	bl	80023fc <HAL_GPIO_WritePin>


		outPWM(&htim1, CHANNEL_BH, speed);
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	461a      	mov	r2, r3
 80008b6:	2104      	movs	r1, #4
 80008b8:	485e      	ldr	r0, [pc, #376]	; (8000a34 <phase+0x2b4>)
 80008ba:	f7ff fc67 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, CL_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	485d      	ldr	r0, [pc, #372]	; (8000a38 <phase+0x2b8>)
 80008c4:	f001 fd9a 	bl	80023fc <HAL_GPIO_WritePin>

		strSize = sprintf((char*)buffer, "STEP: %d BH-CL\r\n", step);
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4962      	ldr	r1, [pc, #392]	; (8000a54 <phase+0x2d4>)
 80008cc:	485d      	ldr	r0, [pc, #372]	; (8000a44 <phase+0x2c4>)
 80008ce:	f003 fe7f 	bl	80045d0 <siprintf>
 80008d2:	4602      	mov	r2, r0
 80008d4:	4b5c      	ldr	r3, [pc, #368]	; (8000a48 <phase+0x2c8>)
 80008d6:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 80008d8:	4b5b      	ldr	r3, [pc, #364]	; (8000a48 <phase+0x2c8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	b29a      	uxth	r2, r3
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	4958      	ldr	r1, [pc, #352]	; (8000a44 <phase+0x2c4>)
 80008e2:	485a      	ldr	r0, [pc, #360]	; (8000a4c <phase+0x2cc>)
 80008e4:	f003 fc85 	bl	80041f2 <HAL_UART_Transmit>
		delta = bemfB - bemfSum;
 80008e8:	4b4f      	ldr	r3, [pc, #316]	; (8000a28 <phase+0x2a8>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	4a52      	ldr	r2, [pc, #328]	; (8000a3c <phase+0x2bc>)
 80008f2:	6013      	str	r3, [r2, #0]
		break;
 80008f4:	e092      	b.n	8000a1c <phase+0x29c>

	case 4:
		outPWM(&htim1, CHANNEL_CH, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	484e      	ldr	r0, [pc, #312]	; (8000a34 <phase+0x2b4>)
 80008fc:	f7ff fc46 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_AH, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	484b      	ldr	r0, [pc, #300]	; (8000a34 <phase+0x2b4>)
 8000906:	f7ff fc41 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, CL_Pin | BL_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	21c0      	movs	r1, #192	; 0xc0
 800090e:	484a      	ldr	r0, [pc, #296]	; (8000a38 <phase+0x2b8>)
 8000910:	f001 fd74 	bl	80023fc <HAL_GPIO_WritePin>

		outPWM(&htim1, CHANNEL_BH, speed);
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	461a      	mov	r2, r3
 8000918:	2104      	movs	r1, #4
 800091a:	4846      	ldr	r0, [pc, #280]	; (8000a34 <phase+0x2b4>)
 800091c:	f7ff fc36 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, AL_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2120      	movs	r1, #32
 8000924:	4844      	ldr	r0, [pc, #272]	; (8000a38 <phase+0x2b8>)
 8000926:	f001 fd69 	bl	80023fc <HAL_GPIO_WritePin>

		strSize = sprintf((char*)buffer, "STEP: %d BH-AL\r\n", step);
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	494a      	ldr	r1, [pc, #296]	; (8000a58 <phase+0x2d8>)
 800092e:	4845      	ldr	r0, [pc, #276]	; (8000a44 <phase+0x2c4>)
 8000930:	f003 fe4e 	bl	80045d0 <siprintf>
 8000934:	4602      	mov	r2, r0
 8000936:	4b44      	ldr	r3, [pc, #272]	; (8000a48 <phase+0x2c8>)
 8000938:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 800093a:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <phase+0x2c8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	b29a      	uxth	r2, r3
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	4940      	ldr	r1, [pc, #256]	; (8000a44 <phase+0x2c4>)
 8000944:	4841      	ldr	r0, [pc, #260]	; (8000a4c <phase+0x2cc>)
 8000946:	f003 fc54 	bl	80041f2 <HAL_UART_Transmit>
		delta = bemfA - bemfSum;
 800094a:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <phase+0x2a4>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	4a3a      	ldr	r2, [pc, #232]	; (8000a3c <phase+0x2bc>)
 8000954:	6013      	str	r3, [r2, #0]
		break;
 8000956:	e061      	b.n	8000a1c <phase+0x29c>

	case 5:
		outPWM(&htim1, CHANNEL_AH, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	4835      	ldr	r0, [pc, #212]	; (8000a34 <phase+0x2b4>)
 800095e:	f7ff fc15 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_BH, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2104      	movs	r1, #4
 8000966:	4833      	ldr	r0, [pc, #204]	; (8000a34 <phase+0x2b4>)
 8000968:	f7ff fc10 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, CL_Pin | BL_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	21c0      	movs	r1, #192	; 0xc0
 8000970:	4831      	ldr	r0, [pc, #196]	; (8000a38 <phase+0x2b8>)
 8000972:	f001 fd43 	bl	80023fc <HAL_GPIO_WritePin>

		outPWM(&htim1, CHANNEL_CH, speed);
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	461a      	mov	r2, r3
 800097a:	2108      	movs	r1, #8
 800097c:	482d      	ldr	r0, [pc, #180]	; (8000a34 <phase+0x2b4>)
 800097e:	f7ff fc05 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, AL_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2120      	movs	r1, #32
 8000986:	482c      	ldr	r0, [pc, #176]	; (8000a38 <phase+0x2b8>)
 8000988:	f001 fd38 	bl	80023fc <HAL_GPIO_WritePin>

		strSize = sprintf((char*)buffer, "STEP: %d CH-AL\r\n", step);
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4933      	ldr	r1, [pc, #204]	; (8000a5c <phase+0x2dc>)
 8000990:	482c      	ldr	r0, [pc, #176]	; (8000a44 <phase+0x2c4>)
 8000992:	f003 fe1d 	bl	80045d0 <siprintf>
 8000996:	4602      	mov	r2, r0
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <phase+0x2c8>)
 800099a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <phase+0x2c8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	4927      	ldr	r1, [pc, #156]	; (8000a44 <phase+0x2c4>)
 80009a6:	4829      	ldr	r0, [pc, #164]	; (8000a4c <phase+0x2cc>)
 80009a8:	f003 fc23 	bl	80041f2 <HAL_UART_Transmit>
		delta = bemfC - bemfSum;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <phase+0x2ac>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <phase+0x2bc>)
 80009b6:	6013      	str	r3, [r2, #0]
		break;
 80009b8:	e030      	b.n	8000a1c <phase+0x29c>

	case 6:
		outPWM(&htim1, CHANNEL_BH, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2104      	movs	r1, #4
 80009be:	481d      	ldr	r0, [pc, #116]	; (8000a34 <phase+0x2b4>)
 80009c0:	f7ff fbe4 	bl	800018c <outPWM>
		outPWM(&htim1, CHANNEL_AH, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <phase+0x2b4>)
 80009ca:	f7ff fbdf 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, CL_Pin | AL_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	21a0      	movs	r1, #160	; 0xa0
 80009d2:	4819      	ldr	r0, [pc, #100]	; (8000a38 <phase+0x2b8>)
 80009d4:	f001 fd12 	bl	80023fc <HAL_GPIO_WritePin>

		outPWM(&htim1, CHANNEL_CH, speed);
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	461a      	mov	r2, r3
 80009dc:	2108      	movs	r1, #8
 80009de:	4815      	ldr	r0, [pc, #84]	; (8000a34 <phase+0x2b4>)
 80009e0:	f7ff fbd4 	bl	800018c <outPWM>
		HAL_GPIO_WritePin(GPIOA, BL_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2140      	movs	r1, #64	; 0x40
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <phase+0x2b8>)
 80009ea:	f001 fd07 	bl	80023fc <HAL_GPIO_WritePin>

		strSize = sprintf((char*)buffer, "STEP: %d CH-BL\r\n", step);
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	491b      	ldr	r1, [pc, #108]	; (8000a60 <phase+0x2e0>)
 80009f2:	4814      	ldr	r0, [pc, #80]	; (8000a44 <phase+0x2c4>)
 80009f4:	f003 fdec 	bl	80045d0 <siprintf>
 80009f8:	4602      	mov	r2, r0
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <phase+0x2c8>)
 80009fc:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, strSize, 100);
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <phase+0x2c8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	490f      	ldr	r1, [pc, #60]	; (8000a44 <phase+0x2c4>)
 8000a08:	4810      	ldr	r0, [pc, #64]	; (8000a4c <phase+0x2cc>)
 8000a0a:	f003 fbf2 	bl	80041f2 <HAL_UART_Transmit>
		delta = bemfB - bemfSum;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <phase+0x2a8>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <phase+0x2bc>)
 8000a18:	6013      	str	r3, [r2, #0]
		break;
 8000a1a:	bf00      	nop
	}
	//HAL_Delay(100);
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000164 	.word	0x20000164
 8000a28:	20000168 	.word	0x20000168
 8000a2c:	2000016c 	.word	0x2000016c
 8000a30:	aaaaaaab 	.word	0xaaaaaaab
 8000a34:	20000254 	.word	0x20000254
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	20000170 	.word	0x20000170
 8000a40:	08004e0c 	.word	0x08004e0c
 8000a44:	20000098 	.word	0x20000098
 8000a48:	20000160 	.word	0x20000160
 8000a4c:	200001d0 	.word	0x200001d0
 8000a50:	08004e20 	.word	0x08004e20
 8000a54:	08004e34 	.word	0x08004e34
 8000a58:	08004e48 	.word	0x08004e48
 8000a5c:	08004e5c 	.word	0x08004e5c
 8000a60:	08004e70 	.word	0x08004e70

08000a64 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if(!ADCDataStatus) ADCDataStatus = true;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_ADC_ConvCpltCallback+0x28>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f083 0301 	eor.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <HAL_ADC_ConvCpltCallback+0x1c>
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <HAL_ADC_ConvCpltCallback+0x28>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000294 	.word	0x20000294

08000a90 <HAL_TIM_IC_CaptureCallback>:
		}
		++x;
	}*/
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	static uint32_t Count_Freq1;
	static uint32_t Count_Freq2;

	static bool Freq_State;

	if(htim->Instance == TIM2){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa0:	d159      	bne.n	8000b56 <HAL_TIM_IC_CaptureCallback+0xc6>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7f1b      	ldrb	r3, [r3, #28]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d137      	bne.n	8000b1a <HAL_TIM_IC_CaptureCallback+0x8a>
			Count_RisingEdge = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	482c      	ldr	r0, [pc, #176]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000aae:	f002 fe93 	bl	80037d8 <HAL_TIM_ReadCapturedValue>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000ab6:	601a      	str	r2, [r3, #0]

			if(Freq_State == 0){
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	f083 0301 	eor.w	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <HAL_TIM_IC_CaptureCallback+0x46>
				Freq_State = 1;
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
				Count_Freq1 = Count_RisingEdge;
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	e02c      	b.n	8000b30 <HAL_TIM_IC_CaptureCallback+0xa0>
			}
			else if(Freq_State == 1){
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d028      	beq.n	8000b30 <HAL_TIM_IC_CaptureCallback+0xa0>
				Freq_State = 0;
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
				Count_Freq2 = Count_RisingEdge;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000aea:	6013      	str	r3, [r2, #0]
				Frequency = 1 / ((Count_Freq2 - Count_Freq1) / 1000); //in kHz
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000af8:	fba2 2303 	umull	r2, r3, r2, r3
 8000afc:	099b      	lsrs	r3, r3, #6
 8000afe:	2201      	movs	r2, #1
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000b06:	6013      	str	r3, [r2, #0]
				Frequency = Frequency * 1000; //Convert to Hz
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	e00a      	b.n	8000b30 <HAL_TIM_IC_CaptureCallback+0xa0>
			}
		}

		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7f1b      	ldrb	r3, [r3, #28]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d106      	bne.n	8000b30 <HAL_TIM_IC_CaptureCallback+0xa0>
			Count_FallingEdge = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 8000b22:	2104      	movs	r1, #4
 8000b24:	480e      	ldr	r0, [pc, #56]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000b26:	f002 fe57 	bl	80037d8 <HAL_TIM_ReadCapturedValue>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b2e:	601a      	str	r2, [r3, #0]
		}

		if(Count_FallingEdge > Count_RisingEdge){
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d90c      	bls.n	8000b56 <HAL_TIM_IC_CaptureCallback+0xc6>
			Input_DutyCycle = Count_FallingEdge - Count_RisingEdge;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000b48:	6013      	str	r3, [r2, #0]
			Count_RisingEdge = 0;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
			Count_FallingEdge = 0;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000254 	.word	0x20000254
 8000b64:	20000174 	.word	0x20000174
 8000b68:	20000178 	.word	0x20000178
 8000b6c:	2000017c 	.word	0x2000017c
 8000b70:	20000180 	.word	0x20000180
 8000b74:	10624dd3 	.word	0x10624dd3
 8000b78:	20000094 	.word	0x20000094
 8000b7c:	20000184 	.word	0x20000184
 8000b80:	20000090 	.word	0x20000090

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_MspInit+0x5c>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <HAL_MspInit+0x5c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_MspInit+0x5c>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x5c>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a29      	ldr	r2, [pc, #164]	; (8000cb4 <HAL_ADC_MspInit+0xc0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d14a      	bne.n	8000caa <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <HAL_ADC_MspInit+0xc4>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c44:	2307      	movs	r3, #7
 8000c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	481a      	ldr	r0, [pc, #104]	; (8000cbc <HAL_ADC_MspInit+0xc8>)
 8000c54:	f001 fa78 	bl	8002148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <HAL_ADC_MspInit+0xd0>)
 8000c5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c82:	2220      	movs	r2, #32
 8000c84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000c90:	f001 f86c 	bl	8001d6c <HAL_DMA_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000c9a:	f7ff ff73 	bl	8000b84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000ca2:	621a      	str	r2, [r3, #32]
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_ADC_MspInit+0xcc>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40012400 	.word	0x40012400
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	20000210 	.word	0x20000210
 8000cc4:	40020008 	.word	0x40020008

08000cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_TIM_Base_MspInit+0x44>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d113      	bne.n	8000d02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_TIM_Base_MspInit+0x48>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <HAL_TIM_Base_MspInit+0x48>)
 8000ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_TIM_Base_MspInit+0x48>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	201b      	movs	r0, #27
 8000cf8:	f001 f801 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000cfc:	201b      	movs	r0, #27
 8000cfe:	f001 f81a 	bl	8001d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40012c00 	.word	0x40012c00
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d32:	d13e      	bne.n	8000db2 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_TIM_IC_MspInit+0xa8>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <HAL_TIM_IC_MspInit+0xa8>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	61d3      	str	r3, [r2, #28]
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <HAL_TIM_IC_MspInit+0xa8>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_TIM_IC_MspInit+0xa8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <HAL_TIM_IC_MspInit+0xa8>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_TIM_IC_MspInit+0xa8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <HAL_TIM_IC_MspInit+0xac>)
 8000d7a:	f001 f9e5 	bl	8002148 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_TIM_IC_MspInit+0xb0>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9c:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <HAL_TIM_IC_MspInit+0xb0>)
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	201c      	movs	r0, #28
 8000da8:	f000 ffa9 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dac:	201c      	movs	r0, #28
 8000dae:	f000 ffc2 	bl	8001d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_TIM_MspPostInit+0x5c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d118      	bne.n	8000e1a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_TIM_MspPostInit+0x60>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_TIM_MspPostInit+0x60>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_TIM_MspPostInit+0x60>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e00:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_TIM_MspPostInit+0x64>)
 8000e16:	f001 f997 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010800 	.word	0x40010800

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <HAL_UART_MspInit+0xa4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d13d      	bne.n	8000ecc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_UART_MspInit+0xa8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <HAL_UART_MspInit+0xa8>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_UART_MspInit+0xa8>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_UART_MspInit+0xa8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_UART_MspInit+0xa8>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0xa8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e80:	2340      	movs	r3, #64	; 0x40
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4812      	ldr	r0, [pc, #72]	; (8000edc <HAL_UART_MspInit+0xac>)
 8000e94:	f001 f958 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <HAL_UART_MspInit+0xac>)
 8000eac:	f001 f94c 	bl	8002148 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_UART_MspInit+0xb0>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec6:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_UART_MspInit+0xb0>)
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	40010000 	.word	0x40010000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <HardFault_Handler+0x4>

08000ef6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <MemManage_Handler+0x4>

08000efc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <BusFault_Handler+0x4>

08000f02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f8f6 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <DMA1_Channel1_IRQHandler+0x10>)
 8000f3e:	f000 ffcf 	bl	8001ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000210 	.word	0x20000210

08000f4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <TIM1_CC_IRQHandler+0x10>)
 8000f52:	f002 f91f 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000254 	.word	0x20000254

08000f60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <TIM2_IRQHandler+0x10>)
 8000f66:	f002 f915 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000298 	.word	0x20000298

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f003 fae2 	bl	800456c <__errno>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	230c      	movs	r3, #12
 8000fac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20005000 	.word	0x20005000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	20000188 	.word	0x20000188
 8000fdc:	200002f0 	.word	0x200002f0

08000fe0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SystemInit+0x5c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <SystemInit+0x5c>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <SystemInit+0x5c>)
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4911      	ldr	r1, [pc, #68]	; (800103c <SystemInit+0x5c>)
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <SystemInit+0x60>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <SystemInit+0x5c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0e      	ldr	r2, [pc, #56]	; (800103c <SystemInit+0x5c>)
 8001002:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <SystemInit+0x5c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SystemInit+0x5c>)
 8001012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <SystemInit+0x5c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <SystemInit+0x5c>)
 800101e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001022:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SystemInit+0x5c>)
 8001026:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800102a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SystemInit+0x64>)
 800102e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001032:	609a      	str	r2, [r3, #8]
#endif 
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	f8ff0000 	.word	0xf8ff0000
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001048:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800104a:	e003      	b.n	8001054 <LoopCopyDataInit>

0800104c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800104e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001050:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001052:	3104      	adds	r1, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001058:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800105a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800105c:	d3f6      	bcc.n	800104c <CopyDataInit>
  ldr r2, =_sbss
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001060:	e002      	b.n	8001068 <LoopFillZerobss>

08001062 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001064:	f842 3b04 	str.w	r3, [r2], #4

08001068 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800106a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800106c:	d3f9      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800106e:	f7ff ffb7 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f003 fa81 	bl	8004578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001076:	f7ff f8c1 	bl	80001fc <main>
  bx lr
 800107a:	4770      	bx	lr
  ldr r3, =_sidata
 800107c:	08004f00 	.word	0x08004f00
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001084:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001088:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800108c:	200002ec 	.word	0x200002ec

08001090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC1_2_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x28>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x28>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 fe1f 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fd6e 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fe37 	bl	8001d52 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 fdff 	bl	8001cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000004 	.word	0x20000004
 8001118:	2000000c 	.word	0x2000000c
 800111c:	20000008 	.word	0x20000008

08001120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x1c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_IncTick+0x20>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <HAL_IncTick+0x20>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	2000000c 	.word	0x2000000c
 8001140:	200002e4 	.word	0x200002e4

08001144 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <HAL_GetTick+0x10>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	200002e4 	.word	0x200002e4

08001158 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0be      	b.n	80012f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	2b00      	cmp	r3, #0
 8001186:	d109      	bne.n	800119c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fd2c 	bl	8000bf4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fb9b 	bl	80018d8 <ADC_ConversionStop_Disable>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f040 8099 	bne.w	80012e6 <HAL_ADC_Init+0x18e>
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f040 8095 	bne.w	80012e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011c4:	f023 0302 	bic.w	r3, r3, #2
 80011c8:	f043 0202 	orr.w	r2, r3, #2
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7b1b      	ldrb	r3, [r3, #12]
 80011de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f0:	d003      	beq.n	80011fa <HAL_ADC_Init+0xa2>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <HAL_ADC_Init+0xa8>
 80011fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fe:	e000      	b.n	8001202 <HAL_ADC_Init+0xaa>
 8001200:	2300      	movs	r3, #0
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7d1b      	ldrb	r3, [r3, #20]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d119      	bne.n	8001244 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7b1b      	ldrb	r3, [r3, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d109      	bne.n	800122c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	3b01      	subs	r3, #1
 800121e:	035a      	lsls	r2, r3, #13
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	e00b      	b.n	8001244 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	f043 0220 	orr.w	r2, r3, #32
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	f043 0201 	orr.w	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	430a      	orrs	r2, r1
 8001256:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <HAL_ADC_Init+0x1a8>)
 8001260:	4013      	ands	r3, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	430b      	orrs	r3, r1
 800126a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001274:	d003      	beq.n	800127e <HAL_ADC_Init+0x126>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d104      	bne.n	8001288 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	3b01      	subs	r3, #1
 8001284:	051b      	lsls	r3, r3, #20
 8001286:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	430a      	orrs	r2, r1
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_ADC_Init+0x1ac>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d10b      	bne.n	80012c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012c2:	e018      	b.n	80012f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	f023 0312 	bic.w	r3, r3, #18
 80012cc:	f043 0210 	orr.w	r2, r3, #16
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	f043 0201 	orr.w	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012e4:	e007      	b.n	80012f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	f043 0210 	orr.w	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	ffe1f7fd 	.word	0xffe1f7fd
 8001304:	ff1f0efe 	.word	0xff1f0efe

08001308 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Start+0x1a>
 800131e:	2302      	movs	r3, #2
 8001320:	e098      	b.n	8001454 <HAL_ADC_Start+0x14c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fa82 	bl	8001834 <ADC_Enable>
 8001330:	4603      	mov	r3, r0
 8001332:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 8087 	bne.w	800144a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a41      	ldr	r2, [pc, #260]	; (800145c <HAL_ADC_Start+0x154>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d105      	bne.n	8001366 <HAL_ADC_Start+0x5e>
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_ADC_Start+0x158>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d115      	bne.n	8001392 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137c:	2b00      	cmp	r3, #0
 800137e:	d026      	beq.n	80013ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001388:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001390:	e01d      	b.n	80013ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <HAL_ADC_Start+0x158>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d004      	beq.n	80013b2 <HAL_ADC_Start+0xaa>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2b      	ldr	r2, [pc, #172]	; (800145c <HAL_ADC_Start+0x154>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10d      	bne.n	80013ce <HAL_ADC_Start+0xc6>
 80013b2:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_ADC_Start+0x158>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f023 0206 	bic.w	r2, r3, #6
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e6:	e002      	b.n	80013ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f06f 0202 	mvn.w	r2, #2
 80013fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800140a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800140e:	d113      	bne.n	8001438 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001414:	4a11      	ldr	r2, [pc, #68]	; (800145c <HAL_ADC_Start+0x154>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d105      	bne.n	8001426 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_ADC_Start+0x158>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d108      	bne.n	8001438 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	e00c      	b.n	8001452 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e003      	b.n	8001452 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40012800 	.word	0x40012800
 8001460:	40012400 	.word	0x40012400

08001464 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a64      	ldr	r2, [pc, #400]	; (800160c <HAL_ADC_Start_DMA+0x1a8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d004      	beq.n	8001488 <HAL_ADC_Start_DMA+0x24>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a63      	ldr	r2, [pc, #396]	; (8001610 <HAL_ADC_Start_DMA+0x1ac>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d106      	bne.n	8001496 <HAL_ADC_Start_DMA+0x32>
 8001488:	4b60      	ldr	r3, [pc, #384]	; (800160c <HAL_ADC_Start_DMA+0x1a8>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001490:	2b00      	cmp	r3, #0
 8001492:	f040 80b3 	bne.w	80015fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_ADC_Start_DMA+0x40>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e0ae      	b.n	8001602 <HAL_ADC_Start_DMA+0x19e>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f9c1 	bl	8001834 <ADC_Enable>
 80014b2:	4603      	mov	r3, r0
 80014b4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f040 809a 	bne.w	80015f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a4e      	ldr	r2, [pc, #312]	; (8001610 <HAL_ADC_Start_DMA+0x1ac>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d105      	bne.n	80014e8 <HAL_ADC_Start_DMA+0x84>
 80014dc:	4b4b      	ldr	r3, [pc, #300]	; (800160c <HAL_ADC_Start_DMA+0x1a8>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d115      	bne.n	8001514 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d026      	beq.n	8001550 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001512:	e01d      	b.n	8001550 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a39      	ldr	r2, [pc, #228]	; (800160c <HAL_ADC_Start_DMA+0x1a8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d004      	beq.n	8001534 <HAL_ADC_Start_DMA+0xd0>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a38      	ldr	r2, [pc, #224]	; (8001610 <HAL_ADC_Start_DMA+0x1ac>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d10d      	bne.n	8001550 <HAL_ADC_Start_DMA+0xec>
 8001534:	4b35      	ldr	r3, [pc, #212]	; (800160c <HAL_ADC_Start_DMA+0x1a8>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001548:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	f023 0206 	bic.w	r2, r3, #6
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
 8001568:	e002      	b.n	8001570 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a25      	ldr	r2, [pc, #148]	; (8001614 <HAL_ADC_Start_DMA+0x1b0>)
 800157e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4a24      	ldr	r2, [pc, #144]	; (8001618 <HAL_ADC_Start_DMA+0x1b4>)
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a23      	ldr	r2, [pc, #140]	; (800161c <HAL_ADC_Start_DMA+0x1b8>)
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f06f 0202 	mvn.w	r2, #2
 8001598:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a18      	ldr	r0, [r3, #32]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	334c      	adds	r3, #76	; 0x4c
 80015b4:	4619      	mov	r1, r3
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f000 fc31 	bl	8001e20 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015cc:	d108      	bne.n	80015e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015de:	e00f      	b.n	8001600 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015f0:	e006      	b.n	8001600 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80015fa:	e001      	b.n	8001600 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40012400 	.word	0x40012400
 8001610:	40012800 	.word	0x40012800
 8001614:	0800194d 	.word	0x0800194d
 8001618:	080019c9 	.word	0x080019c9
 800161c:	080019e5 	.word	0x080019e5

08001620 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x20>
 8001660:	2302      	movs	r3, #2
 8001662:	e0dc      	b.n	800181e <HAL_ADC_ConfigChannel+0x1da>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b06      	cmp	r3, #6
 8001672:	d81c      	bhi.n	80016ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b05      	subs	r3, #5
 8001686:	221f      	movs	r2, #31
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b05      	subs	r3, #5
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
 80016ac:	e03c      	b.n	8001728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d81c      	bhi.n	80016f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b23      	subs	r3, #35	; 0x23
 80016c8:	221f      	movs	r2, #31
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4019      	ands	r1, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b23      	subs	r3, #35	; 0x23
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
 80016ee:	e01b      	b.n	8001728 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3b41      	subs	r3, #65	; 0x41
 8001702:	221f      	movs	r2, #31
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	4019      	ands	r1, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b41      	subs	r3, #65	; 0x41
 800171c:	fa00 f203 	lsl.w	r2, r0, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b09      	cmp	r3, #9
 800172e:	d91c      	bls.n	800176a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68d9      	ldr	r1, [r3, #12]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	3b1e      	subs	r3, #30
 8001742:	2207      	movs	r2, #7
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	4019      	ands	r1, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6898      	ldr	r0, [r3, #8]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	3b1e      	subs	r3, #30
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	e019      	b.n	800179e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6919      	ldr	r1, [r3, #16]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	2207      	movs	r2, #7
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	4019      	ands	r1, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6898      	ldr	r0, [r3, #8]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	fa00 f203 	lsl.w	r2, r0, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d003      	beq.n	80017ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017aa:	2b11      	cmp	r3, #17
 80017ac:	d132      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_ADC_ConfigChannel+0x1e4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d125      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d126      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017d4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d11a      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_ADC_ConfigChannel+0x1e8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_ADC_ConfigChannel+0x1ec>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9a      	lsrs	r2, r3, #18
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f4:	e002      	b.n	80017fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001802:	e007      	b.n	8001814 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	f043 0220 	orr.w	r2, r3, #32
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40012400 	.word	0x40012400
 800182c:	20000004 	.word	0x20000004
 8001830:	431bde83 	.word	0x431bde83

08001834 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d039      	beq.n	80018c6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <ADC_Enable+0x9c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <ADC_Enable+0xa0>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0c9b      	lsrs	r3, r3, #18
 800186e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001870:	e002      	b.n	8001878 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3b01      	subs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f9      	bne.n	8001872 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800187e:	f7ff fc61 	bl	8001144 <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001884:	e018      	b.n	80018b8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001886:	f7ff fc5d 	bl	8001144 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d911      	bls.n	80018b8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f043 0210 	orr.w	r2, r3, #16
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	f043 0201 	orr.w	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e007      	b.n	80018c8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d1df      	bne.n	8001886 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000004 	.word	0x20000004
 80018d4:	431bde83 	.word	0x431bde83

080018d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d127      	bne.n	8001942 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001902:	f7ff fc1f 	bl	8001144 <HAL_GetTick>
 8001906:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001908:	e014      	b.n	8001934 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800190a:	f7ff fc1b 	bl	8001144 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d90d      	bls.n	8001934 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	f043 0210 	orr.w	r2, r3, #16
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e007      	b.n	8001944 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d0e3      	beq.n	800190a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001962:	2b00      	cmp	r3, #0
 8001964:	d127      	bne.n	80019b6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800197c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001980:	d115      	bne.n	80019ae <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001986:	2b00      	cmp	r3, #0
 8001988:	d111      	bne.n	80019ae <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f7ff f858 	bl	8000a64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019b4:	e004      	b.n	80019c0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	4798      	blx	r3
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fe22 	bl	8001620 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f043 0204 	orr.w	r2, r3, #4
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7ff fe11 	bl	8001632 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ADCEx_Calibration_Start+0x1e>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e086      	b.n	8001b44 <HAL_ADCEx_Calibration_Start+0x12c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff4a 	bl	80018d8 <ADC_ConversionStop_Disable>
 8001a44:	4603      	mov	r3, r0
 8001a46:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d175      	bne.n	8001b3a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a56:	f023 0302 	bic.w	r3, r3, #2
 8001a5a:	f043 0202 	orr.w	r2, r3, #2
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_ADCEx_Calibration_Start+0x134>)
 8001a64:	681c      	ldr	r4, [r3, #0]
 8001a66:	2002      	movs	r0, #2
 8001a68:	f001 f9b2 	bl	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001a72:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001a74:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001a76:	e002      	b.n	8001a7e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f9      	bne.n	8001a78 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fed5 	bl	8001834 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0208 	orr.w	r2, r2, #8
 8001a98:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a9a:	f7ff fb53 	bl	8001144 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001aa0:	e014      	b.n	8001acc <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001aa2:	f7ff fb4f 	bl	8001144 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d90d      	bls.n	8001acc <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	f023 0312 	bic.w	r3, r3, #18
 8001ab8:	f043 0210 	orr.w	r2, r3, #16
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e03b      	b.n	8001b44 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1e3      	bne.n	8001aa2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0204 	orr.w	r2, r2, #4
 8001ae8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001aea:	f7ff fb2b 	bl	8001144 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001af0:	e014      	b.n	8001b1c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001af2:	f7ff fb27 	bl	8001144 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b0a      	cmp	r3, #10
 8001afe:	d90d      	bls.n	8001b1c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f023 0312 	bic.w	r3, r3, #18
 8001b08:	f043 0210 	orr.w	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e013      	b.n	8001b44 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1e3      	bne.n	8001af2 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f023 0303 	bic.w	r3, r3, #3
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	20000004 	.word	0x20000004

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4906      	ldr	r1, [pc, #24]	; (8001be8 <__NVIC_EnableIRQ+0x34>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0a      	blt.n	8001c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490c      	ldr	r1, [pc, #48]	; (8001c38 <__NVIC_SetPriority+0x4c>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c14:	e00a      	b.n	8001c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	; (8001c3c <__NVIC_SetPriority+0x50>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3b04      	subs	r3, #4
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	761a      	strb	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf28      	it	cs
 8001c5e:	2304      	movcs	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d902      	bls.n	8001c70 <NVIC_EncodePriority+0x30>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3b03      	subs	r3, #3
 8001c6e:	e000      	b.n	8001c72 <NVIC_EncodePriority+0x32>
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	4313      	orrs	r3, r2
         );
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00f      	b.n	8001cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <SysTick_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f7ff ff90 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <SysTick_Config+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <SysTick_Config+0x40>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff2d 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d10:	f7ff ff42 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	6978      	ldr	r0, [r7, #20]
 8001d1c:	f7ff ff90 	bl	8001c40 <NVIC_EncodePriority>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff5f 	bl	8001bec <__NVIC_SetPriority>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff35 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffa2 	bl	8001ca4 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e043      	b.n	8001e0a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_DMA_Init+0xa8>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_DMA_Init+0xac>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	009a      	lsls	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <HAL_DMA_Init+0xb0>)
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001db6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	bffdfff8 	.word	0xbffdfff8
 8001e18:	cccccccd 	.word	0xcccccccd
 8001e1c:	40020000 	.word	0x40020000

08001e20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_DMA_Start_IT+0x20>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e04a      	b.n	8001ed6 <HAL_DMA_Start_IT+0xb6>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d13a      	bne.n	8001ec8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2202      	movs	r2, #2
 8001e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f938 	bl	80020ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 020e 	orr.w	r2, r2, #14
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e00f      	b.n	8001eb6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0204 	bic.w	r2, r2, #4
 8001ea4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 020a 	orr.w	r2, r2, #10
 8001eb4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e005      	b.n	8001ed4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	2204      	movs	r2, #4
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d04f      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0xc8>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04a      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0204 	bic.w	r2, r2, #4
 8001f2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a66      	ldr	r2, [pc, #408]	; (80020d0 <HAL_DMA_IRQHandler+0x1f0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d029      	beq.n	8001f8e <HAL_DMA_IRQHandler+0xae>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a65      	ldr	r2, [pc, #404]	; (80020d4 <HAL_DMA_IRQHandler+0x1f4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xaa>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a63      	ldr	r2, [pc, #396]	; (80020d8 <HAL_DMA_IRQHandler+0x1f8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01a      	beq.n	8001f84 <HAL_DMA_IRQHandler+0xa4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a62      	ldr	r2, [pc, #392]	; (80020dc <HAL_DMA_IRQHandler+0x1fc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d012      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x9e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a60      	ldr	r2, [pc, #384]	; (80020e0 <HAL_DMA_IRQHandler+0x200>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00a      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x98>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a5f      	ldr	r2, [pc, #380]	; (80020e4 <HAL_DMA_IRQHandler+0x204>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d102      	bne.n	8001f72 <HAL_DMA_IRQHandler+0x92>
 8001f6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f70:	e00e      	b.n	8001f90 <HAL_DMA_IRQHandler+0xb0>
 8001f72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f76:	e00b      	b.n	8001f90 <HAL_DMA_IRQHandler+0xb0>
 8001f78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f7c:	e008      	b.n	8001f90 <HAL_DMA_IRQHandler+0xb0>
 8001f7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f82:	e005      	b.n	8001f90 <HAL_DMA_IRQHandler+0xb0>
 8001f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f88:	e002      	b.n	8001f90 <HAL_DMA_IRQHandler+0xb0>
 8001f8a:	2340      	movs	r3, #64	; 0x40
 8001f8c:	e000      	b.n	8001f90 <HAL_DMA_IRQHandler+0xb0>
 8001f8e:	2304      	movs	r3, #4
 8001f90:	4a55      	ldr	r2, [pc, #340]	; (80020e8 <HAL_DMA_IRQHandler+0x208>)
 8001f92:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8094 	beq.w	80020c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fa6:	e08e      	b.n	80020c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	2202      	movs	r2, #2
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d056      	beq.n	8002066 <HAL_DMA_IRQHandler+0x186>
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d051      	beq.n	8002066 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10b      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 020a 	bic.w	r2, r2, #10
 8001fde:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_DMA_IRQHandler+0x1f0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d029      	beq.n	8002046 <HAL_DMA_IRQHandler+0x166>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a37      	ldr	r2, [pc, #220]	; (80020d4 <HAL_DMA_IRQHandler+0x1f4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d022      	beq.n	8002042 <HAL_DMA_IRQHandler+0x162>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a35      	ldr	r2, [pc, #212]	; (80020d8 <HAL_DMA_IRQHandler+0x1f8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01a      	beq.n	800203c <HAL_DMA_IRQHandler+0x15c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a34      	ldr	r2, [pc, #208]	; (80020dc <HAL_DMA_IRQHandler+0x1fc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d012      	beq.n	8002036 <HAL_DMA_IRQHandler+0x156>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <HAL_DMA_IRQHandler+0x200>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00a      	beq.n	8002030 <HAL_DMA_IRQHandler+0x150>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a31      	ldr	r2, [pc, #196]	; (80020e4 <HAL_DMA_IRQHandler+0x204>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d102      	bne.n	800202a <HAL_DMA_IRQHandler+0x14a>
 8002024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002028:	e00e      	b.n	8002048 <HAL_DMA_IRQHandler+0x168>
 800202a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202e:	e00b      	b.n	8002048 <HAL_DMA_IRQHandler+0x168>
 8002030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002034:	e008      	b.n	8002048 <HAL_DMA_IRQHandler+0x168>
 8002036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203a:	e005      	b.n	8002048 <HAL_DMA_IRQHandler+0x168>
 800203c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002040:	e002      	b.n	8002048 <HAL_DMA_IRQHandler+0x168>
 8002042:	2320      	movs	r3, #32
 8002044:	e000      	b.n	8002048 <HAL_DMA_IRQHandler+0x168>
 8002046:	2302      	movs	r3, #2
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <HAL_DMA_IRQHandler+0x208>)
 800204a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d034      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002064:	e02f      	b.n	80020c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2208      	movs	r2, #8
 800206c:	409a      	lsls	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d028      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x1e8>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d023      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 020e 	bic.w	r2, r2, #14
 800208e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f202 	lsl.w	r2, r1, r2
 800209e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
    }
  }
  return;
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
}
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40020008 	.word	0x40020008
 80020d4:	4002001c 	.word	0x4002001c
 80020d8:	40020030 	.word	0x40020030
 80020dc:	40020044 	.word	0x40020044
 80020e0:	40020058 	.word	0x40020058
 80020e4:	4002006c 	.word	0x4002006c
 80020e8:	40020000 	.word	0x40020000

080020ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f202 	lsl.w	r2, r1, r2
 8002108:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b10      	cmp	r3, #16
 8002118:	d108      	bne.n	800212c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800212a:	e007      	b.n	800213c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b08b      	sub	sp, #44	; 0x2c
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	e127      	b.n	80023ac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800215c:	2201      	movs	r2, #1
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8116 	bne.w	80023a6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b12      	cmp	r3, #18
 8002180:	d034      	beq.n	80021ec <HAL_GPIO_Init+0xa4>
 8002182:	2b12      	cmp	r3, #18
 8002184:	d80d      	bhi.n	80021a2 <HAL_GPIO_Init+0x5a>
 8002186:	2b02      	cmp	r3, #2
 8002188:	d02b      	beq.n	80021e2 <HAL_GPIO_Init+0x9a>
 800218a:	2b02      	cmp	r3, #2
 800218c:	d804      	bhi.n	8002198 <HAL_GPIO_Init+0x50>
 800218e:	2b00      	cmp	r3, #0
 8002190:	d031      	beq.n	80021f6 <HAL_GPIO_Init+0xae>
 8002192:	2b01      	cmp	r3, #1
 8002194:	d01c      	beq.n	80021d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002196:	e048      	b.n	800222a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002198:	2b03      	cmp	r3, #3
 800219a:	d043      	beq.n	8002224 <HAL_GPIO_Init+0xdc>
 800219c:	2b11      	cmp	r3, #17
 800219e:	d01b      	beq.n	80021d8 <HAL_GPIO_Init+0x90>
          break;
 80021a0:	e043      	b.n	800222a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021a2:	4a89      	ldr	r2, [pc, #548]	; (80023c8 <HAL_GPIO_Init+0x280>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d026      	beq.n	80021f6 <HAL_GPIO_Init+0xae>
 80021a8:	4a87      	ldr	r2, [pc, #540]	; (80023c8 <HAL_GPIO_Init+0x280>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d806      	bhi.n	80021bc <HAL_GPIO_Init+0x74>
 80021ae:	4a87      	ldr	r2, [pc, #540]	; (80023cc <HAL_GPIO_Init+0x284>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d020      	beq.n	80021f6 <HAL_GPIO_Init+0xae>
 80021b4:	4a86      	ldr	r2, [pc, #536]	; (80023d0 <HAL_GPIO_Init+0x288>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01d      	beq.n	80021f6 <HAL_GPIO_Init+0xae>
          break;
 80021ba:	e036      	b.n	800222a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021bc:	4a85      	ldr	r2, [pc, #532]	; (80023d4 <HAL_GPIO_Init+0x28c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0xae>
 80021c2:	4a85      	ldr	r2, [pc, #532]	; (80023d8 <HAL_GPIO_Init+0x290>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d016      	beq.n	80021f6 <HAL_GPIO_Init+0xae>
 80021c8:	4a84      	ldr	r2, [pc, #528]	; (80023dc <HAL_GPIO_Init+0x294>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0xae>
          break;
 80021ce:	e02c      	b.n	800222a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	623b      	str	r3, [r7, #32]
          break;
 80021d6:	e028      	b.n	800222a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	3304      	adds	r3, #4
 80021de:	623b      	str	r3, [r7, #32]
          break;
 80021e0:	e023      	b.n	800222a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	3308      	adds	r3, #8
 80021e8:	623b      	str	r3, [r7, #32]
          break;
 80021ea:	e01e      	b.n	800222a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	330c      	adds	r3, #12
 80021f2:	623b      	str	r3, [r7, #32]
          break;
 80021f4:	e019      	b.n	800222a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021fe:	2304      	movs	r3, #4
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e012      	b.n	800222a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800220c:	2308      	movs	r3, #8
 800220e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	611a      	str	r2, [r3, #16]
          break;
 8002216:	e008      	b.n	800222a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002218:	2308      	movs	r3, #8
 800221a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	615a      	str	r2, [r3, #20]
          break;
 8002222:	e002      	b.n	800222a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
          break;
 8002228:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2bff      	cmp	r3, #255	; 0xff
 800222e:	d801      	bhi.n	8002234 <HAL_GPIO_Init+0xec>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	e001      	b.n	8002238 <HAL_GPIO_Init+0xf0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2bff      	cmp	r3, #255	; 0xff
 800223e:	d802      	bhi.n	8002246 <HAL_GPIO_Init+0xfe>
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	e002      	b.n	800224c <HAL_GPIO_Init+0x104>
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	3b08      	subs	r3, #8
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	210f      	movs	r1, #15
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	401a      	ands	r2, r3
 800225e:	6a39      	ldr	r1, [r7, #32]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	431a      	orrs	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8096 	beq.w	80023a6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800227a:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_GPIO_Init+0x298>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_GPIO_Init+0x298>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6193      	str	r3, [r2, #24]
 8002286:	4b56      	ldr	r3, [pc, #344]	; (80023e0 <HAL_GPIO_Init+0x298>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002292:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <HAL_GPIO_Init+0x29c>)
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4b      	ldr	r2, [pc, #300]	; (80023e8 <HAL_GPIO_Init+0x2a0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0x19e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4a      	ldr	r2, [pc, #296]	; (80023ec <HAL_GPIO_Init+0x2a4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00d      	beq.n	80022e2 <HAL_GPIO_Init+0x19a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a49      	ldr	r2, [pc, #292]	; (80023f0 <HAL_GPIO_Init+0x2a8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x196>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a48      	ldr	r2, [pc, #288]	; (80023f4 <HAL_GPIO_Init+0x2ac>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_GPIO_Init+0x192>
 80022d6:	2303      	movs	r3, #3
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x1a0>
 80022da:	2304      	movs	r3, #4
 80022dc:	e004      	b.n	80022e8 <HAL_GPIO_Init+0x1a0>
 80022de:	2302      	movs	r3, #2
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_Init+0x1a0>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_GPIO_Init+0x1a0>
 80022e6:	2300      	movs	r3, #0
 80022e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ea:	f002 0203 	and.w	r2, r2, #3
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	4093      	lsls	r3, r2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022f8:	493a      	ldr	r1, [pc, #232]	; (80023e4 <HAL_GPIO_Init+0x29c>)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002312:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4938      	ldr	r1, [pc, #224]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
 800231e:	e006      	b.n	800232e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002320:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	43db      	mvns	r3, r3
 8002328:	4933      	ldr	r1, [pc, #204]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 800232a:	4013      	ands	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d006      	beq.n	8002348 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	492e      	ldr	r1, [pc, #184]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
 8002346:	e006      	b.n	8002356 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	43db      	mvns	r3, r3
 8002350:	4929      	ldr	r1, [pc, #164]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 8002352:	4013      	ands	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002362:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	4924      	ldr	r1, [pc, #144]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
 800236e:	e006      	b.n	800237e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	43db      	mvns	r3, r3
 8002378:	491f      	ldr	r1, [pc, #124]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 800237a:	4013      	ands	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	491a      	ldr	r1, [pc, #104]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	60cb      	str	r3, [r1, #12]
 8002396:	e006      	b.n	80023a6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	43db      	mvns	r3, r3
 80023a0:	4915      	ldr	r1, [pc, #84]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	3301      	adds	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f47f aed0 	bne.w	800215c <HAL_GPIO_Init+0x14>
  }
}
 80023bc:	bf00      	nop
 80023be:	372c      	adds	r7, #44	; 0x2c
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	10210000 	.word	0x10210000
 80023cc:	10110000 	.word	0x10110000
 80023d0:	10120000 	.word	0x10120000
 80023d4:	10310000 	.word	0x10310000
 80023d8:	10320000 	.word	0x10320000
 80023dc:	10220000 	.word	0x10220000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40010800 	.word	0x40010800
 80023ec:	40010c00 	.word	0x40010c00
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40011400 	.word	0x40011400
 80023f8:	40010400 	.word	0x40010400

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002418:	e003      	b.n	8002422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	041a      	lsls	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	611a      	str	r2, [r3, #16]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e26c      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8087 	beq.w	800255a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800244c:	4b92      	ldr	r3, [pc, #584]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b04      	cmp	r3, #4
 8002456:	d00c      	beq.n	8002472 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002458:	4b8f      	ldr	r3, [pc, #572]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d112      	bne.n	800248a <HAL_RCC_OscConfig+0x5e>
 8002464:	4b8c      	ldr	r3, [pc, #560]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d10b      	bne.n	800248a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002472:	4b89      	ldr	r3, [pc, #548]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d06c      	beq.n	8002558 <HAL_RCC_OscConfig+0x12c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d168      	bne.n	8002558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e246      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x76>
 8002494:	4b80      	ldr	r3, [pc, #512]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a7f      	ldr	r2, [pc, #508]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800249a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	e02e      	b.n	8002500 <HAL_RCC_OscConfig+0xd4>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x98>
 80024aa:	4b7b      	ldr	r3, [pc, #492]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7a      	ldr	r2, [pc, #488]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b78      	ldr	r3, [pc, #480]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a77      	ldr	r2, [pc, #476]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xd4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0xbc>
 80024ce:	4b72      	ldr	r3, [pc, #456]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a71      	ldr	r2, [pc, #452]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b6f      	ldr	r3, [pc, #444]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6e      	ldr	r2, [pc, #440]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xd4>
 80024e8:	4b6b      	ldr	r3, [pc, #428]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a6a      	ldr	r2, [pc, #424]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b68      	ldr	r3, [pc, #416]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a67      	ldr	r2, [pc, #412]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fe1c 	bl	8001144 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe fe18 	bl	8001144 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1fa      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b5d      	ldr	r3, [pc, #372]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xe4>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fe08 	bl	8001144 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe fe04 	bl	8001144 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1e6      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x10c>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d063      	beq.n	800262e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002566:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x18c>
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d116      	bne.n	80025b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x176>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1ba      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4939      	ldr	r1, [pc, #228]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	e03a      	b.n	800262e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_RCC_OscConfig+0x270>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe fdbd 	bl	8001144 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ce:	f7fe fdb9 	bl	8001144 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e19b      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4927      	ldr	r1, [pc, #156]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_RCC_OscConfig+0x270>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fd9c 	bl	8001144 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002610:	f7fe fd98 	bl	8001144 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e17a      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d03a      	beq.n	80026b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d019      	beq.n	8002676 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002648:	f7fe fd7c 	bl	8001144 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002650:	f7fe fd78 	bl	8001144 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e15a      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_RCC_OscConfig+0x26c>)
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800266e:	2001      	movs	r0, #1
 8002670:	f000 fada 	bl	8002c28 <RCC_Delay>
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_RCC_OscConfig+0x274>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267c:	f7fe fd62 	bl	8001144 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002682:	e00f      	b.n	80026a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe fd5e 	bl	8001144 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d908      	bls.n	80026a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e140      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	42420000 	.word	0x42420000
 80026a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a4:	4b9e      	ldr	r3, [pc, #632]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e9      	bne.n	8002684 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80a6 	beq.w	800280a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b97      	ldr	r3, [pc, #604]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10d      	bne.n	80026ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b94      	ldr	r3, [pc, #592]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4a93      	ldr	r2, [pc, #588]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	61d3      	str	r3, [r2, #28]
 80026da:	4b91      	ldr	r3, [pc, #580]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b8e      	ldr	r3, [pc, #568]	; (8002924 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f6:	4b8b      	ldr	r3, [pc, #556]	; (8002924 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a8a      	ldr	r2, [pc, #552]	; (8002924 <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7fe fd1f 	bl	8001144 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7fe fd1b 	bl	8001144 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b64      	cmp	r3, #100	; 0x64
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e0fd      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCC_OscConfig+0x4f8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x312>
 8002730:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a7a      	ldr	r2, [pc, #488]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	e02d      	b.n	800279a <HAL_RCC_OscConfig+0x36e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x334>
 8002746:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a75      	ldr	r2, [pc, #468]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	4b73      	ldr	r3, [pc, #460]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4a72      	ldr	r2, [pc, #456]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6213      	str	r3, [r2, #32]
 800275e:	e01c      	b.n	800279a <HAL_RCC_OscConfig+0x36e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b05      	cmp	r3, #5
 8002766:	d10c      	bne.n	8002782 <HAL_RCC_OscConfig+0x356>
 8002768:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a6c      	ldr	r2, [pc, #432]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	f043 0304 	orr.w	r3, r3, #4
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	4b6a      	ldr	r3, [pc, #424]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a69      	ldr	r2, [pc, #420]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0x36e>
 8002782:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a66      	ldr	r2, [pc, #408]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a63      	ldr	r2, [pc, #396]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d015      	beq.n	80027ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe fccf 	bl	8001144 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe fccb 	bl	8001144 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e0ab      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	4b57      	ldr	r3, [pc, #348]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ee      	beq.n	80027aa <HAL_RCC_OscConfig+0x37e>
 80027cc:	e014      	b.n	80027f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ce:	f7fe fcb9 	bl	8001144 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe fcb5 	bl	8001144 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e095      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ec:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ee      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d105      	bne.n	800280a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fe:	4b48      	ldr	r3, [pc, #288]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4a47      	ldr	r2, [pc, #284]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002808:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8081 	beq.w	8002916 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002814:	4b42      	ldr	r3, [pc, #264]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b08      	cmp	r3, #8
 800281e:	d061      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d146      	bne.n	80028b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <HAL_RCC_OscConfig+0x4fc>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe fc89 	bl	8001144 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe fc85 	bl	8001144 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e067      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	4b35      	ldr	r3, [pc, #212]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d108      	bne.n	8002870 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	492d      	ldr	r1, [pc, #180]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a19      	ldr	r1, [r3, #32]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	430b      	orrs	r3, r1
 8002882:	4927      	ldr	r1, [pc, #156]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_OscConfig+0x4fc>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe fc59 	bl	8001144 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe fc55 	bl	8001144 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e037      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x46a>
 80028b4:	e02f      	b.n	8002916 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_RCC_OscConfig+0x4fc>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fc42 	bl	8001144 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe fc3e 	bl	8001144 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e020      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x498>
 80028e2:	e018      	b.n	8002916 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e013      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	40007000 	.word	0x40007000
 8002928:	42420060 	.word	0x42420060

0800292c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0d0      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d910      	bls.n	8002970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b67      	ldr	r3, [pc, #412]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 0207 	bic.w	r2, r3, #7
 8002956:	4965      	ldr	r1, [pc, #404]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0b8      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002992:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	494d      	ldr	r1, [pc, #308]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d040      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d115      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e07f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e073      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e06b      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f023 0203 	bic.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4936      	ldr	r1, [pc, #216]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7fe fb92 	bl	8001144 <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a24:	f7fe fb8e 	bl	8001144 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e053      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 020c 	and.w	r2, r3, #12
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d1eb      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d210      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 0207 	bic.w	r2, r3, #7
 8002a62:	4922      	ldr	r1, [pc, #136]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e032      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4916      	ldr	r1, [pc, #88]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	490e      	ldr	r1, [pc, #56]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aba:	f000 f821 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002abe:	4601      	mov	r1, r0
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	5cd3      	ldrb	r3, [r2, r3]
 8002ace:	fa21 f303 	lsr.w	r3, r1, r3
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1d0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe faf0 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08004eac 	.word	0x08004eac
 8002af8:	20000004 	.word	0x20000004
 8002afc:	20000008 	.word	0x20000008

08002b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	b490      	push	{r4, r7}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b08:	1d3c      	adds	r4, r7, #4
 8002b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x40>
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x46>
 8002b3e:	e02d      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b42:	623b      	str	r3, [r7, #32]
      break;
 8002b44:	e02d      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	0c9b      	lsrs	r3, r3, #18
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b52:	4413      	add	r3, r2
 8002b54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c5b      	lsrs	r3, r3, #17
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b72:	4413      	add	r3, r2
 8002b74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b7e:	fb02 f203 	mul.w	r2, r2, r3
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8a:	e004      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b90:	fb02 f303 	mul.w	r3, r2, r3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	623b      	str	r3, [r7, #32]
      break;
 8002b9a:	e002      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b9c:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b9e:	623b      	str	r3, [r7, #32]
      break;
 8002ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3728      	adds	r7, #40	; 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc90      	pop	{r4, r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	08004e84 	.word	0x08004e84
 8002bb4:	08004e94 	.word	0x08004e94
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	007a1200 	.word	0x007a1200
 8002bc0:	003d0900 	.word	0x003d0900

08002bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc8:	4b02      	ldr	r3, [pc, #8]	; (8002bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bdc:	f7ff fff2 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002be0:	4601      	mov	r1, r0
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	4a03      	ldr	r2, [pc, #12]	; (8002bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08004ebc 	.word	0x08004ebc

08002c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c04:	f7ff ffde 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c08:	4601      	mov	r1, r0
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	0adb      	lsrs	r3, r3, #11
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4a03      	ldr	r2, [pc, #12]	; (8002c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	08004ebc 	.word	0x08004ebc

08002c28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <RCC_Delay+0x34>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <RCC_Delay+0x38>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0a5b      	lsrs	r3, r3, #9
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c44:	bf00      	nop
  }
  while (Delay --);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1e5a      	subs	r2, r3, #1
 8002c4a:	60fa      	str	r2, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f9      	bne.n	8002c44 <RCC_Delay+0x1c>
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000004 	.word	0x20000004
 8002c60:	10624dd3 	.word	0x10624dd3

08002c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d07d      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c84:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10d      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c90:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	4a4b      	ldr	r2, [pc, #300]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	61d3      	str	r3, [r2, #28]
 8002c9c:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d118      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb8:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a42      	ldr	r2, [pc, #264]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fa3e 	bl	8001144 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	e008      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ccc:	f7fe fa3a 	bl	8001144 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e06d      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cde:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d02e      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d027      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d08:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d12:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d014      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fa09 	bl	8001144 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fa05 	bl	8001144 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e036      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ee      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d58:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4917      	ldr	r1, [pc, #92]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	490b      	ldr	r1, [pc, #44]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	42420440 	.word	0x42420440

08002dd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b08d      	sub	sp, #52	; 0x34
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002dda:	f107 040c 	add.w	r4, r7, #12
 8002dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002de4:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d07f      	beq.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d002      	beq.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d048      	beq.n	8002e9e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e0c:	e08b      	b.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e14:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d07f      	beq.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	0c9b      	lsrs	r3, r3, #18
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e32:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d018      	beq.n	8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	0c5b      	lsrs	r3, r3, #17
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e5e:	4a37      	ldr	r2, [pc, #220]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6e:	e004      	b.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	4a33      	ldr	r2, [pc, #204]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e86:	d102      	bne.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e8c:	e048      	b.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e9c:	e040      	b.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eae:	d108      	bne.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec0:	e01f      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002eda:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee0:	e00f      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eec:	d11a      	bne.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d014      	beq.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002efa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f00:	e010      	b.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002f02:	e00f      	b.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f04:	f7ff fe7c 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	0b9b      	lsrs	r3, r3, #14
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	3301      	adds	r3, #1
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f1e:	e002      	b.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f20:	bf00      	nop
 8002f22:	e000      	b.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002f24:	bf00      	nop
    }
  }
  return (frequency);
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3734      	adds	r7, #52	; 0x34
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	08004e98 	.word	0x08004e98
 8002f34:	08004ea8 	.word	0x08004ea8
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	007a1200 	.word	0x007a1200
 8002f40:	003d0900 	.word	0x003d0900
 8002f44:	aaaaaaab 	.word	0xaaaaaaab

08002f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e01d      	b.n	8002f96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd feaa 	bl	8000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f000 fc8e 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e01d      	b.n	8002fec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f815 	bl	8002ff4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 fc63 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr
	...

08003008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2201      	movs	r2, #1
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 ffd1 	bl	8003fc2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a10      	ldr	r2, [pc, #64]	; (8003068 <HAL_TIM_PWM_Start+0x60>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d107      	bne.n	800303a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b06      	cmp	r3, #6
 800304a:	d007      	beq.n	800305c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40012c00 	.word	0x40012c00

0800306c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e01d      	b.n	80030ba <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fe3e 	bl	8000d14 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f000 fbfc 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d841      	bhi.n	8003158 <HAL_TIM_IC_Start_IT+0x94>
 80030d4:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <HAL_TIM_IC_Start_IT+0x18>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	08003111 	.word	0x08003111
 80030e0:	08003159 	.word	0x08003159
 80030e4:	08003159 	.word	0x08003159
 80030e8:	08003159 	.word	0x08003159
 80030ec:	08003123 	.word	0x08003123
 80030f0:	08003159 	.word	0x08003159
 80030f4:	08003159 	.word	0x08003159
 80030f8:	08003159 	.word	0x08003159
 80030fc:	08003135 	.word	0x08003135
 8003100:	08003159 	.word	0x08003159
 8003104:	08003159 	.word	0x08003159
 8003108:	08003159 	.word	0x08003159
 800310c:	08003147 	.word	0x08003147
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0202 	orr.w	r2, r2, #2
 800311e:	60da      	str	r2, [r3, #12]
      break;
 8003120:	e01b      	b.n	800315a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0204 	orr.w	r2, r2, #4
 8003130:	60da      	str	r2, [r3, #12]
      break;
 8003132:	e012      	b.n	800315a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0208 	orr.w	r2, r2, #8
 8003142:	60da      	str	r2, [r3, #12]
      break;
 8003144:	e009      	b.n	800315a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0210 	orr.w	r2, r2, #16
 8003154:	60da      	str	r2, [r3, #12]
      break;
 8003156:	e000      	b.n	800315a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003158:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2201      	movs	r2, #1
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 ff2d 	bl	8003fc2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d007      	beq.n	800318a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d122      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d11b      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0202 	mvn.w	r2, #2
 80031c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fc5a 	bl	8000a90 <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fb47 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fb4d 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d122      	bne.n	8003244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b04      	cmp	r3, #4
 800320a:	d11b      	bne.n	8003244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0204 	mvn.w	r2, #4
 8003214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd fc30 	bl	8000a90 <HAL_TIM_IC_CaptureCallback>
 8003230:	e005      	b.n	800323e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fb1d 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fb23 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b08      	cmp	r3, #8
 8003250:	d122      	bne.n	8003298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b08      	cmp	r3, #8
 800325e:	d11b      	bne.n	8003298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0208 	mvn.w	r2, #8
 8003268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2204      	movs	r2, #4
 800326e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fc06 	bl	8000a90 <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 faf3 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 faf9 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0210 	mvn.w	r2, #16
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2208      	movs	r2, #8
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd fbdc 	bl	8000a90 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fac9 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 facf 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0201 	mvn.w	r2, #1
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 faa4 	bl	8003860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d10e      	bne.n	8003344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003330:	2b80      	cmp	r3, #128	; 0x80
 8003332:	d107      	bne.n	8003344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800333c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 ff01 	bl	8004146 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d10e      	bne.n	8003370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d107      	bne.n	8003370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa93 	bl	8003896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b20      	cmp	r3, #32
 800337c:	d10e      	bne.n	800339c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b20      	cmp	r3, #32
 800338a:	d107      	bne.n	800339c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0220 	mvn.w	r2, #32
 8003394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fecc 	bl	8004134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_TIM_IC_ConfigChannel+0x1a>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e08a      	b.n	80034d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f000 fc4a 	bl	8003c7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 020c 	bic.w	r2, r2, #12
 80033f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6999      	ldr	r1, [r3, #24]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	619a      	str	r2, [r3, #24]
 800340a:	e05a      	b.n	80034c2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d11c      	bne.n	800344c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f000 fcb3 	bl	8003d8c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699a      	ldr	r2, [r3, #24]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003434:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6999      	ldr	r1, [r3, #24]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	021a      	lsls	r2, r3, #8
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	619a      	str	r2, [r3, #24]
 800344a:	e03a      	b.n	80034c2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b08      	cmp	r3, #8
 8003450:	d11b      	bne.n	800348a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f000 fcfe 	bl	8003e62 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 020c 	bic.w	r2, r2, #12
 8003474:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69d9      	ldr	r1, [r3, #28]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	61da      	str	r2, [r3, #28]
 8003488:	e01b      	b.n	80034c2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f000 fd1d 	bl	8003ed8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69da      	ldr	r2, [r3, #28]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69d9      	ldr	r1, [r3, #28]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	021a      	lsls	r2, r3, #8
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e0b4      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x184>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	f200 809f 	bhi.w	800364c <HAL_TIM_PWM_ConfigChannel+0x170>
 800350e:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003549 	.word	0x08003549
 8003518:	0800364d 	.word	0x0800364d
 800351c:	0800364d 	.word	0x0800364d
 8003520:	0800364d 	.word	0x0800364d
 8003524:	08003589 	.word	0x08003589
 8003528:	0800364d 	.word	0x0800364d
 800352c:	0800364d 	.word	0x0800364d
 8003530:	0800364d 	.word	0x0800364d
 8003534:	080035cb 	.word	0x080035cb
 8003538:	0800364d 	.word	0x0800364d
 800353c:	0800364d 	.word	0x0800364d
 8003540:	0800364d 	.word	0x0800364d
 8003544:	0800360b 	.word	0x0800360b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fa0c 	bl	800396c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0208 	orr.w	r2, r2, #8
 8003562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0204 	bic.w	r2, r2, #4
 8003572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6999      	ldr	r1, [r3, #24]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	619a      	str	r2, [r3, #24]
      break;
 8003586:	e062      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fa52 	bl	8003a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6999      	ldr	r1, [r3, #24]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	021a      	lsls	r2, r3, #8
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	619a      	str	r2, [r3, #24]
      break;
 80035c8:	e041      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fa9b 	bl	8003b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0208 	orr.w	r2, r2, #8
 80035e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0204 	bic.w	r2, r2, #4
 80035f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69d9      	ldr	r1, [r3, #28]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	61da      	str	r2, [r3, #28]
      break;
 8003608:	e021      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fae5 	bl	8003be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69d9      	ldr	r1, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	021a      	lsls	r2, r3, #8
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	61da      	str	r2, [r3, #28]
      break;
 800364a:	e000      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800364c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_TIM_ConfigClockSource+0x18>
 800367c:	2302      	movs	r3, #2
 800367e:	e0a6      	b.n	80037ce <HAL_TIM_ConfigClockSource+0x166>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800369e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d067      	beq.n	8003788 <HAL_TIM_ConfigClockSource+0x120>
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d80b      	bhi.n	80036d4 <HAL_TIM_ConfigClockSource+0x6c>
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d073      	beq.n	80037a8 <HAL_TIM_ConfigClockSource+0x140>
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d802      	bhi.n	80036ca <HAL_TIM_ConfigClockSource+0x62>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d06f      	beq.n	80037a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80036c8:	e078      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d06c      	beq.n	80037a8 <HAL_TIM_ConfigClockSource+0x140>
 80036ce:	2b30      	cmp	r3, #48	; 0x30
 80036d0:	d06a      	beq.n	80037a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80036d2:	e073      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036d4:	2b70      	cmp	r3, #112	; 0x70
 80036d6:	d00d      	beq.n	80036f4 <HAL_TIM_ConfigClockSource+0x8c>
 80036d8:	2b70      	cmp	r3, #112	; 0x70
 80036da:	d804      	bhi.n	80036e6 <HAL_TIM_ConfigClockSource+0x7e>
 80036dc:	2b50      	cmp	r3, #80	; 0x50
 80036de:	d033      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0xe0>
 80036e0:	2b60      	cmp	r3, #96	; 0x60
 80036e2:	d041      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80036e4:	e06a      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ea:	d066      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x152>
 80036ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f0:	d017      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80036f2:	e063      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f000 fc3e 	bl	8003f84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003716:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	609a      	str	r2, [r3, #8]
      break;
 8003720:	e04c      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6899      	ldr	r1, [r3, #8]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f000 fc27 	bl	8003f84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003744:	609a      	str	r2, [r3, #8]
      break;
 8003746:	e039      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	461a      	mov	r2, r3
 8003756:	f000 faeb 	bl	8003d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2150      	movs	r1, #80	; 0x50
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fbf5 	bl	8003f50 <TIM_ITRx_SetConfig>
      break;
 8003766:	e029      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	461a      	mov	r2, r3
 8003776:	f000 fb45 	bl	8003e04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2160      	movs	r1, #96	; 0x60
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fbe5 	bl	8003f50 <TIM_ITRx_SetConfig>
      break;
 8003786:	e019      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	461a      	mov	r2, r3
 8003796:	f000 facb 	bl	8003d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2140      	movs	r1, #64	; 0x40
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fbd5 	bl	8003f50 <TIM_ITRx_SetConfig>
      break;
 80037a6:	e009      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 fbcc 	bl	8003f50 <TIM_ITRx_SetConfig>
      break;
 80037b8:	e000      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80037ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b0c      	cmp	r3, #12
 80037ea:	d831      	bhi.n	8003850 <HAL_TIM_ReadCapturedValue+0x78>
 80037ec:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	08003829 	.word	0x08003829
 80037f8:	08003851 	.word	0x08003851
 80037fc:	08003851 	.word	0x08003851
 8003800:	08003851 	.word	0x08003851
 8003804:	08003833 	.word	0x08003833
 8003808:	08003851 	.word	0x08003851
 800380c:	08003851 	.word	0x08003851
 8003810:	08003851 	.word	0x08003851
 8003814:	0800383d 	.word	0x0800383d
 8003818:	08003851 	.word	0x08003851
 800381c:	08003851 	.word	0x08003851
 8003820:	08003851 	.word	0x08003851
 8003824:	08003847 	.word	0x08003847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	60fb      	str	r3, [r7, #12]

      break;
 8003830:	e00f      	b.n	8003852 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	60fb      	str	r3, [r7, #12]

      break;
 800383a:	e00a      	b.n	8003852 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	60fb      	str	r3, [r7, #12]

      break;
 8003844:	e005      	b.n	8003852 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	60fb      	str	r3, [r7, #12]

      break;
 800384e:	e000      	b.n	8003852 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003850:	bf00      	nop
  }

  return tmpreg;
 8003852:	68fb      	ldr	r3, [r7, #12]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop

08003860 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a29      	ldr	r2, [pc, #164]	; (8003960 <TIM_Base_SetConfig+0xb8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00b      	beq.n	80038d8 <TIM_Base_SetConfig+0x30>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c6:	d007      	beq.n	80038d8 <TIM_Base_SetConfig+0x30>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a26      	ldr	r2, [pc, #152]	; (8003964 <TIM_Base_SetConfig+0xbc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0x30>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a25      	ldr	r2, [pc, #148]	; (8003968 <TIM_Base_SetConfig+0xc0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d108      	bne.n	80038ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <TIM_Base_SetConfig+0xb8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_Base_SetConfig+0x62>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f8:	d007      	beq.n	800390a <TIM_Base_SetConfig+0x62>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a19      	ldr	r2, [pc, #100]	; (8003964 <TIM_Base_SetConfig+0xbc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_Base_SetConfig+0x62>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <TIM_Base_SetConfig+0xc0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d108      	bne.n	800391c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a07      	ldr	r2, [pc, #28]	; (8003960 <TIM_Base_SetConfig+0xb8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d103      	bne.n	8003950 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	615a      	str	r2, [r3, #20]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800

0800396c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0201 	bic.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f023 0302 	bic.w	r3, r3, #2
 80039b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a1c      	ldr	r2, [pc, #112]	; (8003a34 <TIM_OC1_SetConfig+0xc8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d10c      	bne.n	80039e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0308 	bic.w	r3, r3, #8
 80039ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <TIM_OC1_SetConfig+0xc8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d111      	bne.n	8003a0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	621a      	str	r2, [r3, #32]
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40012c00 	.word	0x40012c00

08003a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0210 	bic.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0320 	bic.w	r3, r3, #32
 8003a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <TIM_OC2_SetConfig+0xd0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10d      	bne.n	8003ab4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <TIM_OC2_SetConfig+0xd0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d113      	bne.n	8003ae4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	40012c00 	.word	0x40012c00

08003b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <TIM_OC3_SetConfig+0xd0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10d      	bne.n	8003b86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <TIM_OC3_SetConfig+0xd0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d113      	bne.n	8003bb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	621a      	str	r2, [r3, #32]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40012c00 	.word	0x40012c00

08003be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	031b      	lsls	r3, r3, #12
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <TIM_OC4_SetConfig+0x98>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d109      	bne.n	8003c54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	40012c00 	.word	0x40012c00

08003c7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0201 	bic.w	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <TIM_TI1_SetConfig+0xa8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x46>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb0:	d007      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x46>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <TIM_TI1_SetConfig+0xac>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x46>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <TIM_TI1_SetConfig+0xb0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <TIM_TI1_SetConfig+0x4a>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <TIM_TI1_SetConfig+0x4c>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e003      	b.n	8003ce6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f023 030a 	bic.w	r3, r3, #10
 8003d00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 030a 	and.w	r3, r3, #10
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800

08003d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0201 	bic.w	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 030a 	bic.w	r3, r3, #10
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f023 0210 	bic.w	r2, r3, #16
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	031b      	lsls	r3, r3, #12
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f023 0210 	bic.w	r2, r3, #16
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	031b      	lsls	r3, r3, #12
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b087      	sub	sp, #28
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	031b      	lsls	r3, r3, #12
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	031b      	lsls	r3, r3, #12
 8003f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f043 0307 	orr.w	r3, r3, #7
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	609a      	str	r2, [r3, #8]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	021a      	lsls	r2, r3, #8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	609a      	str	r2, [r3, #8]
}
 8003fb8:	bf00      	nop
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b087      	sub	sp, #28
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	401a      	ands	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800401e:	2302      	movs	r3, #2
 8004020:	e032      	b.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004048:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800405a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	4313      	orrs	r3, r2
 8004064:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e03d      	b.n	800412a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e03f      	b.n	80041ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fc fe56 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	; 0x24
 8004188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f90b 	bl	80043b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b088      	sub	sp, #32
 80041f6:	af02      	add	r7, sp, #8
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b20      	cmp	r3, #32
 8004210:	f040 8083 	bne.w	800431a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_UART_Transmit+0x2e>
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e07b      	b.n	800431c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_UART_Transmit+0x40>
 800422e:	2302      	movs	r3, #2
 8004230:	e074      	b.n	800431c <HAL_UART_Transmit+0x12a>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2221      	movs	r2, #33	; 0x21
 8004244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004248:	f7fc ff7c 	bl	8001144 <HAL_GetTick>
 800424c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	88fa      	ldrh	r2, [r7, #6]
 8004258:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800425a:	e042      	b.n	80042e2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004272:	d122      	bne.n	80042ba <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2200      	movs	r2, #0
 800427c:	2180      	movs	r1, #128	; 0x80
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f850 	bl	8004324 <UART_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e046      	b.n	800431c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3302      	adds	r3, #2
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	e017      	b.n	80042e2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	e013      	b.n	80042e2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2200      	movs	r2, #0
 80042c2:	2180      	movs	r1, #128	; 0x80
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f82d 	bl	8004324 <UART_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e023      	b.n	800431c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	60ba      	str	r2, [r7, #8]
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1b7      	bne.n	800425c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2200      	movs	r2, #0
 80042f4:	2140      	movs	r1, #64	; 0x40
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f814 	bl	8004324 <UART_WaitOnFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e00a      	b.n	800431c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800431a:	2302      	movs	r3, #2
  }
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004334:	e02c      	b.n	8004390 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d028      	beq.n	8004390 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <UART_WaitOnFlagUntilTimeout+0x30>
 8004344:	f7fc fefe 	bl	8001144 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	429a      	cmp	r2, r3
 8004352:	d21d      	bcs.n	8004390 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004362:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e00f      	b.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4013      	ands	r3, r2
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	429a      	cmp	r2, r3
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d0c3      	beq.n	8004336 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043f2:	f023 030c 	bic.w	r3, r3, #12
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a52      	ldr	r2, [pc, #328]	; (8004564 <UART_SetConfig+0x1ac>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d14e      	bne.n	80044be <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004420:	f7fe fbee 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 8004424:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009a      	lsls	r2, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	4a4a      	ldr	r2, [pc, #296]	; (8004568 <UART_SetConfig+0x1b0>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	0119      	lsls	r1, r3, #4
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009a      	lsls	r2, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	fbb2 f2f3 	udiv	r2, r2, r3
 800445c:	4b42      	ldr	r3, [pc, #264]	; (8004568 <UART_SetConfig+0x1b0>)
 800445e:	fba3 0302 	umull	r0, r3, r3, r2
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	2064      	movs	r0, #100	; 0x64
 8004466:	fb00 f303 	mul.w	r3, r0, r3
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	3332      	adds	r3, #50	; 0x32
 8004470:	4a3d      	ldr	r2, [pc, #244]	; (8004568 <UART_SetConfig+0x1b0>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447c:	4419      	add	r1, r3
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	fbb2 f2f3 	udiv	r2, r2, r3
 8004494:	4b34      	ldr	r3, [pc, #208]	; (8004568 <UART_SetConfig+0x1b0>)
 8004496:	fba3 0302 	umull	r0, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2064      	movs	r0, #100	; 0x64
 800449e:	fb00 f303 	mul.w	r3, r0, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	3332      	adds	r3, #50	; 0x32
 80044a8:	4a2f      	ldr	r2, [pc, #188]	; (8004568 <UART_SetConfig+0x1b0>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	440a      	add	r2, r1
 80044ba:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80044bc:	e04d      	b.n	800455a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80044be:	f7fe fb8b 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 80044c2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009a      	lsls	r2, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	4a23      	ldr	r2, [pc, #140]	; (8004568 <UART_SetConfig+0x1b0>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	0119      	lsls	r1, r3, #4
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009a      	lsls	r2, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80044fa:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <UART_SetConfig+0x1b0>)
 80044fc:	fba3 0302 	umull	r0, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	2064      	movs	r0, #100	; 0x64
 8004504:	fb00 f303 	mul.w	r3, r0, r3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	3332      	adds	r3, #50	; 0x32
 800450e:	4a16      	ldr	r2, [pc, #88]	; (8004568 <UART_SetConfig+0x1b0>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451a:	4419      	add	r1, r3
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009a      	lsls	r2, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <UART_SetConfig+0x1b0>)
 8004534:	fba3 0302 	umull	r0, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2064      	movs	r0, #100	; 0x64
 800453c:	fb00 f303 	mul.w	r3, r0, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	3332      	adds	r3, #50	; 0x32
 8004546:	4a08      	ldr	r2, [pc, #32]	; (8004568 <UART_SetConfig+0x1b0>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	440a      	add	r2, r1
 8004558:	609a      	str	r2, [r3, #8]
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40013800 	.word	0x40013800
 8004568:	51eb851f 	.word	0x51eb851f

0800456c <__errno>:
 800456c:	4b01      	ldr	r3, [pc, #4]	; (8004574 <__errno+0x8>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000010 	.word	0x20000010

08004578 <__libc_init_array>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	2500      	movs	r5, #0
 800457c:	4e0c      	ldr	r6, [pc, #48]	; (80045b0 <__libc_init_array+0x38>)
 800457e:	4c0d      	ldr	r4, [pc, #52]	; (80045b4 <__libc_init_array+0x3c>)
 8004580:	1ba4      	subs	r4, r4, r6
 8004582:	10a4      	asrs	r4, r4, #2
 8004584:	42a5      	cmp	r5, r4
 8004586:	d109      	bne.n	800459c <__libc_init_array+0x24>
 8004588:	f000 fc34 	bl	8004df4 <_init>
 800458c:	2500      	movs	r5, #0
 800458e:	4e0a      	ldr	r6, [pc, #40]	; (80045b8 <__libc_init_array+0x40>)
 8004590:	4c0a      	ldr	r4, [pc, #40]	; (80045bc <__libc_init_array+0x44>)
 8004592:	1ba4      	subs	r4, r4, r6
 8004594:	10a4      	asrs	r4, r4, #2
 8004596:	42a5      	cmp	r5, r4
 8004598:	d105      	bne.n	80045a6 <__libc_init_array+0x2e>
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045a0:	4798      	blx	r3
 80045a2:	3501      	adds	r5, #1
 80045a4:	e7ee      	b.n	8004584 <__libc_init_array+0xc>
 80045a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045aa:	4798      	blx	r3
 80045ac:	3501      	adds	r5, #1
 80045ae:	e7f2      	b.n	8004596 <__libc_init_array+0x1e>
 80045b0:	08004ef8 	.word	0x08004ef8
 80045b4:	08004ef8 	.word	0x08004ef8
 80045b8:	08004ef8 	.word	0x08004ef8
 80045bc:	08004efc 	.word	0x08004efc

080045c0 <memset>:
 80045c0:	4603      	mov	r3, r0
 80045c2:	4402      	add	r2, r0
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d100      	bne.n	80045ca <memset+0xa>
 80045c8:	4770      	bx	lr
 80045ca:	f803 1b01 	strb.w	r1, [r3], #1
 80045ce:	e7f9      	b.n	80045c4 <memset+0x4>

080045d0 <siprintf>:
 80045d0:	b40e      	push	{r1, r2, r3}
 80045d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045d6:	b500      	push	{lr}
 80045d8:	b09c      	sub	sp, #112	; 0x70
 80045da:	ab1d      	add	r3, sp, #116	; 0x74
 80045dc:	9002      	str	r0, [sp, #8]
 80045de:	9006      	str	r0, [sp, #24]
 80045e0:	9107      	str	r1, [sp, #28]
 80045e2:	9104      	str	r1, [sp, #16]
 80045e4:	4808      	ldr	r0, [pc, #32]	; (8004608 <siprintf+0x38>)
 80045e6:	4909      	ldr	r1, [pc, #36]	; (800460c <siprintf+0x3c>)
 80045e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ec:	9105      	str	r1, [sp, #20]
 80045ee:	6800      	ldr	r0, [r0, #0]
 80045f0:	a902      	add	r1, sp, #8
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	f000 f866 	bl	80046c4 <_svfiprintf_r>
 80045f8:	2200      	movs	r2, #0
 80045fa:	9b02      	ldr	r3, [sp, #8]
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	b01c      	add	sp, #112	; 0x70
 8004600:	f85d eb04 	ldr.w	lr, [sp], #4
 8004604:	b003      	add	sp, #12
 8004606:	4770      	bx	lr
 8004608:	20000010 	.word	0x20000010
 800460c:	ffff0208 	.word	0xffff0208

08004610 <__ssputs_r>:
 8004610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	688e      	ldr	r6, [r1, #8]
 8004616:	4682      	mov	sl, r0
 8004618:	429e      	cmp	r6, r3
 800461a:	460c      	mov	r4, r1
 800461c:	4690      	mov	r8, r2
 800461e:	4699      	mov	r9, r3
 8004620:	d837      	bhi.n	8004692 <__ssputs_r+0x82>
 8004622:	898a      	ldrh	r2, [r1, #12]
 8004624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004628:	d031      	beq.n	800468e <__ssputs_r+0x7e>
 800462a:	2302      	movs	r3, #2
 800462c:	6825      	ldr	r5, [r4, #0]
 800462e:	6909      	ldr	r1, [r1, #16]
 8004630:	1a6f      	subs	r7, r5, r1
 8004632:	6965      	ldr	r5, [r4, #20]
 8004634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004638:	fb95 f5f3 	sdiv	r5, r5, r3
 800463c:	f109 0301 	add.w	r3, r9, #1
 8004640:	443b      	add	r3, r7
 8004642:	429d      	cmp	r5, r3
 8004644:	bf38      	it	cc
 8004646:	461d      	movcc	r5, r3
 8004648:	0553      	lsls	r3, r2, #21
 800464a:	d530      	bpl.n	80046ae <__ssputs_r+0x9e>
 800464c:	4629      	mov	r1, r5
 800464e:	f000 fb37 	bl	8004cc0 <_malloc_r>
 8004652:	4606      	mov	r6, r0
 8004654:	b950      	cbnz	r0, 800466c <__ssputs_r+0x5c>
 8004656:	230c      	movs	r3, #12
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	f8ca 3000 	str.w	r3, [sl]
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004666:	81a3      	strh	r3, [r4, #12]
 8004668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466c:	463a      	mov	r2, r7
 800466e:	6921      	ldr	r1, [r4, #16]
 8004670:	f000 fab6 	bl	8004be0 <memcpy>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800467a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467e:	81a3      	strh	r3, [r4, #12]
 8004680:	6126      	str	r6, [r4, #16]
 8004682:	443e      	add	r6, r7
 8004684:	6026      	str	r6, [r4, #0]
 8004686:	464e      	mov	r6, r9
 8004688:	6165      	str	r5, [r4, #20]
 800468a:	1bed      	subs	r5, r5, r7
 800468c:	60a5      	str	r5, [r4, #8]
 800468e:	454e      	cmp	r6, r9
 8004690:	d900      	bls.n	8004694 <__ssputs_r+0x84>
 8004692:	464e      	mov	r6, r9
 8004694:	4632      	mov	r2, r6
 8004696:	4641      	mov	r1, r8
 8004698:	6820      	ldr	r0, [r4, #0]
 800469a:	f000 faac 	bl	8004bf6 <memmove>
 800469e:	68a3      	ldr	r3, [r4, #8]
 80046a0:	2000      	movs	r0, #0
 80046a2:	1b9b      	subs	r3, r3, r6
 80046a4:	60a3      	str	r3, [r4, #8]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	441e      	add	r6, r3
 80046aa:	6026      	str	r6, [r4, #0]
 80046ac:	e7dc      	b.n	8004668 <__ssputs_r+0x58>
 80046ae:	462a      	mov	r2, r5
 80046b0:	f000 fb60 	bl	8004d74 <_realloc_r>
 80046b4:	4606      	mov	r6, r0
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d1e2      	bne.n	8004680 <__ssputs_r+0x70>
 80046ba:	6921      	ldr	r1, [r4, #16]
 80046bc:	4650      	mov	r0, sl
 80046be:	f000 fab3 	bl	8004c28 <_free_r>
 80046c2:	e7c8      	b.n	8004656 <__ssputs_r+0x46>

080046c4 <_svfiprintf_r>:
 80046c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c8:	461d      	mov	r5, r3
 80046ca:	898b      	ldrh	r3, [r1, #12]
 80046cc:	b09d      	sub	sp, #116	; 0x74
 80046ce:	061f      	lsls	r7, r3, #24
 80046d0:	4680      	mov	r8, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	4616      	mov	r6, r2
 80046d6:	d50f      	bpl.n	80046f8 <_svfiprintf_r+0x34>
 80046d8:	690b      	ldr	r3, [r1, #16]
 80046da:	b96b      	cbnz	r3, 80046f8 <_svfiprintf_r+0x34>
 80046dc:	2140      	movs	r1, #64	; 0x40
 80046de:	f000 faef 	bl	8004cc0 <_malloc_r>
 80046e2:	6020      	str	r0, [r4, #0]
 80046e4:	6120      	str	r0, [r4, #16]
 80046e6:	b928      	cbnz	r0, 80046f4 <_svfiprintf_r+0x30>
 80046e8:	230c      	movs	r3, #12
 80046ea:	f8c8 3000 	str.w	r3, [r8]
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	e0c8      	b.n	8004886 <_svfiprintf_r+0x1c2>
 80046f4:	2340      	movs	r3, #64	; 0x40
 80046f6:	6163      	str	r3, [r4, #20]
 80046f8:	2300      	movs	r3, #0
 80046fa:	9309      	str	r3, [sp, #36]	; 0x24
 80046fc:	2320      	movs	r3, #32
 80046fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004702:	2330      	movs	r3, #48	; 0x30
 8004704:	f04f 0b01 	mov.w	fp, #1
 8004708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800470c:	9503      	str	r5, [sp, #12]
 800470e:	4637      	mov	r7, r6
 8004710:	463d      	mov	r5, r7
 8004712:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004716:	b10b      	cbz	r3, 800471c <_svfiprintf_r+0x58>
 8004718:	2b25      	cmp	r3, #37	; 0x25
 800471a:	d13e      	bne.n	800479a <_svfiprintf_r+0xd6>
 800471c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004720:	d00b      	beq.n	800473a <_svfiprintf_r+0x76>
 8004722:	4653      	mov	r3, sl
 8004724:	4632      	mov	r2, r6
 8004726:	4621      	mov	r1, r4
 8004728:	4640      	mov	r0, r8
 800472a:	f7ff ff71 	bl	8004610 <__ssputs_r>
 800472e:	3001      	adds	r0, #1
 8004730:	f000 80a4 	beq.w	800487c <_svfiprintf_r+0x1b8>
 8004734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004736:	4453      	add	r3, sl
 8004738:	9309      	str	r3, [sp, #36]	; 0x24
 800473a:	783b      	ldrb	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 809d 	beq.w	800487c <_svfiprintf_r+0x1b8>
 8004742:	2300      	movs	r3, #0
 8004744:	f04f 32ff 	mov.w	r2, #4294967295
 8004748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	9307      	str	r3, [sp, #28]
 8004750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004754:	931a      	str	r3, [sp, #104]	; 0x68
 8004756:	462f      	mov	r7, r5
 8004758:	2205      	movs	r2, #5
 800475a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800475e:	4850      	ldr	r0, [pc, #320]	; (80048a0 <_svfiprintf_r+0x1dc>)
 8004760:	f000 fa30 	bl	8004bc4 <memchr>
 8004764:	9b04      	ldr	r3, [sp, #16]
 8004766:	b9d0      	cbnz	r0, 800479e <_svfiprintf_r+0xda>
 8004768:	06d9      	lsls	r1, r3, #27
 800476a:	bf44      	itt	mi
 800476c:	2220      	movmi	r2, #32
 800476e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004772:	071a      	lsls	r2, r3, #28
 8004774:	bf44      	itt	mi
 8004776:	222b      	movmi	r2, #43	; 0x2b
 8004778:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800477c:	782a      	ldrb	r2, [r5, #0]
 800477e:	2a2a      	cmp	r2, #42	; 0x2a
 8004780:	d015      	beq.n	80047ae <_svfiprintf_r+0xea>
 8004782:	462f      	mov	r7, r5
 8004784:	2000      	movs	r0, #0
 8004786:	250a      	movs	r5, #10
 8004788:	9a07      	ldr	r2, [sp, #28]
 800478a:	4639      	mov	r1, r7
 800478c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004790:	3b30      	subs	r3, #48	; 0x30
 8004792:	2b09      	cmp	r3, #9
 8004794:	d94d      	bls.n	8004832 <_svfiprintf_r+0x16e>
 8004796:	b1b8      	cbz	r0, 80047c8 <_svfiprintf_r+0x104>
 8004798:	e00f      	b.n	80047ba <_svfiprintf_r+0xf6>
 800479a:	462f      	mov	r7, r5
 800479c:	e7b8      	b.n	8004710 <_svfiprintf_r+0x4c>
 800479e:	4a40      	ldr	r2, [pc, #256]	; (80048a0 <_svfiprintf_r+0x1dc>)
 80047a0:	463d      	mov	r5, r7
 80047a2:	1a80      	subs	r0, r0, r2
 80047a4:	fa0b f000 	lsl.w	r0, fp, r0
 80047a8:	4318      	orrs	r0, r3
 80047aa:	9004      	str	r0, [sp, #16]
 80047ac:	e7d3      	b.n	8004756 <_svfiprintf_r+0x92>
 80047ae:	9a03      	ldr	r2, [sp, #12]
 80047b0:	1d11      	adds	r1, r2, #4
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	9103      	str	r1, [sp, #12]
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	db01      	blt.n	80047be <_svfiprintf_r+0xfa>
 80047ba:	9207      	str	r2, [sp, #28]
 80047bc:	e004      	b.n	80047c8 <_svfiprintf_r+0x104>
 80047be:	4252      	negs	r2, r2
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	9207      	str	r2, [sp, #28]
 80047c6:	9304      	str	r3, [sp, #16]
 80047c8:	783b      	ldrb	r3, [r7, #0]
 80047ca:	2b2e      	cmp	r3, #46	; 0x2e
 80047cc:	d10c      	bne.n	80047e8 <_svfiprintf_r+0x124>
 80047ce:	787b      	ldrb	r3, [r7, #1]
 80047d0:	2b2a      	cmp	r3, #42	; 0x2a
 80047d2:	d133      	bne.n	800483c <_svfiprintf_r+0x178>
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	3702      	adds	r7, #2
 80047d8:	1d1a      	adds	r2, r3, #4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	9203      	str	r2, [sp, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bfb8      	it	lt
 80047e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80047e6:	9305      	str	r3, [sp, #20]
 80047e8:	4d2e      	ldr	r5, [pc, #184]	; (80048a4 <_svfiprintf_r+0x1e0>)
 80047ea:	2203      	movs	r2, #3
 80047ec:	7839      	ldrb	r1, [r7, #0]
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 f9e8 	bl	8004bc4 <memchr>
 80047f4:	b138      	cbz	r0, 8004806 <_svfiprintf_r+0x142>
 80047f6:	2340      	movs	r3, #64	; 0x40
 80047f8:	1b40      	subs	r0, r0, r5
 80047fa:	fa03 f000 	lsl.w	r0, r3, r0
 80047fe:	9b04      	ldr	r3, [sp, #16]
 8004800:	3701      	adds	r7, #1
 8004802:	4303      	orrs	r3, r0
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	7839      	ldrb	r1, [r7, #0]
 8004808:	2206      	movs	r2, #6
 800480a:	4827      	ldr	r0, [pc, #156]	; (80048a8 <_svfiprintf_r+0x1e4>)
 800480c:	1c7e      	adds	r6, r7, #1
 800480e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004812:	f000 f9d7 	bl	8004bc4 <memchr>
 8004816:	2800      	cmp	r0, #0
 8004818:	d038      	beq.n	800488c <_svfiprintf_r+0x1c8>
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <_svfiprintf_r+0x1e8>)
 800481c:	bb13      	cbnz	r3, 8004864 <_svfiprintf_r+0x1a0>
 800481e:	9b03      	ldr	r3, [sp, #12]
 8004820:	3307      	adds	r3, #7
 8004822:	f023 0307 	bic.w	r3, r3, #7
 8004826:	3308      	adds	r3, #8
 8004828:	9303      	str	r3, [sp, #12]
 800482a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482c:	444b      	add	r3, r9
 800482e:	9309      	str	r3, [sp, #36]	; 0x24
 8004830:	e76d      	b.n	800470e <_svfiprintf_r+0x4a>
 8004832:	fb05 3202 	mla	r2, r5, r2, r3
 8004836:	2001      	movs	r0, #1
 8004838:	460f      	mov	r7, r1
 800483a:	e7a6      	b.n	800478a <_svfiprintf_r+0xc6>
 800483c:	2300      	movs	r3, #0
 800483e:	250a      	movs	r5, #10
 8004840:	4619      	mov	r1, r3
 8004842:	3701      	adds	r7, #1
 8004844:	9305      	str	r3, [sp, #20]
 8004846:	4638      	mov	r0, r7
 8004848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800484c:	3a30      	subs	r2, #48	; 0x30
 800484e:	2a09      	cmp	r2, #9
 8004850:	d903      	bls.n	800485a <_svfiprintf_r+0x196>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0c8      	beq.n	80047e8 <_svfiprintf_r+0x124>
 8004856:	9105      	str	r1, [sp, #20]
 8004858:	e7c6      	b.n	80047e8 <_svfiprintf_r+0x124>
 800485a:	fb05 2101 	mla	r1, r5, r1, r2
 800485e:	2301      	movs	r3, #1
 8004860:	4607      	mov	r7, r0
 8004862:	e7f0      	b.n	8004846 <_svfiprintf_r+0x182>
 8004864:	ab03      	add	r3, sp, #12
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	4622      	mov	r2, r4
 800486a:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <_svfiprintf_r+0x1ec>)
 800486c:	a904      	add	r1, sp, #16
 800486e:	4640      	mov	r0, r8
 8004870:	f3af 8000 	nop.w
 8004874:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004878:	4681      	mov	r9, r0
 800487a:	d1d6      	bne.n	800482a <_svfiprintf_r+0x166>
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	065b      	lsls	r3, r3, #25
 8004880:	f53f af35 	bmi.w	80046ee <_svfiprintf_r+0x2a>
 8004884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004886:	b01d      	add	sp, #116	; 0x74
 8004888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488c:	ab03      	add	r3, sp, #12
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4622      	mov	r2, r4
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <_svfiprintf_r+0x1ec>)
 8004894:	a904      	add	r1, sp, #16
 8004896:	4640      	mov	r0, r8
 8004898:	f000 f882 	bl	80049a0 <_printf_i>
 800489c:	e7ea      	b.n	8004874 <_svfiprintf_r+0x1b0>
 800489e:	bf00      	nop
 80048a0:	08004ec4 	.word	0x08004ec4
 80048a4:	08004eca 	.word	0x08004eca
 80048a8:	08004ece 	.word	0x08004ece
 80048ac:	00000000 	.word	0x00000000
 80048b0:	08004611 	.word	0x08004611

080048b4 <_printf_common>:
 80048b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	4691      	mov	r9, r2
 80048ba:	461f      	mov	r7, r3
 80048bc:	688a      	ldr	r2, [r1, #8]
 80048be:	690b      	ldr	r3, [r1, #16]
 80048c0:	4606      	mov	r6, r0
 80048c2:	4293      	cmp	r3, r2
 80048c4:	bfb8      	it	lt
 80048c6:	4613      	movlt	r3, r2
 80048c8:	f8c9 3000 	str.w	r3, [r9]
 80048cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048d0:	460c      	mov	r4, r1
 80048d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d6:	b112      	cbz	r2, 80048de <_printf_common+0x2a>
 80048d8:	3301      	adds	r3, #1
 80048da:	f8c9 3000 	str.w	r3, [r9]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	0699      	lsls	r1, r3, #26
 80048e2:	bf42      	ittt	mi
 80048e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048e8:	3302      	addmi	r3, #2
 80048ea:	f8c9 3000 	strmi.w	r3, [r9]
 80048ee:	6825      	ldr	r5, [r4, #0]
 80048f0:	f015 0506 	ands.w	r5, r5, #6
 80048f4:	d107      	bne.n	8004906 <_printf_common+0x52>
 80048f6:	f104 0a19 	add.w	sl, r4, #25
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	42ab      	cmp	r3, r5
 8004904:	dc29      	bgt.n	800495a <_printf_common+0xa6>
 8004906:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	3300      	adds	r3, #0
 800490e:	bf18      	it	ne
 8004910:	2301      	movne	r3, #1
 8004912:	0692      	lsls	r2, r2, #26
 8004914:	d42e      	bmi.n	8004974 <_printf_common+0xc0>
 8004916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800491a:	4639      	mov	r1, r7
 800491c:	4630      	mov	r0, r6
 800491e:	47c0      	blx	r8
 8004920:	3001      	adds	r0, #1
 8004922:	d021      	beq.n	8004968 <_printf_common+0xb4>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	68e5      	ldr	r5, [r4, #12]
 8004928:	f003 0306 	and.w	r3, r3, #6
 800492c:	2b04      	cmp	r3, #4
 800492e:	bf18      	it	ne
 8004930:	2500      	movne	r5, #0
 8004932:	f8d9 2000 	ldr.w	r2, [r9]
 8004936:	f04f 0900 	mov.w	r9, #0
 800493a:	bf08      	it	eq
 800493c:	1aad      	subeq	r5, r5, r2
 800493e:	68a3      	ldr	r3, [r4, #8]
 8004940:	6922      	ldr	r2, [r4, #16]
 8004942:	bf08      	it	eq
 8004944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004948:	4293      	cmp	r3, r2
 800494a:	bfc4      	itt	gt
 800494c:	1a9b      	subgt	r3, r3, r2
 800494e:	18ed      	addgt	r5, r5, r3
 8004950:	341a      	adds	r4, #26
 8004952:	454d      	cmp	r5, r9
 8004954:	d11a      	bne.n	800498c <_printf_common+0xd8>
 8004956:	2000      	movs	r0, #0
 8004958:	e008      	b.n	800496c <_printf_common+0xb8>
 800495a:	2301      	movs	r3, #1
 800495c:	4652      	mov	r2, sl
 800495e:	4639      	mov	r1, r7
 8004960:	4630      	mov	r0, r6
 8004962:	47c0      	blx	r8
 8004964:	3001      	adds	r0, #1
 8004966:	d103      	bne.n	8004970 <_printf_common+0xbc>
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004970:	3501      	adds	r5, #1
 8004972:	e7c2      	b.n	80048fa <_printf_common+0x46>
 8004974:	2030      	movs	r0, #48	; 0x30
 8004976:	18e1      	adds	r1, r4, r3
 8004978:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004982:	4422      	add	r2, r4
 8004984:	3302      	adds	r3, #2
 8004986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800498a:	e7c4      	b.n	8004916 <_printf_common+0x62>
 800498c:	2301      	movs	r3, #1
 800498e:	4622      	mov	r2, r4
 8004990:	4639      	mov	r1, r7
 8004992:	4630      	mov	r0, r6
 8004994:	47c0      	blx	r8
 8004996:	3001      	adds	r0, #1
 8004998:	d0e6      	beq.n	8004968 <_printf_common+0xb4>
 800499a:	f109 0901 	add.w	r9, r9, #1
 800499e:	e7d8      	b.n	8004952 <_printf_common+0x9e>

080049a0 <_printf_i>:
 80049a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80049a8:	460c      	mov	r4, r1
 80049aa:	7e09      	ldrb	r1, [r1, #24]
 80049ac:	b085      	sub	sp, #20
 80049ae:	296e      	cmp	r1, #110	; 0x6e
 80049b0:	4617      	mov	r7, r2
 80049b2:	4606      	mov	r6, r0
 80049b4:	4698      	mov	r8, r3
 80049b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049b8:	f000 80b3 	beq.w	8004b22 <_printf_i+0x182>
 80049bc:	d822      	bhi.n	8004a04 <_printf_i+0x64>
 80049be:	2963      	cmp	r1, #99	; 0x63
 80049c0:	d036      	beq.n	8004a30 <_printf_i+0x90>
 80049c2:	d80a      	bhi.n	80049da <_printf_i+0x3a>
 80049c4:	2900      	cmp	r1, #0
 80049c6:	f000 80b9 	beq.w	8004b3c <_printf_i+0x19c>
 80049ca:	2958      	cmp	r1, #88	; 0x58
 80049cc:	f000 8083 	beq.w	8004ad6 <_printf_i+0x136>
 80049d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049d8:	e032      	b.n	8004a40 <_printf_i+0xa0>
 80049da:	2964      	cmp	r1, #100	; 0x64
 80049dc:	d001      	beq.n	80049e2 <_printf_i+0x42>
 80049de:	2969      	cmp	r1, #105	; 0x69
 80049e0:	d1f6      	bne.n	80049d0 <_printf_i+0x30>
 80049e2:	6820      	ldr	r0, [r4, #0]
 80049e4:	6813      	ldr	r3, [r2, #0]
 80049e6:	0605      	lsls	r5, r0, #24
 80049e8:	f103 0104 	add.w	r1, r3, #4
 80049ec:	d52a      	bpl.n	8004a44 <_printf_i+0xa4>
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6011      	str	r1, [r2, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	da03      	bge.n	80049fe <_printf_i+0x5e>
 80049f6:	222d      	movs	r2, #45	; 0x2d
 80049f8:	425b      	negs	r3, r3
 80049fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049fe:	486f      	ldr	r0, [pc, #444]	; (8004bbc <_printf_i+0x21c>)
 8004a00:	220a      	movs	r2, #10
 8004a02:	e039      	b.n	8004a78 <_printf_i+0xd8>
 8004a04:	2973      	cmp	r1, #115	; 0x73
 8004a06:	f000 809d 	beq.w	8004b44 <_printf_i+0x1a4>
 8004a0a:	d808      	bhi.n	8004a1e <_printf_i+0x7e>
 8004a0c:	296f      	cmp	r1, #111	; 0x6f
 8004a0e:	d020      	beq.n	8004a52 <_printf_i+0xb2>
 8004a10:	2970      	cmp	r1, #112	; 0x70
 8004a12:	d1dd      	bne.n	80049d0 <_printf_i+0x30>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	f043 0320 	orr.w	r3, r3, #32
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	e003      	b.n	8004a26 <_printf_i+0x86>
 8004a1e:	2975      	cmp	r1, #117	; 0x75
 8004a20:	d017      	beq.n	8004a52 <_printf_i+0xb2>
 8004a22:	2978      	cmp	r1, #120	; 0x78
 8004a24:	d1d4      	bne.n	80049d0 <_printf_i+0x30>
 8004a26:	2378      	movs	r3, #120	; 0x78
 8004a28:	4865      	ldr	r0, [pc, #404]	; (8004bc0 <_printf_i+0x220>)
 8004a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a2e:	e055      	b.n	8004adc <_printf_i+0x13c>
 8004a30:	6813      	ldr	r3, [r2, #0]
 8004a32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a36:	1d19      	adds	r1, r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6011      	str	r1, [r2, #0]
 8004a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a40:	2301      	movs	r3, #1
 8004a42:	e08c      	b.n	8004b5e <_printf_i+0x1be>
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a4a:	6011      	str	r1, [r2, #0]
 8004a4c:	bf18      	it	ne
 8004a4e:	b21b      	sxthne	r3, r3
 8004a50:	e7cf      	b.n	80049f2 <_printf_i+0x52>
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	6825      	ldr	r5, [r4, #0]
 8004a56:	1d18      	adds	r0, r3, #4
 8004a58:	6010      	str	r0, [r2, #0]
 8004a5a:	0628      	lsls	r0, r5, #24
 8004a5c:	d501      	bpl.n	8004a62 <_printf_i+0xc2>
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	e002      	b.n	8004a68 <_printf_i+0xc8>
 8004a62:	0668      	lsls	r0, r5, #25
 8004a64:	d5fb      	bpl.n	8004a5e <_printf_i+0xbe>
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	296f      	cmp	r1, #111	; 0x6f
 8004a6a:	bf14      	ite	ne
 8004a6c:	220a      	movne	r2, #10
 8004a6e:	2208      	moveq	r2, #8
 8004a70:	4852      	ldr	r0, [pc, #328]	; (8004bbc <_printf_i+0x21c>)
 8004a72:	2100      	movs	r1, #0
 8004a74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a78:	6865      	ldr	r5, [r4, #4]
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	60a5      	str	r5, [r4, #8]
 8004a7e:	f2c0 8095 	blt.w	8004bac <_printf_i+0x20c>
 8004a82:	6821      	ldr	r1, [r4, #0]
 8004a84:	f021 0104 	bic.w	r1, r1, #4
 8004a88:	6021      	str	r1, [r4, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d13d      	bne.n	8004b0a <_printf_i+0x16a>
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	f040 808e 	bne.w	8004bb0 <_printf_i+0x210>
 8004a94:	4665      	mov	r5, ip
 8004a96:	2a08      	cmp	r2, #8
 8004a98:	d10b      	bne.n	8004ab2 <_printf_i+0x112>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	07db      	lsls	r3, r3, #31
 8004a9e:	d508      	bpl.n	8004ab2 <_printf_i+0x112>
 8004aa0:	6923      	ldr	r3, [r4, #16]
 8004aa2:	6862      	ldr	r2, [r4, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	bfde      	ittt	le
 8004aa8:	2330      	movle	r3, #48	; 0x30
 8004aaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ab2:	ebac 0305 	sub.w	r3, ip, r5
 8004ab6:	6123      	str	r3, [r4, #16]
 8004ab8:	f8cd 8000 	str.w	r8, [sp]
 8004abc:	463b      	mov	r3, r7
 8004abe:	aa03      	add	r2, sp, #12
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7ff fef6 	bl	80048b4 <_printf_common>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d14d      	bne.n	8004b68 <_printf_i+0x1c8>
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	b005      	add	sp, #20
 8004ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ad6:	4839      	ldr	r0, [pc, #228]	; (8004bbc <_printf_i+0x21c>)
 8004ad8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	6821      	ldr	r1, [r4, #0]
 8004ae0:	1d1d      	adds	r5, r3, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6015      	str	r5, [r2, #0]
 8004ae6:	060a      	lsls	r2, r1, #24
 8004ae8:	d50b      	bpl.n	8004b02 <_printf_i+0x162>
 8004aea:	07ca      	lsls	r2, r1, #31
 8004aec:	bf44      	itt	mi
 8004aee:	f041 0120 	orrmi.w	r1, r1, #32
 8004af2:	6021      	strmi	r1, [r4, #0]
 8004af4:	b91b      	cbnz	r3, 8004afe <_printf_i+0x15e>
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	f022 0220 	bic.w	r2, r2, #32
 8004afc:	6022      	str	r2, [r4, #0]
 8004afe:	2210      	movs	r2, #16
 8004b00:	e7b7      	b.n	8004a72 <_printf_i+0xd2>
 8004b02:	064d      	lsls	r5, r1, #25
 8004b04:	bf48      	it	mi
 8004b06:	b29b      	uxthmi	r3, r3
 8004b08:	e7ef      	b.n	8004aea <_printf_i+0x14a>
 8004b0a:	4665      	mov	r5, ip
 8004b0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b10:	fb02 3311 	mls	r3, r2, r1, r3
 8004b14:	5cc3      	ldrb	r3, [r0, r3]
 8004b16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	d1f5      	bne.n	8004b0c <_printf_i+0x16c>
 8004b20:	e7b9      	b.n	8004a96 <_printf_i+0xf6>
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	6825      	ldr	r5, [r4, #0]
 8004b26:	1d18      	adds	r0, r3, #4
 8004b28:	6961      	ldr	r1, [r4, #20]
 8004b2a:	6010      	str	r0, [r2, #0]
 8004b2c:	0628      	lsls	r0, r5, #24
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	d501      	bpl.n	8004b36 <_printf_i+0x196>
 8004b32:	6019      	str	r1, [r3, #0]
 8004b34:	e002      	b.n	8004b3c <_printf_i+0x19c>
 8004b36:	066a      	lsls	r2, r5, #25
 8004b38:	d5fb      	bpl.n	8004b32 <_printf_i+0x192>
 8004b3a:	8019      	strh	r1, [r3, #0]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4665      	mov	r5, ip
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	e7b9      	b.n	8004ab8 <_printf_i+0x118>
 8004b44:	6813      	ldr	r3, [r2, #0]
 8004b46:	1d19      	adds	r1, r3, #4
 8004b48:	6011      	str	r1, [r2, #0]
 8004b4a:	681d      	ldr	r5, [r3, #0]
 8004b4c:	6862      	ldr	r2, [r4, #4]
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4628      	mov	r0, r5
 8004b52:	f000 f837 	bl	8004bc4 <memchr>
 8004b56:	b108      	cbz	r0, 8004b5c <_printf_i+0x1bc>
 8004b58:	1b40      	subs	r0, r0, r5
 8004b5a:	6060      	str	r0, [r4, #4]
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	6123      	str	r3, [r4, #16]
 8004b60:	2300      	movs	r3, #0
 8004b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b66:	e7a7      	b.n	8004ab8 <_printf_i+0x118>
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	462a      	mov	r2, r5
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	4630      	mov	r0, r6
 8004b70:	47c0      	blx	r8
 8004b72:	3001      	adds	r0, #1
 8004b74:	d0aa      	beq.n	8004acc <_printf_i+0x12c>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	079b      	lsls	r3, r3, #30
 8004b7a:	d413      	bmi.n	8004ba4 <_printf_i+0x204>
 8004b7c:	68e0      	ldr	r0, [r4, #12]
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	4298      	cmp	r0, r3
 8004b82:	bfb8      	it	lt
 8004b84:	4618      	movlt	r0, r3
 8004b86:	e7a3      	b.n	8004ad0 <_printf_i+0x130>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	464a      	mov	r2, r9
 8004b8c:	4639      	mov	r1, r7
 8004b8e:	4630      	mov	r0, r6
 8004b90:	47c0      	blx	r8
 8004b92:	3001      	adds	r0, #1
 8004b94:	d09a      	beq.n	8004acc <_printf_i+0x12c>
 8004b96:	3501      	adds	r5, #1
 8004b98:	68e3      	ldr	r3, [r4, #12]
 8004b9a:	9a03      	ldr	r2, [sp, #12]
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	42ab      	cmp	r3, r5
 8004ba0:	dcf2      	bgt.n	8004b88 <_printf_i+0x1e8>
 8004ba2:	e7eb      	b.n	8004b7c <_printf_i+0x1dc>
 8004ba4:	2500      	movs	r5, #0
 8004ba6:	f104 0919 	add.w	r9, r4, #25
 8004baa:	e7f5      	b.n	8004b98 <_printf_i+0x1f8>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ac      	bne.n	8004b0a <_printf_i+0x16a>
 8004bb0:	7803      	ldrb	r3, [r0, #0]
 8004bb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bba:	e76c      	b.n	8004a96 <_printf_i+0xf6>
 8004bbc:	08004ed5 	.word	0x08004ed5
 8004bc0:	08004ee6 	.word	0x08004ee6

08004bc4 <memchr>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	b2c9      	uxtb	r1, r1
 8004bc8:	4402      	add	r2, r0
 8004bca:	4290      	cmp	r0, r2
 8004bcc:	4603      	mov	r3, r0
 8004bce:	d101      	bne.n	8004bd4 <memchr+0x10>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e003      	b.n	8004bdc <memchr+0x18>
 8004bd4:	781c      	ldrb	r4, [r3, #0]
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	428c      	cmp	r4, r1
 8004bda:	d1f6      	bne.n	8004bca <memchr+0x6>
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <memcpy>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	1e43      	subs	r3, r0, #1
 8004be4:	440a      	add	r2, r1
 8004be6:	4291      	cmp	r1, r2
 8004be8:	d100      	bne.n	8004bec <memcpy+0xc>
 8004bea:	bd10      	pop	{r4, pc}
 8004bec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bf4:	e7f7      	b.n	8004be6 <memcpy+0x6>

08004bf6 <memmove>:
 8004bf6:	4288      	cmp	r0, r1
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	eb01 0302 	add.w	r3, r1, r2
 8004bfe:	d807      	bhi.n	8004c10 <memmove+0x1a>
 8004c00:	1e42      	subs	r2, r0, #1
 8004c02:	4299      	cmp	r1, r3
 8004c04:	d00a      	beq.n	8004c1c <memmove+0x26>
 8004c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c0a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c0e:	e7f8      	b.n	8004c02 <memmove+0xc>
 8004c10:	4283      	cmp	r3, r0
 8004c12:	d9f5      	bls.n	8004c00 <memmove+0xa>
 8004c14:	1881      	adds	r1, r0, r2
 8004c16:	1ad2      	subs	r2, r2, r3
 8004c18:	42d3      	cmn	r3, r2
 8004c1a:	d100      	bne.n	8004c1e <memmove+0x28>
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c22:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c26:	e7f7      	b.n	8004c18 <memmove+0x22>

08004c28 <_free_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d043      	beq.n	8004cb8 <_free_r+0x90>
 8004c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c34:	1f0c      	subs	r4, r1, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bfb8      	it	lt
 8004c3a:	18e4      	addlt	r4, r4, r3
 8004c3c:	f000 f8d0 	bl	8004de0 <__malloc_lock>
 8004c40:	4a1e      	ldr	r2, [pc, #120]	; (8004cbc <_free_r+0x94>)
 8004c42:	6813      	ldr	r3, [r2, #0]
 8004c44:	4610      	mov	r0, r2
 8004c46:	b933      	cbnz	r3, 8004c56 <_free_r+0x2e>
 8004c48:	6063      	str	r3, [r4, #4]
 8004c4a:	6014      	str	r4, [r2, #0]
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c52:	f000 b8c6 	b.w	8004de2 <__malloc_unlock>
 8004c56:	42a3      	cmp	r3, r4
 8004c58:	d90b      	bls.n	8004c72 <_free_r+0x4a>
 8004c5a:	6821      	ldr	r1, [r4, #0]
 8004c5c:	1862      	adds	r2, r4, r1
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	bf01      	itttt	eq
 8004c62:	681a      	ldreq	r2, [r3, #0]
 8004c64:	685b      	ldreq	r3, [r3, #4]
 8004c66:	1852      	addeq	r2, r2, r1
 8004c68:	6022      	streq	r2, [r4, #0]
 8004c6a:	6063      	str	r3, [r4, #4]
 8004c6c:	6004      	str	r4, [r0, #0]
 8004c6e:	e7ed      	b.n	8004c4c <_free_r+0x24>
 8004c70:	4613      	mov	r3, r2
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	b10a      	cbz	r2, 8004c7a <_free_r+0x52>
 8004c76:	42a2      	cmp	r2, r4
 8004c78:	d9fa      	bls.n	8004c70 <_free_r+0x48>
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	1858      	adds	r0, r3, r1
 8004c7e:	42a0      	cmp	r0, r4
 8004c80:	d10b      	bne.n	8004c9a <_free_r+0x72>
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	4401      	add	r1, r0
 8004c86:	1858      	adds	r0, r3, r1
 8004c88:	4282      	cmp	r2, r0
 8004c8a:	6019      	str	r1, [r3, #0]
 8004c8c:	d1de      	bne.n	8004c4c <_free_r+0x24>
 8004c8e:	6810      	ldr	r0, [r2, #0]
 8004c90:	6852      	ldr	r2, [r2, #4]
 8004c92:	4401      	add	r1, r0
 8004c94:	6019      	str	r1, [r3, #0]
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	e7d8      	b.n	8004c4c <_free_r+0x24>
 8004c9a:	d902      	bls.n	8004ca2 <_free_r+0x7a>
 8004c9c:	230c      	movs	r3, #12
 8004c9e:	602b      	str	r3, [r5, #0]
 8004ca0:	e7d4      	b.n	8004c4c <_free_r+0x24>
 8004ca2:	6820      	ldr	r0, [r4, #0]
 8004ca4:	1821      	adds	r1, r4, r0
 8004ca6:	428a      	cmp	r2, r1
 8004ca8:	bf01      	itttt	eq
 8004caa:	6811      	ldreq	r1, [r2, #0]
 8004cac:	6852      	ldreq	r2, [r2, #4]
 8004cae:	1809      	addeq	r1, r1, r0
 8004cb0:	6021      	streq	r1, [r4, #0]
 8004cb2:	6062      	str	r2, [r4, #4]
 8004cb4:	605c      	str	r4, [r3, #4]
 8004cb6:	e7c9      	b.n	8004c4c <_free_r+0x24>
 8004cb8:	bd38      	pop	{r3, r4, r5, pc}
 8004cba:	bf00      	nop
 8004cbc:	2000018c 	.word	0x2000018c

08004cc0 <_malloc_r>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	1ccd      	adds	r5, r1, #3
 8004cc4:	f025 0503 	bic.w	r5, r5, #3
 8004cc8:	3508      	adds	r5, #8
 8004cca:	2d0c      	cmp	r5, #12
 8004ccc:	bf38      	it	cc
 8004cce:	250c      	movcc	r5, #12
 8004cd0:	2d00      	cmp	r5, #0
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	db01      	blt.n	8004cda <_malloc_r+0x1a>
 8004cd6:	42a9      	cmp	r1, r5
 8004cd8:	d903      	bls.n	8004ce2 <_malloc_r+0x22>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	6033      	str	r3, [r6, #0]
 8004cde:	2000      	movs	r0, #0
 8004ce0:	bd70      	pop	{r4, r5, r6, pc}
 8004ce2:	f000 f87d 	bl	8004de0 <__malloc_lock>
 8004ce6:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <_malloc_r+0xac>)
 8004ce8:	6814      	ldr	r4, [r2, #0]
 8004cea:	4621      	mov	r1, r4
 8004cec:	b991      	cbnz	r1, 8004d14 <_malloc_r+0x54>
 8004cee:	4c20      	ldr	r4, [pc, #128]	; (8004d70 <_malloc_r+0xb0>)
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	b91b      	cbnz	r3, 8004cfc <_malloc_r+0x3c>
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f000 f863 	bl	8004dc0 <_sbrk_r>
 8004cfa:	6020      	str	r0, [r4, #0]
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4630      	mov	r0, r6
 8004d00:	f000 f85e 	bl	8004dc0 <_sbrk_r>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d124      	bne.n	8004d52 <_malloc_r+0x92>
 8004d08:	230c      	movs	r3, #12
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	f000 f868 	bl	8004de2 <__malloc_unlock>
 8004d12:	e7e4      	b.n	8004cde <_malloc_r+0x1e>
 8004d14:	680b      	ldr	r3, [r1, #0]
 8004d16:	1b5b      	subs	r3, r3, r5
 8004d18:	d418      	bmi.n	8004d4c <_malloc_r+0x8c>
 8004d1a:	2b0b      	cmp	r3, #11
 8004d1c:	d90f      	bls.n	8004d3e <_malloc_r+0x7e>
 8004d1e:	600b      	str	r3, [r1, #0]
 8004d20:	18cc      	adds	r4, r1, r3
 8004d22:	50cd      	str	r5, [r1, r3]
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 f85c 	bl	8004de2 <__malloc_unlock>
 8004d2a:	f104 000b 	add.w	r0, r4, #11
 8004d2e:	1d23      	adds	r3, r4, #4
 8004d30:	f020 0007 	bic.w	r0, r0, #7
 8004d34:	1ac3      	subs	r3, r0, r3
 8004d36:	d0d3      	beq.n	8004ce0 <_malloc_r+0x20>
 8004d38:	425a      	negs	r2, r3
 8004d3a:	50e2      	str	r2, [r4, r3]
 8004d3c:	e7d0      	b.n	8004ce0 <_malloc_r+0x20>
 8004d3e:	684b      	ldr	r3, [r1, #4]
 8004d40:	428c      	cmp	r4, r1
 8004d42:	bf16      	itet	ne
 8004d44:	6063      	strne	r3, [r4, #4]
 8004d46:	6013      	streq	r3, [r2, #0]
 8004d48:	460c      	movne	r4, r1
 8004d4a:	e7eb      	b.n	8004d24 <_malloc_r+0x64>
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	6849      	ldr	r1, [r1, #4]
 8004d50:	e7cc      	b.n	8004cec <_malloc_r+0x2c>
 8004d52:	1cc4      	adds	r4, r0, #3
 8004d54:	f024 0403 	bic.w	r4, r4, #3
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d005      	beq.n	8004d68 <_malloc_r+0xa8>
 8004d5c:	1a21      	subs	r1, r4, r0
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f000 f82e 	bl	8004dc0 <_sbrk_r>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d0cf      	beq.n	8004d08 <_malloc_r+0x48>
 8004d68:	6025      	str	r5, [r4, #0]
 8004d6a:	e7db      	b.n	8004d24 <_malloc_r+0x64>
 8004d6c:	2000018c 	.word	0x2000018c
 8004d70:	20000190 	.word	0x20000190

08004d74 <_realloc_r>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	4607      	mov	r7, r0
 8004d78:	4614      	mov	r4, r2
 8004d7a:	460e      	mov	r6, r1
 8004d7c:	b921      	cbnz	r1, 8004d88 <_realloc_r+0x14>
 8004d7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d82:	4611      	mov	r1, r2
 8004d84:	f7ff bf9c 	b.w	8004cc0 <_malloc_r>
 8004d88:	b922      	cbnz	r2, 8004d94 <_realloc_r+0x20>
 8004d8a:	f7ff ff4d 	bl	8004c28 <_free_r>
 8004d8e:	4625      	mov	r5, r4
 8004d90:	4628      	mov	r0, r5
 8004d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d94:	f000 f826 	bl	8004de4 <_malloc_usable_size_r>
 8004d98:	42a0      	cmp	r0, r4
 8004d9a:	d20f      	bcs.n	8004dbc <_realloc_r+0x48>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4638      	mov	r0, r7
 8004da0:	f7ff ff8e 	bl	8004cc0 <_malloc_r>
 8004da4:	4605      	mov	r5, r0
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d0f2      	beq.n	8004d90 <_realloc_r+0x1c>
 8004daa:	4631      	mov	r1, r6
 8004dac:	4622      	mov	r2, r4
 8004dae:	f7ff ff17 	bl	8004be0 <memcpy>
 8004db2:	4631      	mov	r1, r6
 8004db4:	4638      	mov	r0, r7
 8004db6:	f7ff ff37 	bl	8004c28 <_free_r>
 8004dba:	e7e9      	b.n	8004d90 <_realloc_r+0x1c>
 8004dbc:	4635      	mov	r5, r6
 8004dbe:	e7e7      	b.n	8004d90 <_realloc_r+0x1c>

08004dc0 <_sbrk_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4c05      	ldr	r4, [pc, #20]	; (8004ddc <_sbrk_r+0x1c>)
 8004dc6:	4605      	mov	r5, r0
 8004dc8:	4608      	mov	r0, r1
 8004dca:	6023      	str	r3, [r4, #0]
 8004dcc:	f7fc f8d2 	bl	8000f74 <_sbrk>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_sbrk_r+0x1a>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_sbrk_r+0x1a>
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	200002e8 	.word	0x200002e8

08004de0 <__malloc_lock>:
 8004de0:	4770      	bx	lr

08004de2 <__malloc_unlock>:
 8004de2:	4770      	bx	lr

08004de4 <_malloc_usable_size_r>:
 8004de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de8:	1f18      	subs	r0, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bfbc      	itt	lt
 8004dee:	580b      	ldrlt	r3, [r1, r0]
 8004df0:	18c0      	addlt	r0, r0, r3
 8004df2:	4770      	bx	lr

08004df4 <_init>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr

08004e00 <_fini>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr
